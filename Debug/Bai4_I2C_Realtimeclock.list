
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000302c  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f6c  08008f6c  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08008f6c  08008f6c  00018f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f74  08008f74  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f74  08008f74  00018f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08008f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000001c4  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   000126bc  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033a4  00000000  00000000  00032757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001220  00000000  00000000  00035b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dff  00000000  00000000  00036d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000234f8  00000000  00000000  00037b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018645  00000000  00000000  0005b017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf8b8  00000000  00000000  0007365c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a38  00000000  00000000  00142f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0014794c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f28 	.word	0x08005f28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08005f28 	.word	0x08005f28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <button_init+0x14>)
 80004ce:	f002 fc35 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00

080004dc <button_Scan>:

void button_Scan(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <button_Scan+0xc8>)
 80004e8:	f002 fc28 	bl	8002d3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	482c      	ldr	r0, [pc, #176]	; (80005a4 <button_Scan+0xc8>)
 80004f2:	f002 fc23 	bl	8002d3c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f6:	230a      	movs	r3, #10
 80004f8:	2202      	movs	r2, #2
 80004fa:	492b      	ldr	r1, [pc, #172]	; (80005a8 <button_Scan+0xcc>)
 80004fc:	482b      	ldr	r0, [pc, #172]	; (80005ac <button_Scan+0xd0>)
 80004fe:	f004 fb6e 	bl	8004bde <HAL_SPI_Receive>
	  int button_index = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e03f      	b.n	8000592 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db06      	blt.n	8000526 <button_Scan+0x4a>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b03      	cmp	r3, #3
 800051c:	dc03      	bgt.n	8000526 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e018      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b03      	cmp	r3, #3
 800052a:	dd07      	ble.n	800053c <button_Scan+0x60>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b07      	cmp	r3, #7
 8000530:	dc04      	bgt.n	800053c <button_Scan+0x60>
			  button_index = 7 - i;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f1c3 0307 	rsb	r3, r3, #7
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00d      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dd06      	ble.n	8000550 <button_Scan+0x74>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0b      	cmp	r3, #11
 8000546:	dc03      	bgt.n	8000550 <button_Scan+0x74>
			  button_index = i + 4;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3304      	adds	r3, #4
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e003      	b.n	8000558 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f1c3 0317 	rsb	r3, r3, #23
 8000556:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <button_Scan+0xcc>)
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	4013      	ands	r3, r2
 8000560:	b29b      	uxth	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <button_Scan+0x96>
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2100      	movs	r1, #0
 800056c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000570:	e009      	b.n	8000586 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057a:	3301      	adds	r3, #1
 800057c:	b299      	uxth	r1, r3
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000586:	897b      	ldrh	r3, [r7, #10]
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	ddbc      	ble.n	8000512 <button_Scan+0x36>
	  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	20000064 	.word	0x20000064
 80005ac:	20000134 	.word	0x20000134
 80005b0:	20000044 	.word	0x20000044

080005b4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005b8:	201e      	movs	r0, #30
 80005ba:	f002 f82d 	bl	8002618 <DEC2BCD>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <ds3231_init+0x80>)
 80005c4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005c6:	2016      	movs	r0, #22
 80005c8:	f002 f826 	bl	8002618 <DEC2BCD>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <ds3231_init+0x80>)
 80005d2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d4:	2015      	movs	r0, #21
 80005d6:	f002 f81f 	bl	8002618 <DEC2BCD>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <ds3231_init+0x80>)
 80005e0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005e2:	2006      	movs	r0, #6
 80005e4:	f002 f818 	bl	8002618 <DEC2BCD>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <ds3231_init+0x80>)
 80005ee:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005f0:	200f      	movs	r0, #15
 80005f2:	f002 f811 	bl	8002618 <DEC2BCD>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <ds3231_init+0x80>)
 80005fc:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005fe:	2009      	movs	r0, #9
 8000600:	f002 f80a 	bl	8002618 <DEC2BCD>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <ds3231_init+0x80>)
 800060a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800060c:	2017      	movs	r0, #23
 800060e:	f002 f803 	bl	8002618 <DEC2BCD>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <ds3231_init+0x80>)
 8000618:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800061a:	2332      	movs	r3, #50	; 0x32
 800061c:	2203      	movs	r2, #3
 800061e:	21d0      	movs	r1, #208	; 0xd0
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <ds3231_init+0x84>)
 8000622:	f003 f809 	bl	8003638 <HAL_I2C_IsDeviceReady>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d000      	beq.n	800062e <ds3231_init+0x7a>
		while(1);
 800062c:	e7fe      	b.n	800062c <ds3231_init+0x78>
	};
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000068 	.word	0x20000068
 8000638:	200000cc 	.word	0x200000cc

0800063c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af04      	add	r7, sp, #16
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	4618      	mov	r0, r3
 8000650:	f001 ffe2 	bl	8002618 <DEC2BCD>
 8000654:	4603      	mov	r3, r0
 8000656:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	b29a      	uxth	r2, r3
 800065c:	230a      	movs	r3, #10
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	2301      	movs	r3, #1
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	f107 030f 	add.w	r3, r7, #15
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	21d0      	movs	r1, #208	; 0xd0
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <ds3231_Write+0x40>)
 8000670:	f002 fcc2 	bl	8002ff8 <HAL_I2C_Mem_Write>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000cc 	.word	0x200000cc

08000680 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000686:	230a      	movs	r3, #10
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2307      	movs	r3, #7
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <ds3231_ReadTime+0xa4>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2200      	movs	r2, #0
 8000696:	21d0      	movs	r1, #208	; 0xd0
 8000698:	4823      	ldr	r0, [pc, #140]	; (8000728 <ds3231_ReadTime+0xa8>)
 800069a:	f002 fda7 	bl	80031ec <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ff9e 	bl	80025e4 <BCD2DEC>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <ds3231_ReadTime+0xac>)
 80006ae:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ff95 	bl	80025e4 <BCD2DEC>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <ds3231_ReadTime+0xb0>)
 80006c0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ff8c 	bl	80025e4 <BCD2DEC>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <ds3231_ReadTime+0xb4>)
 80006d2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 ff83 	bl	80025e4 <BCD2DEC>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <ds3231_ReadTime+0xb8>)
 80006e4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 ff7a 	bl	80025e4 <BCD2DEC>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <ds3231_ReadTime+0xbc>)
 80006f6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 ff71 	bl	80025e4 <BCD2DEC>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <ds3231_ReadTime+0xc0>)
 8000708:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <ds3231_ReadTime+0xa4>)
 800070c:	799b      	ldrb	r3, [r3, #6]
 800070e:	4618      	mov	r0, r3
 8000710:	f001 ff68 	bl	80025e4 <BCD2DEC>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <ds3231_ReadTime+0xc4>)
 800071a:	701a      	strb	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000068 	.word	0x20000068
 8000728:	200000cc 	.word	0x200000cc
 800072c:	20000071 	.word	0x20000071
 8000730:	20000070 	.word	0x20000070
 8000734:	2000006f 	.word	0x2000006f
 8000738:	20000073 	.word	0x20000073
 800073c:	20000072 	.word	0x20000072
 8000740:	20000074 	.word	0x20000074
 8000744:	20000075 	.word	0x20000075

08000748 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_FSMC_Init+0xec>)
 8000776:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800077a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_FSMC_Init+0xec>)
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_FSMC_Init+0xf0>)
 8000780:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <MX_FSMC_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_FSMC_Init+0xec>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_FSMC_Init+0xec>)
 8000796:	2210      	movs	r2, #16
 8000798:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_FSMC_Init+0xec>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_FSMC_Init+0xec>)
 80007b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_FSMC_Init+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_FSMC_Init+0xec>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_FSMC_Init+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_FSMC_Init+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_FSMC_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007da:	230f      	movs	r3, #15
 80007dc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007de:	230f      	movs	r3, #15
 80007e0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007e2:	233c      	movs	r3, #60	; 0x3c
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007ea:	2310      	movs	r3, #16
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ee:	2311      	movs	r3, #17
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007f2:	2300      	movs	r3, #0
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007f6:	2308      	movs	r3, #8
 80007f8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007fa:	230f      	movs	r3, #15
 80007fc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007fe:	2309      	movs	r3, #9
 8000800:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000806:	2310      	movs	r3, #16
 8000808:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800080a:	2311      	movs	r3, #17
 800080c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000812:	463a      	mov	r2, r7
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_FSMC_Init+0xec>)
 800081c:	f004 fdc2 	bl	80053a4 <HAL_SRAM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000826:	f001 fb23 	bl	8001e70 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800082a:	bf00      	nop
 800082c:	3738      	adds	r7, #56	; 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000078 	.word	0x20000078
 8000838:	a0000104 	.word	0xa0000104

0800083c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_FSMC_MspInit+0x88>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d131      	bne.n	80008bc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_FSMC_MspInit+0x88>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <HAL_FSMC_MspInit+0x8c>)
 8000864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <HAL_FSMC_MspInit+0x8c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6393      	str	r3, [r2, #56]	; 0x38
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_FSMC_MspInit+0x8c>)
 8000870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800087a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800087e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800088c:	230c      	movs	r3, #12
 800088e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <HAL_FSMC_MspInit+0x90>)
 8000896:	f002 f8b5 	bl	8002a04 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800089a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800089e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008ac:	230c      	movs	r3, #12
 80008ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <HAL_FSMC_MspInit+0x94>)
 80008b6:	f002 f8a5 	bl	8002a04 <HAL_GPIO_Init>
 80008ba:	e000      	b.n	80008be <HAL_FSMC_MspInit+0x82>
    return;
 80008bc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000c8 	.word	0x200000c8
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008dc:	f7ff ffae 	bl	800083c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a6e      	ldr	r2, [pc, #440]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b6c      	ldr	r3, [pc, #432]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a67      	ldr	r2, [pc, #412]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a60      	ldr	r2, [pc, #384]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b5a      	ldr	r3, [pc, #360]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a59      	ldr	r2, [pc, #356]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2170      	movs	r1, #112	; 0x70
 80009c6:	483f      	ldr	r0, [pc, #252]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 80009c8:	f002 f9b8 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	483d      	ldr	r0, [pc, #244]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009d4:	f002 f9b2 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	483b      	ldr	r0, [pc, #236]	; (8000acc <MX_GPIO_Init+0x1e4>)
 80009de:	f002 f9ad 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e8:	4839      	ldr	r0, [pc, #228]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 80009ea:	f002 f9a7 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2108      	movs	r1, #8
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 80009f4:	f002 f9a2 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009f8:	2370      	movs	r3, #112	; 0x70
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 8000a10:	f001 fff8 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a2e:	f001 ffe9 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000a46:	f001 ffdd 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a4a:	2330      	movs	r3, #48	; 0x30
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a5e:	f001 ffd1 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000a7a:	f001 ffc3 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000a98:	f001 ffb4 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 8000ab4:	f001 ffa6 	bl	8002a04 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f002 f92b 	bl	8002d70 <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f001 f9a6 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000cc 	.word	0x200000cc
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	000186a0 	.word	0x000186a0

08000b34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_I2C_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12b      	bne.n	8000bae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b76:	2312      	movs	r3, #18
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b82:	2304      	movs	r3, #4
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <HAL_I2C_MspInit+0x8c>)
 8000b8e:	f001 ff39 	bl	8002a04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <LCD_WR_REG+0x1c>)
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	8013      	strh	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	600ffffe 	.word	0x600ffffe

08000be4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <LCD_WR_DATA+0x1c>)
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	8053      	strh	r3, [r2, #2]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	600ffffe 	.word	0x600ffffe

08000c04 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <LCD_RD_DATA+0x20>)
 8000c0c:	885b      	ldrh	r3, [r3, #2]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b29b      	uxth	r3, r3
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	600ffffe 	.word	0x600ffffe

08000c28 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	80fb      	strh	r3, [r7, #6]
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80bb      	strh	r3, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	807b      	strh	r3, [r7, #2]
 8000c42:	4613      	mov	r3, r2
 8000c44:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c46:	202a      	movs	r0, #42	; 0x2a
 8000c48:	f7ff ffbc 	bl	8000bc4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffc6 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc0 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffba 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffb4 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c7c:	202b      	movs	r0, #43	; 0x2b
 8000c7e:	f7ff ffa1 	bl	8000bc4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffab 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffa5 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c9a:	883b      	ldrh	r3, [r7, #0]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff9f 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ca6:	883b      	ldrh	r3, [r7, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff99 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f7ff ff86 	bl	8000bc4 <LCD_WR_REG>
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}

08000cc0 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <lcd_Clear+0x70>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <lcd_Clear+0x70>)
 8000ce4:	885b      	ldrh	r3, [r3, #2]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff ff9b 	bl	8000c28 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	e011      	b.n	8000d1c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	81bb      	strh	r3, [r7, #12]
 8000cfc:	e006      	b.n	8000d0c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff6f 	bl	8000be4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d06:	89bb      	ldrh	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	81bb      	strh	r3, [r7, #12]
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <lcd_Clear+0x70>)
 8000d0e:	885b      	ldrh	r3, [r3, #2]
 8000d10:	89ba      	ldrh	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3f3      	bcc.n	8000cfe <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	81fb      	strh	r3, [r7, #14]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <lcd_Clear+0x70>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	89fa      	ldrh	r2, [r7, #14]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3e8      	bcc.n	8000cf8 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000120 	.word	0x20000120

08000d34 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	88b9      	ldrh	r1, [r7, #4]
 8000d4c:	88f8      	ldrh	r0, [r7, #6]
 8000d4e:	f7ff ff6b 	bl	8000c28 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff45 	bl	8000be4 <LCD_WR_DATA>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <lcd_DrawLine>:

void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000d62:	b590      	push	{r4, r7, lr}
 8000d64:	b08d      	sub	sp, #52	; 0x34
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4604      	mov	r4, r0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4623      	mov	r3, r4
 8000d72:	80fb      	strh	r3, [r7, #6]
 8000d74:	4603      	mov	r3, r0
 8000d76:	80bb      	strh	r3, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000d88:	887a      	ldrh	r2, [r7, #2]
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8000d90:	883a      	ldrh	r2, [r7, #0]
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dd02      	ble.n	8000dac <lcd_DrawLine+0x4a>
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e00b      	b.n	8000dc4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <lcd_DrawLine+0x56>
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e005      	b.n	8000dc4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	dd02      	ble.n	8000dd0 <lcd_DrawLine+0x6e>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e00b      	b.n	8000de8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <lcd_DrawLine+0x7a>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e005      	b.n	8000de8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	425b      	negs	r3, r3
 8000de6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8000de8:	6a3a      	ldr	r2, [r7, #32]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dd02      	ble.n	8000df6 <lcd_DrawLine+0x94>
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	e001      	b.n	8000dfa <lcd_DrawLine+0x98>
	else distance=delta_y;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000dfe:	e02b      	b.n	8000e58 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	b291      	uxth	r1, r2
 8000e08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff91 	bl	8000d34 <lcd_DrawPoint>
		xerr+=delta_x;
 8000e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	4413      	add	r3, r2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	4413      	add	r3, r2
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8000e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	dd07      	ble.n	8000e3a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8000e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dd07      	ble.n	8000e52 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8000e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8000e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e54:	3301      	adds	r3, #1
 8000e56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dacf      	bge.n	8000e00 <lcd_DrawLine+0x9e>
		}
	}
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3734      	adds	r7, #52	; 0x34
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}

08000e6a <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8000e6a:	b590      	push	{r4, r7, lr}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af02      	add	r7, sp, #8
 8000e70:	4604      	mov	r4, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8000e88:	88bc      	ldrh	r4, [r7, #4]
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	88b9      	ldrh	r1, [r7, #4]
 8000e8e:	88f8      	ldrh	r0, [r7, #6]
 8000e90:	8b3b      	ldrh	r3, [r7, #24]
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	4623      	mov	r3, r4
 8000e96:	f7ff ff64 	bl	8000d62 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8000e9a:	883c      	ldrh	r4, [r7, #0]
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	88b9      	ldrh	r1, [r7, #4]
 8000ea0:	88f8      	ldrh	r0, [r7, #6]
 8000ea2:	8b3b      	ldrh	r3, [r7, #24]
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	f7ff ff5b 	bl	8000d62 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8000eac:	883c      	ldrh	r4, [r7, #0]
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	8839      	ldrh	r1, [r7, #0]
 8000eb2:	88f8      	ldrh	r0, [r7, #6]
 8000eb4:	8b3b      	ldrh	r3, [r7, #24]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff ff52 	bl	8000d62 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8000ebe:	883c      	ldrh	r4, [r7, #0]
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	8878      	ldrh	r0, [r7, #2]
 8000ec6:	8b3b      	ldrh	r3, [r7, #24]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4623      	mov	r3, r4
 8000ecc:	f7ff ff49 	bl	8000d62 <lcd_DrawLine>
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4603      	mov	r3, r0
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70fb      	strb	r3, [r7, #3]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	fb12 f303 	smulbb	r3, r2, r3
 8000f2e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	3b20      	subs	r3, #32
 8000f34:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29c      	uxth	r4, r3
 8000f44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	88b9      	ldrh	r1, [r7, #4]
 8000f56:	88f8      	ldrh	r0, [r7, #6]
 8000f58:	4622      	mov	r2, r4
 8000f5a:	f7ff fe65 	bl	8000c28 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	827b      	strh	r3, [r7, #18]
 8000f62:	e07a      	b.n	800105a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d028      	beq.n	8000fbe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d108      	bne.n	8000f86 <lcd_ShowChar+0xae>
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	8a7b      	ldrh	r3, [r7, #18]
 8000f78:	493c      	ldr	r1, [pc, #240]	; (800106c <lcd_ShowChar+0x194>)
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	440a      	add	r2, r1
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	75fb      	strb	r3, [r7, #23]
 8000f84:	e01b      	b.n	8000fbe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f8a:	2b18      	cmp	r3, #24
 8000f8c:	d10b      	bne.n	8000fa6 <lcd_ShowChar+0xce>
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	8a79      	ldrh	r1, [r7, #18]
 8000f92:	4837      	ldr	r0, [pc, #220]	; (8001070 <lcd_ShowChar+0x198>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4403      	add	r3, r0
 8000f9e:	440b      	add	r3, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	75fb      	strb	r3, [r7, #23]
 8000fa4:	e00b      	b.n	8000fbe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000faa:	2b20      	cmp	r3, #32
 8000fac:	d15a      	bne.n	8001064 <lcd_ShowChar+0x18c>
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	8a7b      	ldrh	r3, [r7, #18]
 8000fb2:	4930      	ldr	r1, [pc, #192]	; (8001074 <lcd_ShowChar+0x19c>)
 8000fb4:	0192      	lsls	r2, r2, #6
 8000fb6:	440a      	add	r2, r1
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75bb      	strb	r3, [r7, #22]
 8000fc2:	e044      	b.n	800104e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000fc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d120      	bne.n	800100e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000fcc:	7dfa      	ldrb	r2, [r7, #23]
 8000fce:	7dbb      	ldrb	r3, [r7, #22]
 8000fd0:	fa42 f303 	asr.w	r3, r2, r3
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <lcd_ShowChar+0x10e>
 8000fdc:	883b      	ldrh	r3, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe00 	bl	8000be4 <LCD_WR_DATA>
 8000fe4:	e003      	b.n	8000fee <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdfb 	bl	8000be4 <LCD_WR_DATA>
				m++;
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ffc:	fb01 f202 	mul.w	r2, r1, r2
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11f      	bne.n	8001048 <lcd_ShowChar+0x170>
				{
					m=0;
 8001008:	2300      	movs	r3, #0
 800100a:	757b      	strb	r3, [r7, #21]
					break;
 800100c:	e022      	b.n	8001054 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800100e:	7dfa      	ldrb	r2, [r7, #23]
 8001010:	7dbb      	ldrb	r3, [r7, #22]
 8001012:	fa42 f303 	asr.w	r3, r2, r3
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <lcd_ShowChar+0x152>
 800101e:	883a      	ldrh	r2, [r7, #0]
 8001020:	88b9      	ldrh	r1, [r7, #4]
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fe85 	bl	8000d34 <lcd_DrawPoint>
				x++;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	3301      	adds	r3, #1
 800102e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	8a3b      	ldrh	r3, [r7, #16]
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	429a      	cmp	r2, r3
 800103a:	d105      	bne.n	8001048 <lcd_ShowChar+0x170>
				{
					x=x0;
 800103c:	8a3b      	ldrh	r3, [r7, #16]
 800103e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	80bb      	strh	r3, [r7, #4]
					break;
 8001046:	e005      	b.n	8001054 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001048:	7dbb      	ldrb	r3, [r7, #22]
 800104a:	3301      	adds	r3, #1
 800104c:	75bb      	strb	r3, [r7, #22]
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d9b7      	bls.n	8000fc4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001054:	8a7b      	ldrh	r3, [r7, #18]
 8001056:	3301      	adds	r3, #1
 8001058:	827b      	strh	r3, [r7, #18]
 800105a:	8a7a      	ldrh	r2, [r7, #18]
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	429a      	cmp	r2, r3
 8001060:	d380      	bcc.n	8000f64 <lcd_ShowChar+0x8c>
 8001062:	e000      	b.n	8001066 <lcd_ShowChar+0x18e>
		else return;
 8001064:	bf00      	nop
				}
			}
		}
	}
}
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	08005fd4 	.word	0x08005fd4
 8001070:	080065c4 	.word	0x080065c4
 8001074:	08007794 	.word	0x08007794

08001078 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001088:	2301      	movs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800108c:	e004      	b.n	8001098 <mypow+0x20>
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	1e5a      	subs	r2, r3, #1
 800109c:	71ba      	strb	r2, [r7, #6]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f5      	bne.n	800108e <mypow+0x16>
	return result;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	4603      	mov	r3, r0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80010d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e059      	b.n	8001194 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80010e0:	887c      	ldrh	r4, [r7, #2]
 80010e2:	787a      	ldrb	r2, [r7, #1]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	200a      	movs	r0, #10
 80010f2:	f7ff ffc1 	bl	8001078 <mypow>
 80010f6:	4603      	mov	r3, r0
 80010f8:	fbb4 f1f3 	udiv	r1, r4, r3
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <lcd_ShowIntNum+0xf8>)
 80010fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	1aca      	subs	r2, r1, r3
 800110e:	4613      	mov	r3, r2
 8001110:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d121      	bne.n	800115c <lcd_ShowIntNum+0xac>
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	787b      	ldrb	r3, [r7, #1]
 800111c:	3b01      	subs	r3, #1
 800111e:	429a      	cmp	r2, r3
 8001120:	da1c      	bge.n	800115c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d117      	bne.n	8001158 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b29a      	uxth	r2, r3
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	b29b      	uxth	r3, r3
 8001130:	fb12 f303 	smulbb	r3, r2, r3
 8001134:	b29a      	uxth	r2, r3
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4413      	add	r3, r2
 800113a:	b298      	uxth	r0, r3
 800113c:	8c3a      	ldrh	r2, [r7, #32]
 800113e:	88b9      	ldrh	r1, [r7, #4]
 8001140:	2300      	movs	r3, #0
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	4613      	mov	r3, r2
 8001150:	2220      	movs	r2, #32
 8001152:	f7ff fec1 	bl	8000ed8 <lcd_ShowChar>
				continue;
 8001156:	e01a      	b.n	800118e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001158:	2301      	movs	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	b29a      	uxth	r2, r3
 8001160:	7b7b      	ldrb	r3, [r7, #13]
 8001162:	b29b      	uxth	r3, r3
 8001164:	fb12 f303 	smulbb	r3, r2, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4413      	add	r3, r2
 800116e:	b298      	uxth	r0, r3
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	3330      	adds	r3, #48	; 0x30
 8001174:	b2da      	uxtb	r2, r3
 8001176:	8c3c      	ldrh	r4, [r7, #32]
 8001178:	88b9      	ldrh	r1, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	f7ff fea5 	bl	8000ed8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	787b      	ldrb	r3, [r7, #1]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3a1      	bcc.n	80010e0 <lcd_ShowIntNum+0x30>
	}
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	cccccccd 	.word	0xcccccccd

080011ac <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <lcd_SetDir+0x44>)
 80011c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011cc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <lcd_SetDir+0x44>)
 80011d0:	22f0      	movs	r2, #240	; 0xf0
 80011d2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011d4:	e006      	b.n	80011e4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <lcd_SetDir+0x44>)
 80011d8:	22f0      	movs	r2, #240	; 0xf0
 80011da:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <lcd_SetDir+0x44>)
 80011de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011e2:	805a      	strh	r2, [r3, #2]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	20000120 	.word	0x20000120

080011f4 <lcd_init>:


void lcd_init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	48aa      	ldr	r0, [pc, #680]	; (80014a8 <lcd_init+0x2b4>)
 8001200:	f001 fd9c 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001208:	f001 fac6 	bl	8002798 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001212:	48a5      	ldr	r0, [pc, #660]	; (80014a8 <lcd_init+0x2b4>)
 8001214:	f001 fd92 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f001 fabc 	bl	8002798 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ffc3 	bl	80011ac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001226:	20d3      	movs	r0, #211	; 0xd3
 8001228:	f7ff fccc 	bl	8000bc4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800122c:	f7ff fcea 	bl	8000c04 <LCD_RD_DATA>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <lcd_init+0x2b8>)
 8001236:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001238:	f7ff fce4 	bl	8000c04 <LCD_RD_DATA>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b9a      	ldr	r3, [pc, #616]	; (80014ac <lcd_init+0x2b8>)
 8001242:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001244:	f7ff fcde 	bl	8000c04 <LCD_RD_DATA>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b97      	ldr	r3, [pc, #604]	; (80014ac <lcd_init+0x2b8>)
 800124e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001250:	4b96      	ldr	r3, [pc, #600]	; (80014ac <lcd_init+0x2b8>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b94      	ldr	r3, [pc, #592]	; (80014ac <lcd_init+0x2b8>)
 800125a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800125c:	f7ff fcd2 	bl	8000c04 <LCD_RD_DATA>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b91      	ldr	r3, [pc, #580]	; (80014ac <lcd_init+0x2b8>)
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	4313      	orrs	r3, r2
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <lcd_init+0x2b8>)
 800126e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001270:	20cf      	movs	r0, #207	; 0xcf
 8001272:	f7ff fca7 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fcb4 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800127c:	20c1      	movs	r0, #193	; 0xc1
 800127e:	f7ff fcb1 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001282:	2030      	movs	r0, #48	; 0x30
 8001284:	f7ff fcae 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001288:	20ed      	movs	r0, #237	; 0xed
 800128a:	f7ff fc9b 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f7ff fca8 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff fca5 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800129a:	2012      	movs	r0, #18
 800129c:	f7ff fca2 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80012a0:	2081      	movs	r0, #129	; 0x81
 80012a2:	f7ff fc9f 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80012a6:	20e8      	movs	r0, #232	; 0xe8
 80012a8:	f7ff fc8c 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80012ac:	2085      	movs	r0, #133	; 0x85
 80012ae:	f7ff fc99 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012b2:	2010      	movs	r0, #16
 80012b4:	f7ff fc96 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012b8:	207a      	movs	r0, #122	; 0x7a
 80012ba:	f7ff fc93 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012be:	20cb      	movs	r0, #203	; 0xcb
 80012c0:	f7ff fc80 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012c4:	2039      	movs	r0, #57	; 0x39
 80012c6:	f7ff fc8d 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012ca:	202c      	movs	r0, #44	; 0x2c
 80012cc:	f7ff fc8a 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fc87 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012d6:	2034      	movs	r0, #52	; 0x34
 80012d8:	f7ff fc84 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fc81 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012e2:	20f7      	movs	r0, #247	; 0xf7
 80012e4:	f7ff fc6e 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012e8:	2020      	movs	r0, #32
 80012ea:	f7ff fc7b 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012ee:	20ea      	movs	r0, #234	; 0xea
 80012f0:	f7ff fc68 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fc75 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fc72 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001300:	20c0      	movs	r0, #192	; 0xc0
 8001302:	f7ff fc5f 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001306:	201b      	movs	r0, #27
 8001308:	f7ff fc6c 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800130c:	20c1      	movs	r0, #193	; 0xc1
 800130e:	f7ff fc59 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fc66 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001318:	20c5      	movs	r0, #197	; 0xc5
 800131a:	f7ff fc53 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800131e:	2030      	movs	r0, #48	; 0x30
 8001320:	f7ff fc60 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001324:	2030      	movs	r0, #48	; 0x30
 8001326:	f7ff fc5d 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800132a:	20c7      	movs	r0, #199	; 0xc7
 800132c:	f7ff fc4a 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001330:	20b7      	movs	r0, #183	; 0xb7
 8001332:	f7ff fc57 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001336:	2036      	movs	r0, #54	; 0x36
 8001338:	f7ff fc44 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 800133c:	2008      	movs	r0, #8
 800133e:	f7ff fc51 	bl	8000be4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001342:	203a      	movs	r0, #58	; 0x3a
 8001344:	f7ff fc3e 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001348:	2055      	movs	r0, #85	; 0x55
 800134a:	f7ff fc4b 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800134e:	20b1      	movs	r0, #177	; 0xb1
 8001350:	f7ff fc38 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fc45 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800135a:	201a      	movs	r0, #26
 800135c:	f7ff fc42 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001360:	20b6      	movs	r0, #182	; 0xb6
 8001362:	f7ff fc2f 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff fc3c 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800136c:	20a2      	movs	r0, #162	; 0xa2
 800136e:	f7ff fc39 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001372:	20f2      	movs	r0, #242	; 0xf2
 8001374:	f7ff fc26 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fc33 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800137e:	2026      	movs	r0, #38	; 0x26
 8001380:	f7ff fc20 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fc2d 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800138a:	20e0      	movs	r0, #224	; 0xe0
 800138c:	f7ff fc1a 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001390:	200f      	movs	r0, #15
 8001392:	f7ff fc27 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001396:	202a      	movs	r0, #42	; 0x2a
 8001398:	f7ff fc24 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f7ff fc21 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013a2:	2008      	movs	r0, #8
 80013a4:	f7ff fc1e 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013a8:	200e      	movs	r0, #14
 80013aa:	f7ff fc1b 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013ae:	2008      	movs	r0, #8
 80013b0:	f7ff fc18 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80013b4:	2054      	movs	r0, #84	; 0x54
 80013b6:	f7ff fc15 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013ba:	20a9      	movs	r0, #169	; 0xa9
 80013bc:	f7ff fc12 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013c0:	2043      	movs	r0, #67	; 0x43
 80013c2:	f7ff fc0f 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f7ff fc0c 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013cc:	200f      	movs	r0, #15
 80013ce:	f7ff fc09 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fc06 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fc03 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fc00 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fbfd 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013ea:	20e1      	movs	r0, #225	; 0xe1
 80013ec:	f7ff fbea 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fbf7 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013f6:	2015      	movs	r0, #21
 80013f8:	f7ff fbf4 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013fc:	2017      	movs	r0, #23
 80013fe:	f7ff fbf1 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff fbee 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001408:	2011      	movs	r0, #17
 800140a:	f7ff fbeb 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800140e:	2006      	movs	r0, #6
 8001410:	f7ff fbe8 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001414:	202b      	movs	r0, #43	; 0x2b
 8001416:	f7ff fbe5 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800141a:	2056      	movs	r0, #86	; 0x56
 800141c:	f7ff fbe2 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001420:	203c      	movs	r0, #60	; 0x3c
 8001422:	f7ff fbdf 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001426:	2005      	movs	r0, #5
 8001428:	f7ff fbdc 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800142c:	2010      	movs	r0, #16
 800142e:	f7ff fbd9 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001432:	200f      	movs	r0, #15
 8001434:	f7ff fbd6 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001438:	203f      	movs	r0, #63	; 0x3f
 800143a:	f7ff fbd3 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800143e:	203f      	movs	r0, #63	; 0x3f
 8001440:	f7ff fbd0 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001444:	200f      	movs	r0, #15
 8001446:	f7ff fbcd 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800144a:	202b      	movs	r0, #43	; 0x2b
 800144c:	f7ff fbba 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fbc7 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fbc4 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fbc1 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001462:	203f      	movs	r0, #63	; 0x3f
 8001464:	f7ff fbbe 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001468:	202a      	movs	r0, #42	; 0x2a
 800146a:	f7ff fbab 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fbb8 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fbb5 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fbb2 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001480:	20ef      	movs	r0, #239	; 0xef
 8001482:	f7ff fbaf 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001486:	2011      	movs	r0, #17
 8001488:	f7ff fb9c 	bl	8000bc4 <LCD_WR_REG>
	HAL_Delay(120);
 800148c:	2078      	movs	r0, #120	; 0x78
 800148e:	f001 f983 	bl	8002798 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001492:	2029      	movs	r0, #41	; 0x29
 8001494:	f7ff fb96 	bl	8000bc4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <lcd_init+0x2bc>)
 80014a0:	f001 fc4c 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020800 	.word	0x40020800
 80014ac:	20000120 	.word	0x20000120
 80014b0:	40020000 	.word	0x40020000

080014b4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af04      	add	r7, sp, #16
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	461a      	mov	r2, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	81fb      	strh	r3, [r7, #14]
 80014c2:	460b      	mov	r3, r1
 80014c4:	81bb      	strh	r3, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80014d2:	e048      	b.n	8001566 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d145      	bne.n	8001566 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014da:	89fa      	ldrh	r2, [r7, #14]
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <lcd_ShowStr+0xc4>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dc3f      	bgt.n	8001570 <lcd_ShowStr+0xbc>
 80014f0:	89ba      	ldrh	r2, [r7, #12]
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <lcd_ShowStr+0xc4>)
 80014f4:	885b      	ldrh	r3, [r3, #2]
 80014f6:	4619      	mov	r1, r3
 80014f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014fc:	1acb      	subs	r3, r1, r3
 80014fe:	429a      	cmp	r2, r3
 8001500:	dc36      	bgt.n	8001570 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b80      	cmp	r3, #128	; 0x80
 8001508:	d902      	bls.n	8001510 <lcd_ShowStr+0x5c>
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
 800150e:	e02a      	b.n	8001566 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b0d      	cmp	r3, #13
 8001516:	d10b      	bne.n	8001530 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800151c:	b29a      	uxth	r2, r3
 800151e:	89bb      	ldrh	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001524:	8abb      	ldrh	r3, [r7, #20]
 8001526:	81fb      	strh	r3, [r7, #14]
					str++;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3301      	adds	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	e017      	b.n	8001560 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	88fc      	ldrh	r4, [r7, #6]
 8001536:	89b9      	ldrh	r1, [r7, #12]
 8001538:	89f8      	ldrh	r0, [r7, #14]
 800153a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	f7ff fcc4 	bl	8000ed8 <lcd_ShowChar>
					x+=sizey/2;
 8001550:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b29a      	uxth	r2, r3
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	4413      	add	r3, r2
 800155e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1b2      	bne.n	80014d4 <lcd_ShowStr+0x20>
 800156e:	e000      	b.n	8001572 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001570:	bf00      	nop
			}
		}
	}
}
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	20000120 	.word	0x20000120

0800157c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	2140      	movs	r1, #64	; 0x40
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <led7_init+0x14>)
 8001586:	f001 fbd9 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021800 	.word	0x40021800

08001594 <led7_Scan>:

void led7_Scan(){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <led7_Scan+0x104>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <led7_Scan+0x104>)
 80015a2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <led7_Scan+0x108>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <led7_Scan+0x10c>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <led7_Scan+0x104>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <led7_Scan+0x104>)
 80015be:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <led7_Scan+0x108>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d847      	bhi.n	8001658 <led7_Scan+0xc4>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <led7_Scan+0x3c>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015ff 	.word	0x080015ff
 80015d8:	0800161d 	.word	0x0800161d
 80015dc:	0800163b 	.word	0x0800163b
	case 0:
		spi_buffer |= 0x00b0;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <led7_Scan+0x104>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <led7_Scan+0x104>)
 80015ec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <led7_Scan+0x104>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <led7_Scan+0x104>)
 80015fa:	801a      	strh	r2, [r3, #0]
		break;
 80015fc:	e02d      	b.n	800165a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <led7_Scan+0x104>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <led7_Scan+0x104>)
 800160a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <led7_Scan+0x104>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	f023 0320 	bic.w	r3, r3, #32
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <led7_Scan+0x104>)
 8001618:	801a      	strh	r2, [r3, #0]
		break;
 800161a:	e01e      	b.n	800165a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <led7_Scan+0x104>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <led7_Scan+0x104>)
 8001628:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <led7_Scan+0x104>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	f023 0310 	bic.w	r3, r3, #16
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <led7_Scan+0x104>)
 8001636:	801a      	strh	r2, [r3, #0]
		break;
 8001638:	e00f      	b.n	800165a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <led7_Scan+0x104>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <led7_Scan+0x104>)
 8001646:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <led7_Scan+0x104>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <led7_Scan+0x104>)
 8001654:	801a      	strh	r2, [r3, #0]
		break;
 8001656:	e000      	b.n	800165a <led7_Scan+0xc6>
	default:
		break;
 8001658:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <led7_Scan+0x108>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	425a      	negs	r2, r3
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	bf58      	it	pl
 800166c:	4253      	negpl	r3, r2
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <led7_Scan+0x108>)
 8001670:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <led7_Scan+0x110>)
 8001678:	f001 fb60 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800167c:	2301      	movs	r3, #1
 800167e:	2202      	movs	r2, #2
 8001680:	4905      	ldr	r1, [pc, #20]	; (8001698 <led7_Scan+0x104>)
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <led7_Scan+0x114>)
 8001684:	f003 f96f 	bl	8004966 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <led7_Scan+0x110>)
 800168e:	f001 fb55 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000004 	.word	0x20000004
 800169c:	20000128 	.word	0x20000128
 80016a0:	20000000 	.word	0x20000000
 80016a4:	40021800 	.word	0x40021800
 80016a8:	20000134 	.word	0x20000134

080016ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b2:	f000 ffff 	bl	80026b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b6:	f000 fb17 	bl	8001ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ba:	f7ff f915 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016be:	f000 fd19 	bl	80020f4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80016c2:	f000 fc2b 	bl	8001f1c <MX_SPI1_Init>
  MX_FSMC_Init();
 80016c6:	f7ff f83f 	bl	8000748 <MX_FSMC_Init>
  MX_I2C1_Init();
 80016ca:	f7ff fa05 	bl	8000ad8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80016ce:	f000 fb75 	bl	8001dbc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff faf4 	bl	8000cc0 <lcd_Clear>
 updateTime();
 80016d8:	f000 fb92 	bl	8001e00 <updateTime>
 uint8_t currentMode = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	75fb      	strb	r3, [r7, #23]
 uint8_t confirmChangeTime = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	75bb      	strb	r3, [r7, #22]
 uint8_t setAlarmFlag = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	757b      	strb	r3, [r7, #21]
 uint8_t holdCounter = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	753b      	strb	r3, [r7, #20]
 enum timeElements currentEle = SEC;
 80016ec:	2300      	movs	r3, #0
 80016ee:	74fb      	strb	r3, [r7, #19]
 enum timeElements nextEle = currentEle;
 80016f0:	7cfb      	ldrb	r3, [r7, #19]
 80016f2:	74bb      	strb	r3, [r7, #18]
 char *modes[] = { "NORMAL", "MODIFY", "SCHEDULE"};
 80016f4:	4a9c      	ldr	r2, [pc, #624]	; (8001968 <main+0x2bc>)
 80016f6:	463b      	mov	r3, r7
 80016f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (1)
  {
	  while(!flag_timer2);
 80016fe:	bf00      	nop
 8001700:	4b9a      	ldr	r3, [pc, #616]	; (800196c <main+0x2c0>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0fb      	beq.n	8001700 <main+0x54>
	  flag_timer2 = 0;
 8001708:	4b98      	ldr	r3, [pc, #608]	; (800196c <main+0x2c0>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800170e:	f7fe fee5 	bl	80004dc <button_Scan>
	  ds3231_ReadTime();
 8001712:	f7fe ffb5 	bl	8000680 <ds3231_ReadTime>
	  if (button_count[0]%20 == 1 ) {
 8001716:	4b96      	ldr	r3, [pc, #600]	; (8001970 <main+0x2c4>)
 8001718:	881a      	ldrh	r2, [r3, #0]
 800171a:	4b96      	ldr	r3, [pc, #600]	; (8001974 <main+0x2c8>)
 800171c:	fba3 1302 	umull	r1, r3, r3, r2
 8001720:	0919      	lsrs	r1, r3, #4
 8001722:	460b      	mov	r3, r1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b29b      	uxth	r3, r3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10e      	bne.n	8001750 <main+0xa4>
		  currentMode = (currentMode + 1) % 3;
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4b90      	ldr	r3, [pc, #576]	; (8001978 <main+0x2cc>)
 8001738:	fb83 3102 	smull	r3, r1, r3, r2
 800173c:	17d3      	asrs	r3, r2, #31
 800173e:	1ac9      	subs	r1, r1, r3
 8001740:	460b      	mov	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	1ad1      	subs	r1, r2, r3
 8001748:	460b      	mov	r3, r1
 800174a:	75fb      	strb	r3, [r7, #23]
		  confirmChangeTime = 1;
 800174c:	2301      	movs	r3, #1
 800174e:	75bb      	strb	r3, [r7, #22]
	  }
	  if (currentMode != 0) {
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 81a0 	beq.w	8001a98 <main+0x3ec>
		  if (confirmChangeTime) {
 8001758:	7dbb      	ldrb	r3, [r7, #22]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <main+0xc2>
			  currentEle = SEC;
 800175e:	2300      	movs	r3, #0
 8001760:	74fb      	strb	r3, [r7, #19]
			  nextEle = currentEle;
 8001762:	7cfb      	ldrb	r3, [r7, #19]
 8001764:	74bb      	strb	r3, [r7, #18]
			  storeTime();
 8001766:	f000 fd37 	bl	80021d8 <storeTime>
			  confirmChangeTime = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	75bb      	strb	r3, [r7, #22]
		  }
			  if (button_count[3]%20 == 1) {
 800176e:	4b80      	ldr	r3, [pc, #512]	; (8001970 <main+0x2c4>)
 8001770:	88da      	ldrh	r2, [r3, #6]
 8001772:	4b80      	ldr	r3, [pc, #512]	; (8001974 <main+0x2c8>)
 8001774:	fba3 1302 	umull	r1, r3, r3, r2
 8001778:	0919      	lsrs	r1, r3, #4
 800177a:	460b      	mov	r3, r1
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	f040 8084 	bne.w	8001894 <main+0x1e8>
				  holdCounter = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	753b      	strb	r3, [r7, #20]
				  switch (currentEle){
 8001790:	7cfb      	ldrb	r3, [r7, #19]
 8001792:	2b06      	cmp	r3, #6
 8001794:	d87e      	bhi.n	8001894 <main+0x1e8>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <main+0xf0>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017b9 	.word	0x080017b9
 80017a0:	080017d9 	.word	0x080017d9
 80017a4:	080017f9 	.word	0x080017f9
 80017a8:	08001819 	.word	0x08001819
 80017ac:	08001839 	.word	0x08001839
 80017b0:	08001859 	.word	0x08001859
 80017b4:	08001879 	.word	0x08001879
				  case SEC:
					  timeElements[6]++;
 80017b8:	4b70      	ldr	r3, [pc, #448]	; (800197c <main+0x2d0>)
 80017ba:	899b      	ldrh	r3, [r3, #12]
 80017bc:	3301      	adds	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b6e      	ldr	r3, [pc, #440]	; (800197c <main+0x2d0>)
 80017c2:	819a      	strh	r2, [r3, #12]
					  if (timeElements[6] >= 60) {
 80017c4:	4b6d      	ldr	r3, [pc, #436]	; (800197c <main+0x2d0>)
 80017c6:	899b      	ldrh	r3, [r3, #12]
 80017c8:	2b3b      	cmp	r3, #59	; 0x3b
 80017ca:	d902      	bls.n	80017d2 <main+0x126>
						  timeElements[6] = 0;
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <main+0x2d0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	819a      	strh	r2, [r3, #12]
					  }
					  nextEle = MIN;
 80017d2:	2301      	movs	r3, #1
 80017d4:	74bb      	strb	r3, [r7, #18]
					  break;
 80017d6:	e05d      	b.n	8001894 <main+0x1e8>
				  case MIN:
					  timeElements[5]++;
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <main+0x2d0>)
 80017da:	895b      	ldrh	r3, [r3, #10]
 80017dc:	3301      	adds	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b66      	ldr	r3, [pc, #408]	; (800197c <main+0x2d0>)
 80017e2:	815a      	strh	r2, [r3, #10]
					  if (timeElements[5] >= 60) {
 80017e4:	4b65      	ldr	r3, [pc, #404]	; (800197c <main+0x2d0>)
 80017e6:	895b      	ldrh	r3, [r3, #10]
 80017e8:	2b3b      	cmp	r3, #59	; 0x3b
 80017ea:	d902      	bls.n	80017f2 <main+0x146>
						  timeElements[5] = 0;
 80017ec:	4b63      	ldr	r3, [pc, #396]	; (800197c <main+0x2d0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	815a      	strh	r2, [r3, #10]
					  }
					  nextEle = HOUR;
 80017f2:	2302      	movs	r3, #2
 80017f4:	74bb      	strb	r3, [r7, #18]
					  break;
 80017f6:	e04d      	b.n	8001894 <main+0x1e8>
				  case HOUR:
					  timeElements[4]++;
 80017f8:	4b60      	ldr	r3, [pc, #384]	; (800197c <main+0x2d0>)
 80017fa:	891b      	ldrh	r3, [r3, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b5e      	ldr	r3, [pc, #376]	; (800197c <main+0x2d0>)
 8001802:	811a      	strh	r2, [r3, #8]
					  if (timeElements[4] >= 24) {
 8001804:	4b5d      	ldr	r3, [pc, #372]	; (800197c <main+0x2d0>)
 8001806:	891b      	ldrh	r3, [r3, #8]
 8001808:	2b17      	cmp	r3, #23
 800180a:	d902      	bls.n	8001812 <main+0x166>
						  timeElements[4] = 0;
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <main+0x2d0>)
 800180e:	2200      	movs	r2, #0
 8001810:	811a      	strh	r2, [r3, #8]
					  }
					  nextEle = DAY;
 8001812:	2303      	movs	r3, #3
 8001814:	74bb      	strb	r3, [r7, #18]
					  break;
 8001816:	e03d      	b.n	8001894 <main+0x1e8>
				  case DAY:
					  timeElements[3]++;
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <main+0x2d0>)
 800181a:	88db      	ldrh	r3, [r3, #6]
 800181c:	3301      	adds	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <main+0x2d0>)
 8001822:	80da      	strh	r2, [r3, #6]
					  if (timeElements[3] >= 8) {
 8001824:	4b55      	ldr	r3, [pc, #340]	; (800197c <main+0x2d0>)
 8001826:	88db      	ldrh	r3, [r3, #6]
 8001828:	2b07      	cmp	r3, #7
 800182a:	d902      	bls.n	8001832 <main+0x186>
						  timeElements[3] = 1;
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <main+0x2d0>)
 800182e:	2201      	movs	r2, #1
 8001830:	80da      	strh	r2, [r3, #6]
					  }
					  nextEle = DATE;
 8001832:	2304      	movs	r3, #4
 8001834:	74bb      	strb	r3, [r7, #18]
					  break;
 8001836:	e02d      	b.n	8001894 <main+0x1e8>
				  case DATE:
					  timeElements[2]++;
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <main+0x2d0>)
 800183a:	889b      	ldrh	r3, [r3, #4]
 800183c:	3301      	adds	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b4e      	ldr	r3, [pc, #312]	; (800197c <main+0x2d0>)
 8001842:	809a      	strh	r2, [r3, #4]
					  if (timeElements[2] >= 32) {
 8001844:	4b4d      	ldr	r3, [pc, #308]	; (800197c <main+0x2d0>)
 8001846:	889b      	ldrh	r3, [r3, #4]
 8001848:	2b1f      	cmp	r3, #31
 800184a:	d902      	bls.n	8001852 <main+0x1a6>
						  timeElements[2] = 1;
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <main+0x2d0>)
 800184e:	2201      	movs	r2, #1
 8001850:	809a      	strh	r2, [r3, #4]
					  }
					  nextEle = MONTH;
 8001852:	2305      	movs	r3, #5
 8001854:	74bb      	strb	r3, [r7, #18]
					  break;
 8001856:	e01d      	b.n	8001894 <main+0x1e8>
				  case MONTH:
					  timeElements[1]++;
 8001858:	4b48      	ldr	r3, [pc, #288]	; (800197c <main+0x2d0>)
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	3301      	adds	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <main+0x2d0>)
 8001862:	805a      	strh	r2, [r3, #2]
					  if (timeElements[1] >= 13) {
 8001864:	4b45      	ldr	r3, [pc, #276]	; (800197c <main+0x2d0>)
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	2b0c      	cmp	r3, #12
 800186a:	d902      	bls.n	8001872 <main+0x1c6>
						  timeElements[1] = 1;
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <main+0x2d0>)
 800186e:	2201      	movs	r2, #1
 8001870:	805a      	strh	r2, [r3, #2]
					  }
					  nextEle = YEAR;
 8001872:	2306      	movs	r3, #6
 8001874:	74bb      	strb	r3, [r7, #18]
					  break;
 8001876:	e00d      	b.n	8001894 <main+0x1e8>
				  case YEAR:
					  timeElements[0]++;
 8001878:	4b40      	ldr	r3, [pc, #256]	; (800197c <main+0x2d0>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b3e      	ldr	r3, [pc, #248]	; (800197c <main+0x2d0>)
 8001882:	801a      	strh	r2, [r3, #0]
					  if (timeElements[0] >= 100) {
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <main+0x2d0>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	2b63      	cmp	r3, #99	; 0x63
 800188a:	d902      	bls.n	8001892 <main+0x1e6>
						  timeElements[0] = 1;
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <main+0x2d0>)
 800188e:	2201      	movs	r2, #1
 8001890:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 8001892:	bf00      	nop
				  }

			  }
			  if (button_count[3] >= 40) { // Long press behavior
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <main+0x2c4>)
 8001896:	88db      	ldrh	r3, [r3, #6]
 8001898:	2b27      	cmp	r3, #39	; 0x27
 800189a:	f240 809a 	bls.w	80019d2 <main+0x326>
				  holdCounter++;
 800189e:	7d3b      	ldrb	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	753b      	strb	r3, [r7, #20]
				  if (holdCounter >= 4) { // 4 * 50ms = 200ms
 80018a4:	7d3b      	ldrb	r3, [r7, #20]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	f240 8093 	bls.w	80019d2 <main+0x326>
					  holdCounter = 0; // Reset hold counter
 80018ac:	2300      	movs	r3, #0
 80018ae:	753b      	strb	r3, [r7, #20]
					  switch (currentEle) {
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	f200 808d 	bhi.w	80019d2 <main+0x326>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <main+0x214>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	080018dd 	.word	0x080018dd
 80018c4:	080018f9 	.word	0x080018f9
 80018c8:	08001915 	.word	0x08001915
 80018cc:	08001931 	.word	0x08001931
 80018d0:	0800194d 	.word	0x0800194d
 80018d4:	08001981 	.word	0x08001981
 80018d8:	0800199d 	.word	0x0800199d
						  case SEC:
							  timeElements[6]++;
 80018dc:	4b27      	ldr	r3, [pc, #156]	; (800197c <main+0x2d0>)
 80018de:	899b      	ldrh	r3, [r3, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <main+0x2d0>)
 80018e6:	819a      	strh	r2, [r3, #12]
							  if (timeElements[6] >= 60) timeElements[6] = 0;
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <main+0x2d0>)
 80018ea:	899b      	ldrh	r3, [r3, #12]
 80018ec:	2b3b      	cmp	r3, #59	; 0x3b
 80018ee:	d963      	bls.n	80019b8 <main+0x30c>
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <main+0x2d0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	819a      	strh	r2, [r3, #12]
							  break;
 80018f6:	e05f      	b.n	80019b8 <main+0x30c>
						  case MIN:
							  timeElements[5]++;
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <main+0x2d0>)
 80018fa:	895b      	ldrh	r3, [r3, #10]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <main+0x2d0>)
 8001902:	815a      	strh	r2, [r3, #10]
							  if (timeElements[5] >= 60) timeElements[5] = 0;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <main+0x2d0>)
 8001906:	895b      	ldrh	r3, [r3, #10]
 8001908:	2b3b      	cmp	r3, #59	; 0x3b
 800190a:	d957      	bls.n	80019bc <main+0x310>
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <main+0x2d0>)
 800190e:	2200      	movs	r2, #0
 8001910:	815a      	strh	r2, [r3, #10]
							  break;
 8001912:	e053      	b.n	80019bc <main+0x310>
						  case HOUR:
							  timeElements[4]++;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <main+0x2d0>)
 8001916:	891b      	ldrh	r3, [r3, #8]
 8001918:	3301      	adds	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <main+0x2d0>)
 800191e:	811a      	strh	r2, [r3, #8]
							  if (timeElements[4] >= 24) timeElements[4] = 0;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <main+0x2d0>)
 8001922:	891b      	ldrh	r3, [r3, #8]
 8001924:	2b17      	cmp	r3, #23
 8001926:	d94b      	bls.n	80019c0 <main+0x314>
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <main+0x2d0>)
 800192a:	2200      	movs	r2, #0
 800192c:	811a      	strh	r2, [r3, #8]
							  break;
 800192e:	e047      	b.n	80019c0 <main+0x314>
						  case DAY:
							  timeElements[3]++;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <main+0x2d0>)
 8001932:	88db      	ldrh	r3, [r3, #6]
 8001934:	3301      	adds	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <main+0x2d0>)
 800193a:	80da      	strh	r2, [r3, #6]
							  if (timeElements[3] >= 8) timeElements[3] = 1;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <main+0x2d0>)
 800193e:	88db      	ldrh	r3, [r3, #6]
 8001940:	2b07      	cmp	r3, #7
 8001942:	d93f      	bls.n	80019c4 <main+0x318>
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <main+0x2d0>)
 8001946:	2201      	movs	r2, #1
 8001948:	80da      	strh	r2, [r3, #6]
							  break;
 800194a:	e03b      	b.n	80019c4 <main+0x318>
						  case DATE:
							  timeElements[2]++;
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <main+0x2d0>)
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	3301      	adds	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <main+0x2d0>)
 8001956:	809a      	strh	r2, [r3, #4]
							  if (timeElements[2] >= 32) timeElements[2] = 1;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <main+0x2d0>)
 800195a:	889b      	ldrh	r3, [r3, #4]
 800195c:	2b1f      	cmp	r3, #31
 800195e:	d933      	bls.n	80019c8 <main+0x31c>
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <main+0x2d0>)
 8001962:	2201      	movs	r2, #1
 8001964:	809a      	strh	r2, [r3, #4]
							  break;
 8001966:	e02f      	b.n	80019c8 <main+0x31c>
 8001968:	08005fc8 	.word	0x08005fc8
 800196c:	2000012c 	.word	0x2000012c
 8001970:	20000044 	.word	0x20000044
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	55555556 	.word	0x55555556
 800197c:	20000010 	.word	0x20000010
						  case MONTH:
							  timeElements[1]++;
 8001980:	4b96      	ldr	r3, [pc, #600]	; (8001bdc <main+0x530>)
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	3301      	adds	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b94      	ldr	r3, [pc, #592]	; (8001bdc <main+0x530>)
 800198a:	805a      	strh	r2, [r3, #2]
							  if (timeElements[1] >= 13) timeElements[1] = 1;
 800198c:	4b93      	ldr	r3, [pc, #588]	; (8001bdc <main+0x530>)
 800198e:	885b      	ldrh	r3, [r3, #2]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	d91b      	bls.n	80019cc <main+0x320>
 8001994:	4b91      	ldr	r3, [pc, #580]	; (8001bdc <main+0x530>)
 8001996:	2201      	movs	r2, #1
 8001998:	805a      	strh	r2, [r3, #2]
							  break;
 800199a:	e017      	b.n	80019cc <main+0x320>
						  case YEAR:
							  timeElements[0]++;
 800199c:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <main+0x530>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b8d      	ldr	r3, [pc, #564]	; (8001bdc <main+0x530>)
 80019a6:	801a      	strh	r2, [r3, #0]
							  if (timeElements[0] >= 100) timeElements[0] = 1;
 80019a8:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <main+0x530>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b63      	cmp	r3, #99	; 0x63
 80019ae:	d90f      	bls.n	80019d0 <main+0x324>
 80019b0:	4b8a      	ldr	r3, [pc, #552]	; (8001bdc <main+0x530>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	801a      	strh	r2, [r3, #0]
							  break;
 80019b6:	e00b      	b.n	80019d0 <main+0x324>
							  break;
 80019b8:	bf00      	nop
 80019ba:	e00a      	b.n	80019d2 <main+0x326>
							  break;
 80019bc:	bf00      	nop
 80019be:	e008      	b.n	80019d2 <main+0x326>
							  break;
 80019c0:	bf00      	nop
 80019c2:	e006      	b.n	80019d2 <main+0x326>
							  break;
 80019c4:	bf00      	nop
 80019c6:	e004      	b.n	80019d2 <main+0x326>
							  break;
 80019c8:	bf00      	nop
 80019ca:	e002      	b.n	80019d2 <main+0x326>
							  break;
 80019cc:	bf00      	nop
 80019ce:	e000      	b.n	80019d2 <main+0x326>
							  break;
 80019d0:	bf00      	nop
					  }
				  }
			  }
			  if (button_count[12]%20 == 1) {
 80019d2:	4b83      	ldr	r3, [pc, #524]	; (8001be0 <main+0x534>)
 80019d4:	8b1a      	ldrh	r2, [r3, #24]
 80019d6:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <main+0x538>)
 80019d8:	fba3 1302 	umull	r1, r3, r3, r2
 80019dc:	0919      	lsrs	r1, r3, #4
 80019de:	460b      	mov	r3, r1
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d14f      	bne.n	8001a8e <main+0x3e2>
				  if (currentMode != 2) {
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d001      	beq.n	80019f8 <main+0x34c>
					  updateTime();
 80019f4:	f000 fa04 	bl	8001e00 <updateTime>
				  }
				  if (nextEle == currentEle && currentEle != YEAR) {
 80019f8:	7cba      	ldrb	r2, [r7, #18]
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d127      	bne.n	8001a50 <main+0x3a4>
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d024      	beq.n	8001a50 <main+0x3a4>
					  switch(currentEle) {
 8001a06:	7cfb      	ldrb	r3, [r7, #19]
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d821      	bhi.n	8001a50 <main+0x3a4>
 8001a0c:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <main+0x368>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a2d 	.word	0x08001a2d
 8001a18:	08001a33 	.word	0x08001a33
 8001a1c:	08001a39 	.word	0x08001a39
 8001a20:	08001a3f 	.word	0x08001a3f
 8001a24:	08001a45 	.word	0x08001a45
 8001a28:	08001a4b 	.word	0x08001a4b
					  case SEC:
						  nextEle = MIN;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	74bb      	strb	r3, [r7, #18]
						  break;
 8001a30:	e00e      	b.n	8001a50 <main+0x3a4>
					  case MIN:
						  nextEle = HOUR;
 8001a32:	2302      	movs	r3, #2
 8001a34:	74bb      	strb	r3, [r7, #18]
						  break;
 8001a36:	e00b      	b.n	8001a50 <main+0x3a4>
					  case HOUR:
						  nextEle = DAY;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	74bb      	strb	r3, [r7, #18]
						  break;
 8001a3c:	e008      	b.n	8001a50 <main+0x3a4>
					  case DAY:
						  nextEle = DATE;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	74bb      	strb	r3, [r7, #18]
						  break;
 8001a42:	e005      	b.n	8001a50 <main+0x3a4>
					  case DATE:
						  nextEle = MONTH;
 8001a44:	2305      	movs	r3, #5
 8001a46:	74bb      	strb	r3, [r7, #18]
						  break;
 8001a48:	e002      	b.n	8001a50 <main+0x3a4>
					  case MONTH:
						  nextEle = YEAR;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	74bb      	strb	r3, [r7, #18]
						  break;
 8001a4e:	bf00      	nop

					  }
				  }

				  if (currentEle == YEAR) {
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d119      	bne.n	8001a8a <main+0x3de>
					  if (currentMode == 2) {
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d112      	bne.n	8001a82 <main+0x3d6>
						  setAlarmFlag = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	757b      	strb	r3, [r7, #21]
						  for (int i = 0; i < 7; i++){
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e00a      	b.n	8001a7c <main+0x3d0>
							  scheduleElements[i] = timeElements[i];
 8001a66:	4a5d      	ldr	r2, [pc, #372]	; (8001bdc <main+0x530>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a6e:	4a5e      	ldr	r2, [pc, #376]	; (8001be8 <main+0x53c>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						  for (int i = 0; i < 7; i++){
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	ddf1      	ble.n	8001a66 <main+0x3ba>
						  }
					  }
					  confirmChangeTime = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75bb      	strb	r3, [r7, #22]
					  currentMode = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]

				  }
				  currentEle = nextEle;
 8001a8a:	7cbb      	ldrb	r3, [r7, #18]
 8001a8c:	74fb      	strb	r3, [r7, #19]


			  }

			  timeEdit(currentEle);
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fc2f 	bl	80022f4 <timeEdit>
 8001a96:	e001      	b.n	8001a9c <main+0x3f0>

	  } else displayTime();
 8001a98:	f000 fd26 	bl	80024e8 <displayTime>

	  lcd_ShowStr(30, 50, modes[currentMode], WHITE, RED, 24,0);
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	443b      	add	r3, r7
 8001aa4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9302      	str	r3, [sp, #8]
 8001aac:	2318      	movs	r3, #24
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aba:	2132      	movs	r1, #50	; 0x32
 8001abc:	201e      	movs	r0, #30
 8001abe:	f7ff fcf9 	bl	80014b4 <lcd_ShowStr>
	  if (setAlarmFlag) {
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f43f ae1a 	beq.w	80016fe <main+0x52>
		  lcd_ShowStr(30, 185, "alarm at" , WHITE, RED, 24,0);
 8001aca:	2300      	movs	r3, #0
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2318      	movs	r3, #24
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001adc:	4a43      	ldr	r2, [pc, #268]	; (8001bec <main+0x540>)
 8001ade:	21b9      	movs	r1, #185	; 0xb9
 8001ae0:	201e      	movs	r0, #30
 8001ae2:	f7ff fce7 	bl	80014b4 <lcd_ShowStr>
		  lcd_ShowIntNum(130, 185, 2000 + scheduleElements[0], 2, GREEN, BLACK, 24);
 8001ae6:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <main+0x53c>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2318      	movs	r3, #24
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2302      	movs	r3, #2
 8001b00:	21b9      	movs	r1, #185	; 0xb9
 8001b02:	2082      	movs	r0, #130	; 0x82
 8001b04:	f7ff fad4 	bl	80010b0 <lcd_ShowIntNum>
		  lcd_ShowStr(160, 185, "year" , WHITE, RED, 24,0);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <main+0x544>)
 8001b1c:	21b9      	movs	r1, #185	; 0xb9
 8001b1e:	20a0      	movs	r0, #160	; 0xa0
 8001b20:	f7ff fcc8 	bl	80014b4 <lcd_ShowStr>
		  lcd_ShowIntNum(130, 210, scheduleElements[1], 2, GREEN, BLACK, 24);
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <main+0x53c>)
 8001b26:	885a      	ldrh	r2, [r3, #2]
 8001b28:	2318      	movs	r3, #24
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2302      	movs	r3, #2
 8001b38:	21d2      	movs	r1, #210	; 0xd2
 8001b3a:	2082      	movs	r0, #130	; 0x82
 8001b3c:	f7ff fab8 	bl	80010b0 <lcd_ShowIntNum>
		  lcd_ShowStr(160, 210, "month" , WHITE, RED, 24,0);
 8001b40:	2300      	movs	r3, #0
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	2318      	movs	r3, #24
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b52:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <main+0x548>)
 8001b54:	21d2      	movs	r1, #210	; 0xd2
 8001b56:	20a0      	movs	r0, #160	; 0xa0
 8001b58:	f7ff fcac 	bl	80014b4 <lcd_ShowStr>
		  lcd_ShowIntNum(130, 235, scheduleElements[2], 2, GREEN, BLACK, 24);
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <main+0x53c>)
 8001b5e:	889a      	ldrh	r2, [r3, #4]
 8001b60:	2318      	movs	r3, #24
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2302      	movs	r3, #2
 8001b70:	21eb      	movs	r1, #235	; 0xeb
 8001b72:	2082      	movs	r0, #130	; 0x82
 8001b74:	f7ff fa9c 	bl	80010b0 <lcd_ShowIntNum>
		  lcd_ShowStr(160, 235, "date" , WHITE, RED, 24,0);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2318      	movs	r3, #24
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <main+0x54c>)
 8001b8c:	21eb      	movs	r1, #235	; 0xeb
 8001b8e:	20a0      	movs	r0, #160	; 0xa0
 8001b90:	f7ff fc90 	bl	80014b4 <lcd_ShowStr>
		  lcd_ShowStr(160, 260, (scheduleElements[3] == 1) ? "MONDAY"
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <main+0x53c>)
 8001b96:	88db      	ldrh	r3, [r3, #6]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d03b      	beq.n	8001c14 <main+0x568>
				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <main+0x53c>)
 8001b9e:	88db      	ldrh	r3, [r3, #6]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d019      	beq.n	8001bd8 <main+0x52c>
						  : (scheduleElements[3] == 3) ? "WEDNESDAY"
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <main+0x53c>)
 8001ba6:	88db      	ldrh	r3, [r3, #6]
				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d013      	beq.n	8001bd4 <main+0x528>
						  :(scheduleElements[3] == 4) ? "THURSDAY"
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <main+0x53c>)
 8001bae:	88db      	ldrh	r3, [r3, #6]
				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d00d      	beq.n	8001bd0 <main+0x524>
						  : (scheduleElements[3] == 5) ? "FRIDAY"
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <main+0x53c>)
 8001bb6:	88db      	ldrh	r3, [r3, #6]
				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d007      	beq.n	8001bcc <main+0x520>
						  :(scheduleElements[3] == 6) ? "SATURDAY"
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <main+0x53c>)
 8001bbe:	88db      	ldrh	r3, [r3, #6]
				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d101      	bne.n	8001bc8 <main+0x51c>
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <main+0x550>)
 8001bc6:	e026      	b.n	8001c16 <main+0x56a>
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <main+0x554>)
 8001bca:	e024      	b.n	8001c16 <main+0x56a>
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <main+0x558>)
 8001bce:	e022      	b.n	8001c16 <main+0x56a>
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <main+0x55c>)
 8001bd2:	e020      	b.n	8001c16 <main+0x56a>
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <main+0x560>)
 8001bd6:	e01e      	b.n	8001c16 <main+0x56a>
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <main+0x564>)
 8001bda:	e01c      	b.n	8001c16 <main+0x56a>
 8001bdc:	20000010 	.word	0x20000010
 8001be0:	20000044 	.word	0x20000044
 8001be4:	cccccccd 	.word	0xcccccccd
 8001be8:	200001d8 	.word	0x200001d8
 8001bec:	08005f40 	.word	0x08005f40
 8001bf0:	08005f4c 	.word	0x08005f4c
 8001bf4:	08005f54 	.word	0x08005f54
 8001bf8:	08005f5c 	.word	0x08005f5c
 8001bfc:	08005f64 	.word	0x08005f64
 8001c00:	08005f70 	.word	0x08005f70
 8001c04:	08005f78 	.word	0x08005f78
 8001c08:	08005f80 	.word	0x08005f80
 8001c0c:	08005f8c 	.word	0x08005f8c
 8001c10:	08005f98 	.word	0x08005f98
		  lcd_ShowStr(160, 260, (scheduleElements[3] == 1) ? "MONDAY"
 8001c14:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <main+0x630>)
 8001c16:	2300      	movs	r3, #0
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	2318      	movs	r3, #24
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001c2c:	20a0      	movs	r0, #160	; 0xa0
 8001c2e:	f7ff fc41 	bl	80014b4 <lcd_ShowStr>
						  : "SUNDAY", WHITE, RED, 24,0);
		  lcd_ShowIntNum(20, 260, scheduleElements[4], 2, GREEN, BLACK, 24);
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <main+0x634>)
 8001c34:	891a      	ldrh	r2, [r3, #8]
 8001c36:	2318      	movs	r3, #24
 8001c38:	9302      	str	r3, [sp, #8]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2302      	movs	r3, #2
 8001c46:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001c4a:	2014      	movs	r0, #20
 8001c4c:	f7ff fa30 	bl	80010b0 <lcd_ShowIntNum>
		  lcd_ShowStr(50, 260, ":" , WHITE, RED, 24,0);
 8001c50:	2300      	movs	r3, #0
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2318      	movs	r3, #24
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c62:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <main+0x638>)
 8001c64:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001c68:	2032      	movs	r0, #50	; 0x32
 8001c6a:	f7ff fc23 	bl	80014b4 <lcd_ShowStr>
		  lcd_ShowIntNum(65, 260, scheduleElements[5], 2, GREEN, BLACK, 24);
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <main+0x634>)
 8001c70:	895a      	ldrh	r2, [r3, #10]
 8001c72:	2318      	movs	r3, #24
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2302      	movs	r3, #2
 8001c82:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001c86:	2041      	movs	r0, #65	; 0x41
 8001c88:	f7ff fa12 	bl	80010b0 <lcd_ShowIntNum>
		  lcd_ShowStr(100, 260, ":" , WHITE, RED, 24,0);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	2318      	movs	r3, #24
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9e:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <main+0x638>)
 8001ca0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001ca4:	2064      	movs	r0, #100	; 0x64
 8001ca6:	f7ff fc05 	bl	80014b4 <lcd_ShowStr>
		  lcd_ShowIntNum(110, 260, scheduleElements[6], 2, GREEN, BLACK, 24);
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <main+0x634>)
 8001cac:	899a      	ldrh	r2, [r3, #12]
 8001cae:	2318      	movs	r3, #24
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001cc2:	206e      	movs	r0, #110	; 0x6e
 8001cc4:	f7ff f9f4 	bl	80010b0 <lcd_ShowIntNum>
		  if (checkAlarm()) setAlarmFlag = 0;
 8001cc8:	f000 fac0 	bl	800224c <checkAlarm>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f43f ad15 	beq.w	80016fe <main+0x52>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	757b      	strb	r3, [r7, #21]
	  while(!flag_timer2);
 8001cd8:	e511      	b.n	80016fe <main+0x52>
 8001cda:	bf00      	nop
 8001cdc:	08005fa0 	.word	0x08005fa0
 8001ce0:	200001d8 	.word	0x200001d8
 8001ce4:	08005fa8 	.word	0x08005fa8

08001ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b094      	sub	sp, #80	; 0x50
 8001cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cee:	f107 0320 	add.w	r3, r7, #32
 8001cf2:	2230      	movs	r2, #48	; 0x30
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 f8ea 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <SystemClock_Config+0xd0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a21      	ldr	r2, [pc, #132]	; (8001db8 <SystemClock_Config+0xd0>)
 8001d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <SystemClock_Config+0xd0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d44:	2302      	movs	r3, #2
 8001d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d50:	2302      	movs	r3, #2
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d54:	2300      	movs	r3, #0
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d58:	2308      	movs	r3, #8
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d5c:	23a8      	movs	r3, #168	; 0xa8
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d64:	2304      	movs	r3, #4
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 f8ed 	bl	8003f4c <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d78:	f000 f87a 	bl	8001e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2105      	movs	r1, #5
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fb4e 	bl	800443c <HAL_RCC_ClockConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001da6:	f000 f863 	bl	8001e70 <Error_Handler>
  }
}
 8001daa:	bf00      	nop
 8001dac:	3750      	adds	r7, #80	; 0x50
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40007000 	.word	0x40007000

08001dbc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <system_init+0x40>)
 8001dc6:	f000 ffb9 	bl	8002d3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2140      	movs	r1, #64	; 0x40
 8001dce:	480b      	ldr	r0, [pc, #44]	; (8001dfc <system_init+0x40>)
 8001dd0:	f000 ffb4 	bl	8002d3c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <system_init+0x40>)
 8001dda:	f000 ffaf 	bl	8002d3c <HAL_GPIO_WritePin>
	  timer_init();
 8001dde:	f000 f84d 	bl	8001e7c <timer_init>
	  led7_init();
 8001de2:	f7ff fbcb 	bl	800157c <led7_init>
	  button_init();
 8001de6:	f7fe fb6d 	bl	80004c4 <button_init>
	  lcd_init();
 8001dea:	f7ff fa03 	bl	80011f4 <lcd_init>
	  ds3231_init();
 8001dee:	f7fe fbe1 	bl	80005b4 <ds3231_init>
	  setTimer2(50);
 8001df2:	2032      	movs	r0, #50	; 0x32
 8001df4:	f000 f84c 	bl	8001e90 <setTimer2>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000

08001e00 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, timeElements[0]);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <updateTime+0x6c>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	2006      	movs	r0, #6
 8001e0e:	f7fe fc15 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, timeElements[1]);
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <updateTime+0x6c>)
 8001e14:	885b      	ldrh	r3, [r3, #2]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4619      	mov	r1, r3
 8001e1a:	2005      	movs	r0, #5
 8001e1c:	f7fe fc0e 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, timeElements[2]);
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <updateTime+0x6c>)
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	4619      	mov	r1, r3
 8001e28:	2004      	movs	r0, #4
 8001e2a:	f7fe fc07 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, timeElements[3]);
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <updateTime+0x6c>)
 8001e30:	88db      	ldrh	r3, [r3, #6]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	2003      	movs	r0, #3
 8001e38:	f7fe fc00 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, timeElements[4]);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <updateTime+0x6c>)
 8001e3e:	891b      	ldrh	r3, [r3, #8]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4619      	mov	r1, r3
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7fe fbf9 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, timeElements[5]);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <updateTime+0x6c>)
 8001e4c:	895b      	ldrh	r3, [r3, #10]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7fe fbf2 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, timeElements[6]);
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <updateTime+0x6c>)
 8001e5a:	899b      	ldrh	r3, [r3, #12]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe fbeb 	bl	800063c <ds3231_Write>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000010 	.word	0x20000010

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <timer_init+0x10>)
 8001e82:	f003 fb23 	bl	80054cc <HAL_TIM_Base_Start_IT>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000018c 	.word	0x2000018c

08001e90 <setTimer2>:

void setTimer2(uint16_t duration){
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <setTimer2+0x2c>)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <setTimer2+0x2c>)
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <setTimer2+0x30>)
 8001ea6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <setTimer2+0x34>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	801a      	strh	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000130 	.word	0x20000130
 8001ec0:	2000012e 	.word	0x2000012e
 8001ec4:	2000012c 	.word	0x2000012c

08001ec8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed8:	d116      	bne.n	8001f08 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001f02:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001f04:	f7ff fb46 	bl	8001594 <led7_Scan>
	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000012e 	.word	0x2000012e
 8001f14:	2000012c 	.word	0x2000012c
 8001f18:	20000130 	.word	0x20000130

08001f1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <MX_SPI1_Init+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f68:	220a      	movs	r2, #10
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_SPI1_Init+0x64>)
 8001f6e:	f002 fc71 	bl	8004854 <HAL_SPI_Init>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f78:	f7ff ff7a 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000134 	.word	0x20000134
 8001f84:	40013000 	.word	0x40013000

08001f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_SPI_MspInit+0x84>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d12b      	bne.n	8002002 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_SPI_MspInit+0x88>)
 8001fb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_SPI_MspInit+0x88>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_SPI_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_SPI_MspInit+0x88>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_SPI_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fe2:	2338      	movs	r3, #56	; 0x38
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <HAL_SPI_MspInit+0x8c>)
 8001ffe:	f000 fd01 	bl	8002a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40013000 	.word	0x40013000
 8002010:	40023800 	.word	0x40023800
 8002014:	40020400 	.word	0x40020400

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_MspInit+0x4c>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <HAL_MspInit+0x4c>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_MspInit+0x4c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f000 fb50 	bl	8002758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM2_IRQHandler+0x10>)
 80020c2:	f003 fa73 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000018c 	.word	0x2000018c

080020d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <SystemInit+0x20>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <SystemInit+0x20>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002108:	463b      	mov	r3, r7
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_TIM2_Init+0x94>)
 8002112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_TIM2_Init+0x94>)
 800211a:	f240 3247 	movw	r2, #839	; 0x347
 800211e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <MX_TIM2_Init+0x94>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_TIM2_Init+0x94>)
 8002128:	2263      	movs	r2, #99	; 0x63
 800212a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_TIM2_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <MX_TIM2_Init+0x94>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_TIM2_Init+0x94>)
 800213a:	f003 f977 	bl	800542c <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002144:	f7ff fe94 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <MX_TIM2_Init+0x94>)
 8002156:	f003 fb31 	bl	80057bc <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002160:	f7ff fe86 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_TIM2_Init+0x94>)
 8002172:	f003 fd4d 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800217c:	f7ff fe78 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000018c 	.word	0x2000018c

0800218c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d115      	bne.n	80021ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_TIM_Base_MspInit+0x48>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	201c      	movs	r0, #28
 80021c0:	f000 fbe9 	bl	8002996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c4:	201c      	movs	r0, #28
 80021c6:	f000 fc02 	bl	80029ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <storeTime>:
uint8_t alarm = 0;
uint8_t count_LED_debug = 0;
uint16_t timeElements[]= {23,8,23,5,5,15,43}; //year,month,date,day,hour,min,sec
uint16_t scheduleElements[]= {0,0,0,0,0,0,0}; //year,month,date,day,hour,min,sec

void storeTime() {
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	timeElements[0] = ds3231_year;
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <storeTime+0x54>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <storeTime+0x58>)
 80021e4:	801a      	strh	r2, [r3, #0]
	timeElements[1] = ds3231_month;
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <storeTime+0x5c>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b10      	ldr	r3, [pc, #64]	; (8002230 <storeTime+0x58>)
 80021ee:	805a      	strh	r2, [r3, #2]
	timeElements[2] = ds3231_date;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <storeTime+0x60>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <storeTime+0x58>)
 80021f8:	809a      	strh	r2, [r3, #4]
	timeElements[3] = ds3231_day;
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <storeTime+0x64>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <storeTime+0x58>)
 8002202:	80da      	strh	r2, [r3, #6]
	timeElements[4] = ds3231_hours;
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <storeTime+0x68>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <storeTime+0x58>)
 800220c:	811a      	strh	r2, [r3, #8]
	timeElements[5] = ds3231_min;
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <storeTime+0x6c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <storeTime+0x58>)
 8002216:	815a      	strh	r2, [r3, #10]
	timeElements[6] = ds3231_sec;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <storeTime+0x70>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b29a      	uxth	r2, r3
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <storeTime+0x58>)
 8002220:	819a      	strh	r2, [r3, #12]
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000075 	.word	0x20000075
 8002230:	20000010 	.word	0x20000010
 8002234:	20000074 	.word	0x20000074
 8002238:	20000072 	.word	0x20000072
 800223c:	20000073 	.word	0x20000073
 8002240:	2000006f 	.word	0x2000006f
 8002244:	20000070 	.word	0x20000070
 8002248:	20000071 	.word	0x20000071

0800224c <checkAlarm>:
uint8_t checkAlarm() {
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af02      	add	r7, sp, #8
	if (scheduleElements[6] == ds3231_sec && scheduleElements[5] == ds3231_min
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <checkAlarm+0x88>)
 8002254:	899a      	ldrh	r2, [r3, #12]
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <checkAlarm+0x8c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	429a      	cmp	r2, r3
 800225e:	d134      	bne.n	80022ca <checkAlarm+0x7e>
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <checkAlarm+0x88>)
 8002262:	895a      	ldrh	r2, [r3, #10]
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <checkAlarm+0x90>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	429a      	cmp	r2, r3
 800226c:	d12d      	bne.n	80022ca <checkAlarm+0x7e>
		&& scheduleElements[4] == ds3231_hours && scheduleElements[3] == ds3231_day
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <checkAlarm+0x88>)
 8002270:	891a      	ldrh	r2, [r3, #8]
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <checkAlarm+0x94>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	429a      	cmp	r2, r3
 800227a:	d126      	bne.n	80022ca <checkAlarm+0x7e>
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <checkAlarm+0x88>)
 800227e:	88da      	ldrh	r2, [r3, #6]
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <checkAlarm+0x98>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	429a      	cmp	r2, r3
 8002288:	d11f      	bne.n	80022ca <checkAlarm+0x7e>
		&& scheduleElements[2] == ds3231_date && scheduleElements[1] == ds3231_month
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <checkAlarm+0x88>)
 800228c:	889a      	ldrh	r2, [r3, #4]
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <checkAlarm+0x9c>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	429a      	cmp	r2, r3
 8002296:	d118      	bne.n	80022ca <checkAlarm+0x7e>
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <checkAlarm+0x88>)
 800229a:	885a      	ldrh	r2, [r3, #2]
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <checkAlarm+0xa0>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d111      	bne.n	80022ca <checkAlarm+0x7e>
		&& scheduleElements[0]== ds3231_year){
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <checkAlarm+0x88>)
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <checkAlarm+0xa4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10a      	bne.n	80022ca <checkAlarm+0x7e>
		lcd_DrawRectangle(0, 0, 240, 30, RED);
 80022b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	231e      	movs	r3, #30
 80022bc:	22f0      	movs	r2, #240	; 0xf0
 80022be:	2100      	movs	r1, #0
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fdd2 	bl	8000e6a <lcd_DrawRectangle>
		return 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <checkAlarm+0x80>
	}
	return 0;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001d8 	.word	0x200001d8
 80022d8:	20000071 	.word	0x20000071
 80022dc:	20000070 	.word	0x20000070
 80022e0:	2000006f 	.word	0x2000006f
 80022e4:	20000073 	.word	0x20000073
 80022e8:	20000072 	.word	0x20000072
 80022ec:	20000074 	.word	0x20000074
 80022f0:	20000075 	.word	0x20000075

080022f4 <timeEdit>:
void timeEdit(enum timeElements currentElement) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
	currentEle = currentElement;
 80022fe:	4a74      	ldr	r2, [pc, #464]	; (80024d0 <timeEdit+0x1dc>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	7013      	strb	r3, [r2, #0]
	count_LED_debug = (count_LED_debug + 1)%10;
 8002304:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <timeEdit+0x1e0>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <timeEdit+0x1e4>)
 800230c:	fb83 1302 	smull	r1, r3, r3, r2
 8002310:	1099      	asrs	r1, r3, #2
 8002312:	17d3      	asrs	r3, r2, #31
 8002314:	1ac9      	subs	r1, r1, r3
 8002316:	460b      	mov	r3, r1
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	1ad1      	subs	r1, r2, r3
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <timeEdit+0x1e0>)
 8002324:	701a      	strb	r2, [r3, #0]
	if (count_LED_debug == 0) {
 8002326:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <timeEdit+0x1e0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80cb 	bne.w	80024c6 <timeEdit+0x1d2>

		if (currentMode != NORMAL) {
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <timeEdit+0x1e8>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <timeEdit+0x58>
			changeMode = !changeMode;
 8002338:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <timeEdit+0x1ec>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <timeEdit+0x1ec>)
 800234a:	701a      	strb	r2, [r3, #0]
		}
		lcd_ShowIntNum(70, 100, timeElements[4], 2, (currentEle == HOUR) ? (changeMode ? GREEN : BLACK) : GREEN, BLACK, 24);
 800234c:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <timeEdit+0x1f0>)
 800234e:	891a      	ldrh	r2, [r3, #8]
 8002350:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <timeEdit+0x1dc>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d108      	bne.n	800236a <timeEdit+0x76>
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <timeEdit+0x1ec>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <timeEdit+0x72>
 8002360:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002364:	e003      	b.n	800236e <timeEdit+0x7a>
 8002366:	2300      	movs	r3, #0
 8002368:	e001      	b.n	800236e <timeEdit+0x7a>
 800236a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800236e:	2118      	movs	r1, #24
 8002370:	9102      	str	r1, [sp, #8]
 8002372:	2100      	movs	r1, #0
 8002374:	9101      	str	r1, [sp, #4]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2302      	movs	r3, #2
 800237a:	2164      	movs	r1, #100	; 0x64
 800237c:	2046      	movs	r0, #70	; 0x46
 800237e:	f7fe fe97 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, timeElements[5], 2, (currentEle == MIN) ? (changeMode ? GREEN : BLACK) : GREEN, BLACK, 24);
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <timeEdit+0x1f0>)
 8002384:	895a      	ldrh	r2, [r3, #10]
 8002386:	4b52      	ldr	r3, [pc, #328]	; (80024d0 <timeEdit+0x1dc>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <timeEdit+0xac>
 800238e:	4b54      	ldr	r3, [pc, #336]	; (80024e0 <timeEdit+0x1ec>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <timeEdit+0xa8>
 8002396:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800239a:	e003      	b.n	80023a4 <timeEdit+0xb0>
 800239c:	2300      	movs	r3, #0
 800239e:	e001      	b.n	80023a4 <timeEdit+0xb0>
 80023a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023a4:	2118      	movs	r1, #24
 80023a6:	9102      	str	r1, [sp, #8]
 80023a8:	2100      	movs	r1, #0
 80023aa:	9101      	str	r1, [sp, #4]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2302      	movs	r3, #2
 80023b0:	2164      	movs	r1, #100	; 0x64
 80023b2:	206e      	movs	r0, #110	; 0x6e
 80023b4:	f7fe fe7c 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, timeElements[6], 2, (currentEle == SEC) ? (changeMode ? GREEN : BLACK) : GREEN, BLACK, 24);
 80023b8:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <timeEdit+0x1f0>)
 80023ba:	899a      	ldrh	r2, [r3, #12]
 80023bc:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <timeEdit+0x1dc>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <timeEdit+0xe2>
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <timeEdit+0x1ec>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <timeEdit+0xde>
 80023cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023d0:	e003      	b.n	80023da <timeEdit+0xe6>
 80023d2:	2300      	movs	r3, #0
 80023d4:	e001      	b.n	80023da <timeEdit+0xe6>
 80023d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023da:	2118      	movs	r1, #24
 80023dc:	9102      	str	r1, [sp, #8]
 80023de:	2100      	movs	r1, #0
 80023e0:	9101      	str	r1, [sp, #4]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2302      	movs	r3, #2
 80023e6:	2164      	movs	r1, #100	; 0x64
 80023e8:	2096      	movs	r0, #150	; 0x96
 80023ea:	f7fe fe61 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, timeElements[3], 2, (currentEle == DAY) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <timeEdit+0x1f0>)
 80023f0:	88da      	ldrh	r2, [r3, #6]
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <timeEdit+0x1dc>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d108      	bne.n	800240c <timeEdit+0x118>
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <timeEdit+0x1ec>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <timeEdit+0x114>
 8002402:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002406:	e003      	b.n	8002410 <timeEdit+0x11c>
 8002408:	2300      	movs	r3, #0
 800240a:	e001      	b.n	8002410 <timeEdit+0x11c>
 800240c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002410:	2118      	movs	r1, #24
 8002412:	9102      	str	r1, [sp, #8]
 8002414:	2100      	movs	r1, #0
 8002416:	9101      	str	r1, [sp, #4]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2302      	movs	r3, #2
 800241c:	2182      	movs	r1, #130	; 0x82
 800241e:	2014      	movs	r0, #20
 8002420:	f7fe fe46 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, timeElements[2], 2, (currentEle == DATE) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <timeEdit+0x1f0>)
 8002426:	889a      	ldrh	r2, [r3, #4]
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <timeEdit+0x1dc>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d108      	bne.n	8002442 <timeEdit+0x14e>
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <timeEdit+0x1ec>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <timeEdit+0x14a>
 8002438:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800243c:	e003      	b.n	8002446 <timeEdit+0x152>
 800243e:	2300      	movs	r3, #0
 8002440:	e001      	b.n	8002446 <timeEdit+0x152>
 8002442:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002446:	2118      	movs	r1, #24
 8002448:	9102      	str	r1, [sp, #8]
 800244a:	2100      	movs	r1, #0
 800244c:	9101      	str	r1, [sp, #4]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2302      	movs	r3, #2
 8002452:	2182      	movs	r1, #130	; 0x82
 8002454:	2046      	movs	r0, #70	; 0x46
 8002456:	f7fe fe2b 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, timeElements[1], 2, (currentEle == MONTH) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <timeEdit+0x1f0>)
 800245c:	885a      	ldrh	r2, [r3, #2]
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <timeEdit+0x1dc>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d108      	bne.n	8002478 <timeEdit+0x184>
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <timeEdit+0x1ec>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <timeEdit+0x180>
 800246e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002472:	e003      	b.n	800247c <timeEdit+0x188>
 8002474:	2300      	movs	r3, #0
 8002476:	e001      	b.n	800247c <timeEdit+0x188>
 8002478:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800247c:	2118      	movs	r1, #24
 800247e:	9102      	str	r1, [sp, #8]
 8002480:	2100      	movs	r1, #0
 8002482:	9101      	str	r1, [sp, #4]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2302      	movs	r3, #2
 8002488:	2182      	movs	r1, #130	; 0x82
 800248a:	206e      	movs	r0, #110	; 0x6e
 800248c:	f7fe fe10 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, timeElements[0], 2, (currentEle == YEAR) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <timeEdit+0x1f0>)
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <timeEdit+0x1dc>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d108      	bne.n	80024ae <timeEdit+0x1ba>
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <timeEdit+0x1ec>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <timeEdit+0x1b6>
 80024a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024a8:	e003      	b.n	80024b2 <timeEdit+0x1be>
 80024aa:	2300      	movs	r3, #0
 80024ac:	e001      	b.n	80024b2 <timeEdit+0x1be>
 80024ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024b2:	2118      	movs	r1, #24
 80024b4:	9102      	str	r1, [sp, #8]
 80024b6:	2100      	movs	r1, #0
 80024b8:	9101      	str	r1, [sp, #4]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2302      	movs	r3, #2
 80024be:	2182      	movs	r1, #130	; 0x82
 80024c0:	2096      	movs	r0, #150	; 0x96
 80024c2:	f7fe fdf5 	bl	80010b0 <lcd_ShowIntNum>

	}
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200001d4 	.word	0x200001d4
 80024d4:	200001d6 	.word	0x200001d6
 80024d8:	66666667 	.word	0x66666667
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	200001d5 	.word	0x200001d5
 80024e4:	20000010 	.word	0x20000010

080024e8 <displayTime>:
void displayTime(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af04      	add	r7, sp, #16

	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <displayTime+0xe0>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	2318      	movs	r3, #24
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2302      	movs	r3, #2
 8002504:	2164      	movs	r1, #100	; 0x64
 8002506:	2046      	movs	r0, #70	; 0x46
 8002508:	f7fe fdd2 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <displayTime+0xe4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b29a      	uxth	r2, r3
 8002512:	2318      	movs	r3, #24
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	2300      	movs	r3, #0
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2302      	movs	r3, #2
 8002522:	2164      	movs	r1, #100	; 0x64
 8002524:	206e      	movs	r0, #110	; 0x6e
 8002526:	f7fe fdc3 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <displayTime+0xe8>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b29a      	uxth	r2, r3
 8002530:	2318      	movs	r3, #24
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	2300      	movs	r3, #0
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2302      	movs	r3, #2
 8002540:	2164      	movs	r1, #100	; 0x64
 8002542:	2096      	movs	r0, #150	; 0x96
 8002544:	f7fe fdb4 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <displayTime+0xec>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b29a      	uxth	r2, r3
 800254e:	2318      	movs	r3, #24
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	2300      	movs	r3, #0
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2302      	movs	r3, #2
 800255e:	2182      	movs	r1, #130	; 0x82
 8002560:	2014      	movs	r0, #20
 8002562:	f7fe fda5 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002566:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <displayTime+0xf0>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b29a      	uxth	r2, r3
 800256c:	2318      	movs	r3, #24
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	2300      	movs	r3, #0
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2302      	movs	r3, #2
 800257c:	2182      	movs	r1, #130	; 0x82
 800257e:	2046      	movs	r0, #70	; 0x46
 8002580:	f7fe fd96 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <displayTime+0xf4>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2318      	movs	r3, #24
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	2300      	movs	r3, #0
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2302      	movs	r3, #2
 800259a:	2182      	movs	r1, #130	; 0x82
 800259c:	206e      	movs	r0, #110	; 0x6e
 800259e:	f7fe fd87 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <displayTime+0xf8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	2318      	movs	r3, #24
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2302      	movs	r3, #2
 80025b8:	2182      	movs	r1, #130	; 0x82
 80025ba:	2096      	movs	r0, #150	; 0x96
 80025bc:	f7fe fd78 	bl	80010b0 <lcd_ShowIntNum>
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000006f 	.word	0x2000006f
 80025cc:	20000070 	.word	0x20000070
 80025d0:	20000071 	.word	0x20000071
 80025d4:	20000073 	.word	0x20000073
 80025d8:	20000072 	.word	0x20000072
 80025dc:	20000074 	.word	0x20000074
 80025e0:	20000075 	.word	0x20000075

080025e4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b2db      	uxtb	r3, r3
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <DEC2BCD+0x44>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	b258      	sxtb	r0, r3
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <DEC2BCD+0x44>)
 8002636:	fba3 1302 	umull	r1, r3, r3, r2
 800263a:	08d9      	lsrs	r1, r3, #3
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b25b      	sxtb	r3, r3
 800264a:	4303      	orrs	r3, r0
 800264c:	b25b      	sxtb	r3, r3
 800264e:	b2db      	uxtb	r3, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	cccccccd 	.word	0xcccccccd

08002660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002666:	490e      	ldr	r1, [pc, #56]	; (80026a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800267c:	4c0b      	ldr	r4, [pc, #44]	; (80026ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800268a:	f7ff fd21 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268e:	f003 fc27 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002692:	f7ff f80b 	bl	80016ac <main>
  bx  lr    
 8002696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80026a4:	08008f7c 	.word	0x08008f7c
  ldr r2, =_sbss
 80026a8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80026ac:	200001ec 	.word	0x200001ec

080026b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC_IRQHandler>
	...

080026b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_Init+0x40>)
 80026be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_Init+0x40>)
 80026ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_Init+0x40>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_Init+0x40>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 f94f 	bl	8002980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f000 f808 	bl	80026f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e8:	f7ff fc96 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_InitTick+0x54>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_InitTick+0x58>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	4619      	mov	r1, r3
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002712:	fbb2 f3f3 	udiv	r3, r2, r3
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f967 	bl	80029ea <HAL_SYSTICK_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e00e      	b.n	8002744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b0f      	cmp	r3, #15
 800272a:	d80a      	bhi.n	8002742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272c:	2200      	movs	r2, #0
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f000 f92f 	bl	8002996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <HAL_InitTick+0x5c>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000008 	.word	0x20000008
 8002750:	20000024 	.word	0x20000024
 8002754:	20000020 	.word	0x20000020

08002758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_IncTick+0x20>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x24>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4413      	add	r3, r2
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_IncTick+0x24>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000024 	.word	0x20000024
 800277c:	200001e8 	.word	0x200001e8

08002780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_GetTick+0x14>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	4618      	mov	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	200001e8 	.word	0x200001e8

08002798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a0:	f7ff ffee 	bl	8002780 <HAL_GetTick>
 80027a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d005      	beq.n	80027be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_Delay+0x44>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027be:	bf00      	nop
 80027c0:	f7ff ffde 	bl	8002780 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d8f7      	bhi.n	80027c0 <HAL_Delay+0x28>
  {
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000024 	.word	0x20000024

080027e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <__NVIC_GetPriorityGrouping+0x18>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0307 	and.w	r3, r3, #7
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	db0b      	blt.n	800286e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <__NVIC_EnableIRQ+0x38>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2001      	movs	r0, #1
 8002866:	fa00 f202 	lsl.w	r2, r0, r2
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800294c:	d301      	bcc.n	8002952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294e:	2301      	movs	r3, #1
 8002950:	e00f      	b.n	8002972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <SysTick_Config+0x40>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295a:	210f      	movs	r1, #15
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f7ff ff8e 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <SysTick_Config+0x40>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <SysTick_Config+0x40>)
 800296c:	2207      	movs	r2, #7
 800296e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000e010 	.word	0xe000e010

08002980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff29 	bl	80027e0 <__NVIC_SetPriorityGrouping>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff3e 	bl	8002828 <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff8e 	bl	80028d4 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5d 	bl	8002880 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff31 	bl	8002844 <__NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa2 	bl	800293c <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e16b      	b.n	8002cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f040 815a 	bne.w	8002cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d005      	beq.n	8002a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d130      	bne.n	8002ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0201 	and.w	r2, r3, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d017      	beq.n	8002af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d123      	bne.n	8002b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	08da      	lsrs	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3208      	adds	r2, #8
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	220f      	movs	r2, #15
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80b4 	beq.w	8002cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <HAL_GPIO_Init+0x30c>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a5f      	ldr	r2, [pc, #380]	; (8002d10 <HAL_GPIO_Init+0x30c>)
 8002b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_GPIO_Init+0x30c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba6:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <HAL_GPIO_Init+0x310>)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	; (8002d18 <HAL_GPIO_Init+0x314>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02b      	beq.n	8002c2a <HAL_GPIO_Init+0x226>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a51      	ldr	r2, [pc, #324]	; (8002d1c <HAL_GPIO_Init+0x318>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d025      	beq.n	8002c26 <HAL_GPIO_Init+0x222>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a50      	ldr	r2, [pc, #320]	; (8002d20 <HAL_GPIO_Init+0x31c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <HAL_GPIO_Init+0x21e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4f      	ldr	r2, [pc, #316]	; (8002d24 <HAL_GPIO_Init+0x320>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x21a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4e      	ldr	r2, [pc, #312]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x216>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4d      	ldr	r2, [pc, #308]	; (8002d2c <HAL_GPIO_Init+0x328>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x212>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <HAL_GPIO_Init+0x32c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x20e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4b      	ldr	r2, [pc, #300]	; (8002d34 <HAL_GPIO_Init+0x330>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x20a>
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	e00e      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	e00c      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c12:	2306      	movs	r3, #6
 8002c14:	e00a      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c16:	2305      	movs	r3, #5
 8002c18:	e008      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x228>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c3c:	4935      	ldr	r1, [pc, #212]	; (8002d14 <HAL_GPIO_Init+0x310>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6e:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cec:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <HAL_GPIO_Init+0x334>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	f67f ae90 	bls.w	8002a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40021400 	.word	0x40021400
 8002d30:	40021800 	.word	0x40021800
 8002d34:	40021c00 	.word	0x40021c00
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e12b      	b.n	8002fda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7fd fecc 	bl	8000b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2224      	movs	r2, #36	; 0x24
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f001 fd2a 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8002dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a81      	ldr	r2, [pc, #516]	; (8002fe4 <HAL_I2C_Init+0x274>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d807      	bhi.n	8002df4 <HAL_I2C_Init+0x84>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a80      	ldr	r2, [pc, #512]	; (8002fe8 <HAL_I2C_Init+0x278>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e006      	b.n	8002e02 <HAL_I2C_Init+0x92>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a7d      	ldr	r2, [pc, #500]	; (8002fec <HAL_I2C_Init+0x27c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bf94      	ite	ls
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	2300      	movhi	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0e7      	b.n	8002fda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a78      	ldr	r2, [pc, #480]	; (8002ff0 <HAL_I2C_Init+0x280>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <HAL_I2C_Init+0x274>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d802      	bhi.n	8002e44 <HAL_I2C_Init+0xd4>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	3301      	adds	r3, #1
 8002e42:	e009      	b.n	8002e58 <HAL_I2C_Init+0xe8>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	4a69      	ldr	r2, [pc, #420]	; (8002ff4 <HAL_I2C_Init+0x284>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	3301      	adds	r3, #1
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	495c      	ldr	r1, [pc, #368]	; (8002fe4 <HAL_I2C_Init+0x274>)
 8002e74:	428b      	cmp	r3, r1
 8002e76:	d819      	bhi.n	8002eac <HAL_I2C_Init+0x13c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e59      	subs	r1, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e86:	1c59      	adds	r1, r3, #1
 8002e88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_I2C_Init+0x138>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e59      	subs	r1, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea6:	e051      	b.n	8002f4c <HAL_I2C_Init+0x1dc>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	e04f      	b.n	8002f4c <HAL_I2C_Init+0x1dc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d111      	bne.n	8002ed8 <HAL_I2C_Init+0x168>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	440b      	add	r3, r1
 8002ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e012      	b.n	8002efe <HAL_I2C_Init+0x18e>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e58      	subs	r0, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	0099      	lsls	r1, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Init+0x196>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e022      	b.n	8002f4c <HAL_I2C_Init+0x1dc>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10e      	bne.n	8002f2c <HAL_I2C_Init+0x1bc>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e58      	subs	r0, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	440b      	add	r3, r1
 8002f1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2a:	e00f      	b.n	8002f4c <HAL_I2C_Init+0x1dc>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1e58      	subs	r0, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	0099      	lsls	r1, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	6809      	ldr	r1, [r1, #0]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6911      	ldr	r1, [r2, #16]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68d2      	ldr	r2, [r2, #12]
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	000186a0 	.word	0x000186a0
 8002fe8:	001e847f 	.word	0x001e847f
 8002fec:	003d08ff 	.word	0x003d08ff
 8002ff0:	431bde83 	.word	0x431bde83
 8002ff4:	10624dd3 	.word	0x10624dd3

08002ff8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	460b      	mov	r3, r1
 800300c:	813b      	strh	r3, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003012:	f7ff fbb5 	bl	8002780 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	f040 80d9 	bne.w	80031d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2319      	movs	r3, #25
 800302c:	2201      	movs	r2, #1
 800302e:	496d      	ldr	r1, [pc, #436]	; (80031e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fdad 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
 800303e:	e0cc      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_I2C_Mem_Write+0x56>
 800304a:	2302      	movs	r3, #2
 800304c:	e0c5      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d007      	beq.n	8003074 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2221      	movs	r2, #33	; 0x21
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a4d      	ldr	r2, [pc, #308]	; (80031e8 <HAL_I2C_Mem_Write+0x1f0>)
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b6:	88f8      	ldrh	r0, [r7, #6]
 80030b8:	893a      	ldrh	r2, [r7, #8]
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4603      	mov	r3, r0
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fbe4 	bl	8003894 <I2C_RequestMemoryWrite>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d052      	beq.n	8003178 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e081      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fe2e 	bl	8003d3c <I2C_WaitOnTXEFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d107      	bne.n	80030fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d11b      	bne.n	8003178 <HAL_I2C_Mem_Write+0x180>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d017      	beq.n	8003178 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1aa      	bne.n	80030d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fe1a 	bl	8003dbe <I2C_WaitOnBTFFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b04      	cmp	r3, #4
 8003196:	d107      	bne.n	80031a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e016      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	00100002 	.word	0x00100002
 80031e8:	ffff0000 	.word	0xffff0000

080031ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	461a      	mov	r2, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	460b      	mov	r3, r1
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003206:	f7ff fabb 	bl	8002780 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 8208 	bne.w	800362a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2319      	movs	r3, #25
 8003220:	2201      	movs	r2, #1
 8003222:	497b      	ldr	r1, [pc, #492]	; (8003410 <HAL_I2C_Mem_Read+0x224>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fcb3 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
 8003232:	e1fb      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Mem_Read+0x56>
 800323e:	2302      	movs	r3, #2
 8003240:	e1f4      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d007      	beq.n	8003268 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2222      	movs	r2, #34	; 0x22
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <HAL_I2C_Mem_Read+0x228>)
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032aa:	88f8      	ldrh	r0, [r7, #6]
 80032ac:	893a      	ldrh	r2, [r7, #8]
 80032ae:	8979      	ldrh	r1, [r7, #10]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	4603      	mov	r3, r0
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fb80 	bl	80039c0 <I2C_RequestMemoryRead>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1b0      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d113      	bne.n	80032fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e184      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d11b      	bne.n	800333a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e164      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b02      	cmp	r3, #2
 8003340:	d11b      	bne.n	800337a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	e144      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003390:	e138      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	2b03      	cmp	r3, #3
 8003398:	f200 80f1 	bhi.w	800357e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d123      	bne.n	80033ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fd49 	bl	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e139      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ea:	e10b      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d14e      	bne.n	8003492 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	2200      	movs	r2, #0
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <HAL_I2C_Mem_Read+0x22c>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fbc6 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e10e      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000
 8003418:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003490:	e0b8      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2200      	movs	r2, #0
 800349a:	4966      	ldr	r1, [pc, #408]	; (8003634 <HAL_I2C_Mem_Read+0x448>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fb77 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0bf      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2200      	movs	r2, #0
 80034f6:	494f      	ldr	r1, [pc, #316]	; (8003634 <HAL_I2C_Mem_Read+0x448>)
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fb49 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e091      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800357c:	e042      	b.n	8003604 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fc5c 	bl	8003e40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e04c      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d118      	bne.n	8003604 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f aec2 	bne.w	8003392 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010004 	.word	0x00010004

08003638 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08a      	sub	sp, #40	; 0x28
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	460b      	mov	r3, r1
 8003646:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff f89a 	bl	8002780 <HAL_GetTick>
 800364c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	f040 8111 	bne.w	8003882 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2319      	movs	r3, #25
 8003666:	2201      	movs	r2, #1
 8003668:	4988      	ldr	r1, [pc, #544]	; (800388c <HAL_I2C_IsDeviceReady+0x254>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa90 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	e104      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_I2C_IsDeviceReady+0x50>
 8003684:	2302      	movs	r3, #2
 8003686:	e0fd      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d007      	beq.n	80036ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2224      	movs	r2, #36	; 0x24
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a70      	ldr	r2, [pc, #448]	; (8003890 <HAL_I2C_IsDeviceReady+0x258>)
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fa4e 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d103      	bne.n	8003712 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0b6      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003724:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003726:	f7ff f82b 	bl	8002780 <HAL_GetTick>
 800372a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800375a:	e025      	b.n	80037a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7ff f810 	bl	8002780 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <HAL_I2C_IsDeviceReady+0x13a>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22a0      	movs	r2, #160	; 0xa0
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2ba0      	cmp	r3, #160	; 0xa0
 80037b2:	d005      	beq.n	80037c0 <HAL_I2C_IsDeviceReady+0x188>
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_I2C_IsDeviceReady+0x188>
 80037ba:	7dbb      	ldrb	r3, [r7, #22]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0cd      	beq.n	800375c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d129      	bne.n	800382a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2319      	movs	r3, #25
 8003802:	2201      	movs	r2, #1
 8003804:	4921      	ldr	r1, [pc, #132]	; (800388c <HAL_I2C_IsDeviceReady+0x254>)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f9c2 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e036      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e02c      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003838:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003842:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2319      	movs	r3, #25
 800384a:	2201      	movs	r2, #1
 800384c:	490f      	ldr	r1, [pc, #60]	; (800388c <HAL_I2C_IsDeviceReady+0x254>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f99e 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e012      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	3301      	adds	r3, #1
 8003862:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	f4ff af32 	bcc.w	80036d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	00100002 	.word	0x00100002
 8003890:	ffff0000 	.word	0xffff0000

08003894 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	460b      	mov	r3, r1
 80038a8:	813b      	strh	r3, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f960 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d103      	bne.n	80038ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e05f      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038f2:	897b      	ldrh	r3, [r7, #10]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003900:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	492d      	ldr	r1, [pc, #180]	; (80039bc <I2C_RequestMemoryWrite+0x128>)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f998 	bl	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e04c      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa02 	bl	8003d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	2b04      	cmp	r3, #4
 8003944:	d107      	bne.n	8003956 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e02b      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	e021      	b.n	80039b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b29b      	uxth	r3, r3
 8003972:	b2da      	uxtb	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	6a39      	ldr	r1, [r7, #32]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f9dc 	bl	8003d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b04      	cmp	r3, #4
 8003990:	d107      	bne.n	80039a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e005      	b.n	80039b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039a6:	893b      	ldrh	r3, [r7, #8]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	00010002 	.word	0x00010002

080039c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f8c2 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d103      	bne.n	8003a2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0aa      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	4952      	ldr	r1, [pc, #328]	; (8003b8c <I2C_RequestMemoryRead+0x1cc>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f8fa 	bl	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e097      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f964 	bl	8003d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e076      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e021      	b.n	8003aec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6a39      	ldr	r1, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f93e 	bl	8003d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d107      	bne.n	8003ade <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e050      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae2:	893b      	ldrh	r3, [r7, #8]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aee:	6a39      	ldr	r1, [r7, #32]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f923 	bl	8003d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d107      	bne.n	8003b14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e035      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f82b 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d103      	bne.n	8003b58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e013      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	4906      	ldr	r1, [pc, #24]	; (8003b8c <I2C_RequestMemoryRead+0x1cc>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f863 	bl	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010002 	.word	0x00010002

08003b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba0:	e025      	b.n	8003bee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba8:	d021      	beq.n	8003bee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003baa:	f7fe fde9 	bl	8002780 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d302      	bcc.n	8003bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d116      	bne.n	8003bee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e023      	b.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10d      	bne.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	e00c      	b.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d0b6      	beq.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4c:	e051      	b.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d123      	bne.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e046      	b.n	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d021      	beq.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe fd67 	bl	8002780 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d116      	bne.n	8003cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e020      	b.n	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d10c      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	e00b      	b.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d18d      	bne.n	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d48:	e02d      	b.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f8ce 	bl	8003eec <I2C_IsAcknowledgeFailed>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e02d      	b.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d021      	beq.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fe fd0d 	bl	8002780 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d116      	bne.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e007      	b.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b80      	cmp	r3, #128	; 0x80
 8003db2:	d1ca      	bne.n	8003d4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dca:	e02d      	b.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f88d 	bl	8003eec <I2C_IsAcknowledgeFailed>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e02d      	b.n	8003e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d021      	beq.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe fccc 	bl	8002780 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e007      	b.n	8003e38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d1ca      	bne.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e4c:	e042      	b.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d119      	bne.n	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0210 	mvn.w	r2, #16
 8003e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e029      	b.n	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fe fc76 	bl	8002780 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e007      	b.n	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d1b5      	bne.n	8003e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f02:	d11b      	bne.n	8003f3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e267      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d075      	beq.n	8004056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d00c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d112      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4b82      	ldr	r3, [pc, #520]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	4b7e      	ldr	r3, [pc, #504]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d05b      	beq.n	8004054 <HAL_RCC_OscConfig+0x108>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d157      	bne.n	8004054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e242      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x74>
 8003fb2:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x98>
 8003fca:	4b70      	ldr	r3, [pc, #448]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6f      	ldr	r2, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xb0>
 8003fe4:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a68      	ldr	r2, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe fbbc 	bl	8002780 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe fbb8 	bl	8002780 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e207      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xc0>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe fba8 	bl	8002780 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe fba4 	bl	8002780 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e1f3      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0xe8>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004062:	4b4a      	ldr	r3, [pc, #296]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_RCC_OscConfig+0x240>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1c7      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b34      	ldr	r3, [pc, #208]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fb5d 	bl	8002780 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fe fb59 	bl	8002780 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1a8      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4925      	ldr	r1, [pc, #148]	; (800418c <HAL_RCC_OscConfig+0x240>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <HAL_RCC_OscConfig+0x244>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fb3c 	bl	8002780 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410c:	f7fe fb38 	bl	8002780 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e187      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fe fb1c 	bl	8002780 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414c:	f7fe fb18 	bl	8002780 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e167      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x240>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x200>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_OscConfig+0x248>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fe fb05 	bl	8002780 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e00e      	b.n	8004198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fb01 	bl	8002780 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d907      	bls.n	8004198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e150      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b88      	ldr	r3, [pc, #544]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ea      	bne.n	800417a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8097 	beq.w	80042e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b81      	ldr	r3, [pc, #516]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b7d      	ldr	r3, [pc, #500]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a7c      	ldr	r2, [pc, #496]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b77      	ldr	r3, [pc, #476]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b74      	ldr	r3, [pc, #464]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fe fac1 	bl	8002780 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fe fabd 	bl	8002780 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e10c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x474>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x2ea>
 8004228:	4b64      	ldr	r3, [pc, #400]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a63      	ldr	r2, [pc, #396]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x30c>
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5e      	ldr	r2, [pc, #376]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a5b      	ldr	r2, [pc, #364]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x324>
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	4a57      	ldr	r2, [pc, #348]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	; 0x70
 8004264:	4b55      	ldr	r3, [pc, #340]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fa82 	bl	8002780 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fe fa7e 	bl	8002780 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0cb      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b49      	ldr	r3, [pc, #292]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCC_OscConfig+0x334>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a4:	f7fe fa6c 	bl	8002780 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fe fa68 	bl	8002780 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0b5      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	4b3e      	ldr	r3, [pc, #248]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ee      	bne.n	80042ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a38      	ldr	r2, [pc, #224]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a1 	beq.w	800442c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d05c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d141      	bne.n	8004382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe fa3c 	bl	8002780 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fe fa38 	bl	8002780 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e087      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	491b      	ldr	r1, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7fe fa11 	bl	8002780 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004362:	f7fe fa0d 	bl	8002780 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e05c      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x416>
 8004380:	e054      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x478>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe f9fa 	bl	8002780 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe f9f6 	bl	8002780 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e045      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x470>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x444>
 80043ae:	e03d      	b.n	800442c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e038      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x4ec>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d121      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11a      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	4293      	cmp	r3, r2
 8004402:	d111      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	3b01      	subs	r3, #1
 8004412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0cc      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b68      	ldr	r3, [pc, #416]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d90c      	bls.n	8004478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0b8      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a58      	ldr	r2, [pc, #352]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a8:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b4:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	494d      	ldr	r1, [pc, #308]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d044      	beq.n	800455c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d119      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450a:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e067      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4934      	ldr	r1, [pc, #208]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800452c:	f7fe f928 	bl	8002780 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fe f924 	bl	8002780 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e04f      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d20c      	bcs.n	8004584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e032      	b.n	80045ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004590:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4916      	ldr	r1, [pc, #88]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	490e      	ldr	r1, [pc, #56]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c2:	f000 f821 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	490a      	ldr	r1, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	5ccb      	ldrb	r3, [r1, r3]
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe f888 	bl	80026f8 <HAL_InitTick>

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023c00 	.word	0x40023c00
 80045f8:	40023800 	.word	0x40023800
 80045fc:	08008f54 	.word	0x08008f54
 8004600:	20000008 	.word	0x20000008
 8004604:	20000020 	.word	0x20000020

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800460c:	b094      	sub	sp, #80	; 0x50
 800460e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
 8004614:	2300      	movs	r3, #0
 8004616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004618:	2300      	movs	r3, #0
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004620:	4b79      	ldr	r3, [pc, #484]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d00d      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x40>
 800462c:	2b08      	cmp	r3, #8
 800462e:	f200 80e1 	bhi.w	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004636:	2b04      	cmp	r3, #4
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x3a>
 800463a:	e0db      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b73      	ldr	r3, [pc, #460]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004640:	e0db      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_GetSysClockFreq+0x208>)
 8004644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004646:	e0d8      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004652:	4b6d      	ldr	r3, [pc, #436]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	2200      	movs	r2, #0
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38
 8004668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
 8004672:	2300      	movs	r3, #0
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
 8004676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	f04f 0000 	mov.w	r0, #0
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	0159      	lsls	r1, r3, #5
 8004688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800468c:	0150      	lsls	r0, r2, #5
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4621      	mov	r1, r4
 8004694:	1a51      	subs	r1, r2, r1
 8004696:	6139      	str	r1, [r7, #16]
 8004698:	4629      	mov	r1, r5
 800469a:	eb63 0301 	sbc.w	r3, r3, r1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ac:	4659      	mov	r1, fp
 80046ae:	018b      	lsls	r3, r1, #6
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b6:	4651      	mov	r1, sl
 80046b8:	018a      	lsls	r2, r1, #6
 80046ba:	4651      	mov	r1, sl
 80046bc:	ebb2 0801 	subs.w	r8, r2, r1
 80046c0:	4659      	mov	r1, fp
 80046c2:	eb63 0901 	sbc.w	r9, r3, r1
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046da:	4690      	mov	r8, r2
 80046dc:	4699      	mov	r9, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	eb18 0303 	adds.w	r3, r8, r3
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	462b      	mov	r3, r5
 80046e8:	eb49 0303 	adc.w	r3, r9, r3
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046fa:	4629      	mov	r1, r5
 80046fc:	024b      	lsls	r3, r1, #9
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004704:	4621      	mov	r1, r4
 8004706:	024a      	lsls	r2, r1, #9
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	2200      	movs	r2, #0
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004718:	f7fb fd56 	bl	80001c8 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004724:	e058      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	4618      	mov	r0, r3
 8004730:	4611      	mov	r1, r2
 8004732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	2300      	movs	r3, #0
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
 800473c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	0159      	lsls	r1, r3, #5
 800474e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004752:	0150      	lsls	r0, r2, #5
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4641      	mov	r1, r8
 800475a:	ebb2 0a01 	subs.w	sl, r2, r1
 800475e:	4649      	mov	r1, r9
 8004760:	eb63 0b01 	sbc.w	fp, r3, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004778:	ebb2 040a 	subs.w	r4, r2, sl
 800477c:	eb63 050b 	sbc.w	r5, r3, fp
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	00eb      	lsls	r3, r5, #3
 800478a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478e:	00e2      	lsls	r2, r4, #3
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	4643      	mov	r3, r8
 8004796:	18e3      	adds	r3, r4, r3
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	464b      	mov	r3, r9
 800479c:	eb45 0303 	adc.w	r3, r5, r3
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ae:	4629      	mov	r1, r5
 80047b0:	028b      	lsls	r3, r1, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b8:	4621      	mov	r1, r4
 80047ba:	028a      	lsls	r2, r1, #10
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	2200      	movs	r2, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	61fa      	str	r2, [r7, #28]
 80047c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047cc:	f7fb fcfc 	bl	80001c8 <__aeabi_uldivmod>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4613      	mov	r3, r2
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_GetSysClockFreq+0x200>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetSysClockFreq+0x204>)
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3750      	adds	r7, #80	; 0x50
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	00f42400 	.word	0x00f42400
 8004810:	007a1200 	.word	0x007a1200

08004814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000008 	.word	0x20000008

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	08008f64 	.word	0x08008f64

08004854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e07b      	b.n	800495e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004876:	d009      	beq.n	800488c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
 800487e:	e005      	b.n	800488c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fd fb6e 	bl	8001f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	ea42 0103 	orr.w	r1, r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0104 	and.w	r1, r3, #4
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0210 	and.w	r2, r3, #16
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800494c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_SPI_Transmit+0x22>
 8004984:	2302      	movs	r3, #2
 8004986:	e126      	b.n	8004bd6 <HAL_SPI_Transmit+0x270>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004990:	f7fd fef6 	bl	8002780 <HAL_GetTick>
 8004994:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
 80049a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049aa:	e10b      	b.n	8004bc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Transmit+0x52>
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049bc:	e102      	b.n	8004bc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2203      	movs	r2, #3
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a04:	d10f      	bne.n	8004a26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d007      	beq.n	8004a44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4c:	d14b      	bne.n	8004ae6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_SPI_Transmit+0xf6>
 8004a56:	8afb      	ldrh	r3, [r7, #22]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d13e      	bne.n	8004ada <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	1c9a      	adds	r2, r3, #2
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a80:	e02b      	b.n	8004ada <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d112      	bne.n	8004ab6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ab4:	e011      	b.n	8004ada <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab6:	f7fd fe63 	bl	8002780 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d803      	bhi.n	8004ace <HAL_SPI_Transmit+0x168>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_Transmit+0x16e>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ad8:	e074      	b.n	8004bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ce      	bne.n	8004a82 <HAL_SPI_Transmit+0x11c>
 8004ae4:	e04c      	b.n	8004b80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0x18e>
 8004aee:	8afb      	ldrh	r3, [r7, #22]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d140      	bne.n	8004b76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b1a:	e02c      	b.n	8004b76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d113      	bne.n	8004b52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	7812      	ldrb	r2, [r2, #0]
 8004b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b50:	e011      	b.n	8004b76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b52:	f7fd fe15 	bl	8002780 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d803      	bhi.n	8004b6a <HAL_SPI_Transmit+0x204>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d102      	bne.n	8004b70 <HAL_SPI_Transmit+0x20a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b74:	e026      	b.n	8004bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1cd      	bne.n	8004b1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fbcb 	bl	8005320 <SPI_EndRxTxTransaction>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e000      	b.n	8004bc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b088      	sub	sp, #32
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfa:	d112      	bne.n	8004c22 <HAL_SPI_Receive+0x44>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10e      	bne.n	8004c22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f8f1 	bl	8004e00 <HAL_SPI_TransmitReceive>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	e0ea      	b.n	8004df8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_SPI_Receive+0x52>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e0e3      	b.n	8004df8 <HAL_SPI_Receive+0x21a>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c38:	f7fd fda2 	bl	8002780 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c4e:	e0ca      	b.n	8004de6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Receive+0x7e>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c60:	e0c1      	b.n	8004de6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2204      	movs	r2, #4
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca8:	d10f      	bne.n	8004cca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d007      	beq.n	8004ce8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d162      	bne.n	8004db6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cf0:	e02e      	b.n	8004d50 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d115      	bne.n	8004d2c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f103 020c 	add.w	r2, r3, #12
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d2a:	e011      	b.n	8004d50 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2c:	f7fd fd28 	bl	8002780 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d803      	bhi.n	8004d44 <HAL_SPI_Receive+0x166>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_Receive+0x16c>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d4e:	e04a      	b.n	8004de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1cb      	bne.n	8004cf2 <HAL_SPI_Receive+0x114>
 8004d5a:	e031      	b.n	8004dc0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d113      	bne.n	8004d92 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	b292      	uxth	r2, r2
 8004d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	1c9a      	adds	r2, r3, #2
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d90:	e011      	b.n	8004db6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d92:	f7fd fcf5 	bl	8002780 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d803      	bhi.n	8004daa <HAL_SPI_Receive+0x1cc>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Receive+0x1d2>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004db4:	e017      	b.n	8004de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1cd      	bne.n	8004d5c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fa45 	bl	8005254 <SPI_EndRxTransaction>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
 8004de2:	e000      	b.n	8004de6 <HAL_SPI_Receive+0x208>
  }

error :
 8004de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x26>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e18a      	b.n	800513c <HAL_SPI_TransmitReceive+0x33c>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2e:	f7fd fca7 	bl	8002780 <HAL_GetTick>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d00f      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x70>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e56:	d107      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x68>
 8004e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d003      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e6e:	e15b      	b.n	8005128 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x82>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x82>
 8004e7c:	887b      	ldrh	r3, [r7, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e88:	e14e      	b.n	8005128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2205      	movs	r2, #5
 8004e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	887a      	ldrh	r2, [r7, #2]
 8004eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	887a      	ldrh	r2, [r7, #2]
 8004ec6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d007      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004efa:	d178      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x10a>
 8004f04:	8b7b      	ldrh	r3, [r7, #26]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d166      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2e:	e053      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d11b      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x176>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d016      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x176>
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d113      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	881a      	ldrh	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d119      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x1b8>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fb8:	f7fd fbe2 	bl	8002780 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d807      	bhi.n	8004fd8 <HAL_SPI_TransmitReceive+0x1d8>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d003      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fd6:	e0a7      	b.n	8005128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1a6      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x130>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1a1      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x130>
 8004fec:	e07c      	b.n	80050e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x1fc>
 8004ff6:	8b7b      	ldrh	r3, [r7, #26]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d16b      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005022:	e057      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d11c      	bne.n	800506c <HAL_SPI_TransmitReceive+0x26c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d017      	beq.n	800506c <HAL_SPI_TransmitReceive+0x26c>
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d114      	bne.n	800506c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d119      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x2ae>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d014      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050aa:	2301      	movs	r3, #1
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ae:	f7fd fb67 	bl	8002780 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d803      	bhi.n	80050c6 <HAL_SPI_TransmitReceive+0x2c6>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d102      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x2cc>
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050d2:	e029      	b.n	8005128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1a2      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x224>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d19d      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f917 	bl	8005320 <SPI_EndRxTxTransaction>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d006      	beq.n	8005106 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005104:	e010      	b.n	8005128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	e000      	b.n	8005128 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800513c:	4618      	mov	r0, r3
 800513e:	3730      	adds	r7, #48	; 0x30
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005154:	f7fd fb14 	bl	8002780 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	4413      	add	r3, r2
 8005162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005164:	f7fd fb0c 	bl	8002780 <HAL_GetTick>
 8005168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800516a:	4b39      	ldr	r3, [pc, #228]	; (8005250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	015b      	lsls	r3, r3, #5
 8005170:	0d1b      	lsrs	r3, r3, #20
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800517a:	e054      	b.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d050      	beq.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005184:	f7fd fafc 	bl	8002780 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	429a      	cmp	r2, r3
 8005192:	d902      	bls.n	800519a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d13d      	bne.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b2:	d111      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051bc:	d004      	beq.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c6:	d107      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e0:	d10f      	bne.n	8005202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e017      	b.n	8005246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3b01      	subs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	429a      	cmp	r2, r3
 8005242:	d19b      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000008 	.word	0x20000008

08005254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005268:	d111      	bne.n	800528e <SPI_EndRxTransaction+0x3a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005272:	d004      	beq.n	800527e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527c:	d107      	bne.n	800528e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005296:	d12a      	bne.n	80052ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a0:	d012      	beq.n	80052c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ff49 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02d      	beq.n	8005314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e026      	b.n	8005316 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2101      	movs	r1, #1
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ff36 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d01a      	beq.n	8005314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e013      	b.n	8005316 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2101      	movs	r1, #1
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff ff23 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e000      	b.n	8005316 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <SPI_EndRxTxTransaction+0x7c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <SPI_EndRxTxTransaction+0x80>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0d5b      	lsrs	r3, r3, #21
 8005338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534a:	d112      	bne.n	8005372 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	2180      	movs	r1, #128	; 0x80
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fef4 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d016      	beq.n	8005390 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e00f      	b.n	8005392 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3b01      	subs	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d0f2      	beq.n	8005372 <SPI_EndRxTxTransaction+0x52>
 800538c:	e000      	b.n	8005390 <SPI_EndRxTxTransaction+0x70>
        break;
 800538e:	bf00      	nop
  }

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000008 	.word	0x20000008
 80053a0:	165e9f81 	.word	0x165e9f81

080053a4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e034      	b.n	8005424 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7fb fa80 	bl	80008d4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3308      	adds	r3, #8
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 fca6 	bl	8005d30 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	461a      	mov	r2, r3
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	f000 fcf0 	bl	8005dd4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6858      	ldr	r0, [r3, #4]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	f000 fd25 	bl	8005e50 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6892      	ldr	r2, [r2, #8]
 800540e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	6892      	ldr	r2, [r2, #8]
 800541a:	f041 0101 	orr.w	r1, r1, #1
 800541e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc fe9a 	bl	800218c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fa96 	bl	800599c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04e      	b.n	8005582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a23      	ldr	r2, [pc, #140]	; (8005590 <HAL_TIM_Base_Start_IT+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d01d      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_TIM_Base_Start_IT+0xc8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIM_Base_Start_IT+0xcc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIM_Base_Start_IT+0xd0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d111      	bne.n	8005570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d010      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	e007      	b.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9b5 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9a7 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9b8 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f98b 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f97d 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f98e 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f961 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f953 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f964 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f937 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f929 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f93a 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fbcc 	bl	8001ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fae0 	bl	8005d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8ff 	bl	8005986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0220 	mvn.w	r2, #32
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 faaa 	bl	8005d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0b4      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x186>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005810:	d03e      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0xd4>
 8005812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005816:	f200 8087 	bhi.w	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	f000 8086 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x172>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	d87f      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d01a      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0xa6>
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d87b      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d050      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d877      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d03c      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xfa>
 800583c:	2b50      	cmp	r3, #80	; 0x50
 800583e:	d873      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d058      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d86f      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d064      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d86b      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d060      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d867      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05c      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	2b10      	cmp	r3, #16
 800585e:	d05a      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	e062      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6899      	ldr	r1, [r3, #8]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f000 f9ad 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	609a      	str	r2, [r3, #8]
      break;
 800588e:	e04f      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f000 f996 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058b2:	609a      	str	r2, [r3, #8]
      break;
 80058b4:	e03c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 f90a 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2150      	movs	r1, #80	; 0x50
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f963 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058d4:	e02c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 f929 	bl	8005b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2160      	movs	r1, #96	; 0x60
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f953 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058f4:	e01c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	461a      	mov	r2, r3
 8005904:	f000 f8ea 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f943 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005914:	e00c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 f93a 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005926:	e003      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      break;
 800592c:	e000      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800592e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d00f      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3d      	ldr	r2, [pc, #244]	; (8005ab4 <TIM_Base_SetConfig+0x118>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3c      	ldr	r2, [pc, #240]	; (8005ab8 <TIM_Base_SetConfig+0x11c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3b      	ldr	r2, [pc, #236]	; (8005abc <TIM_Base_SetConfig+0x120>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3a      	ldr	r2, [pc, #232]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d108      	bne.n	80059ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d027      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <TIM_Base_SetConfig+0x118>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d023      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2b      	ldr	r2, [pc, #172]	; (8005ab8 <TIM_Base_SetConfig+0x11c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01f      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <TIM_Base_SetConfig+0x120>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d017      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <TIM_Base_SetConfig+0x128>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <TIM_Base_SetConfig+0x12c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a26      	ldr	r2, [pc, #152]	; (8005acc <TIM_Base_SetConfig+0x130>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a25      	ldr	r2, [pc, #148]	; (8005ad0 <TIM_Base_SetConfig+0x134>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <TIM_Base_SetConfig+0x138>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <TIM_Base_SetConfig+0x13c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d108      	bne.n	8005a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_Base_SetConfig+0xf8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0c      	ldr	r2, [pc, #48]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40010400 	.word	0x40010400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	40001800 	.word	0x40001800
 8005ad4:	40001c00 	.word	0x40001c00
 8005ad8:	40002000 	.word	0x40002000

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f043 0307 	orr.w	r3, r3, #7
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e05a      	b.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10c      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40010400 	.word	0x40010400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40001800 	.word	0x40001800

08005d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d48:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <FSMC_NORSRAM_Init+0xa0>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d5a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005d60:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005d66:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005d6c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005d72:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005d78:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005d7e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005d84:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005d8a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005d90:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005d96:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005d9c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d103      	bne.n	8005db4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	fff00080 	.word	0xfff00080

08005dd4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005df6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e02:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005e0a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005e12:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e1c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	3b02      	subs	r3, #2
 8005e24:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005e26:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6979      	ldr	r1, [r7, #20]
 8005e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e68:	d122      	bne.n	8005eb0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e86:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005e8e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005e96:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e9c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005eae:	e005      	b.n	8005ebc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	cff00000 	.word	0xcff00000

08005ed0 <memset>:
 8005ed0:	4402      	add	r2, r0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	f803 1b01 	strb.w	r1, [r3], #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	; (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	; (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	; (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	; (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f000 f818 	bl	8005f28 <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	08008f74 	.word	0x08008f74
 8005f1c:	08008f74 	.word	0x08008f74
 8005f20:	08008f74 	.word	0x08008f74
 8005f24:	08008f78 	.word	0x08008f78

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
