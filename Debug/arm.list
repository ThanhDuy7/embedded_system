
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fec  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007884  08007884  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007884  08007884  00017884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800788c  0800788c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0000014c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fb43  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b1c  00000000  00000000  0002fbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  000326f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b70  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022770  00000000  00000000  00034160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012cba  00000000  00000000  000568d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cdec0  00000000  00000000  0006958a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d0c  00000000  00000000  0013744c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0013b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004880 	.word	0x08004880

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004880 	.word	0x08004880

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <button_init+0x14>)
 80004ce:	f002 f9c5 	bl	800285c <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00

080004dc <button_Scan>:
  * @brief  Scan matrix butto
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <button_Scan+0xc8>)
 80004e8:	f002 f9b8 	bl	800285c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	482c      	ldr	r0, [pc, #176]	; (80005a4 <button_Scan+0xc8>)
 80004f2:	f002 f9b3 	bl	800285c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f6:	230a      	movs	r3, #10
 80004f8:	2202      	movs	r2, #2
 80004fa:	492b      	ldr	r1, [pc, #172]	; (80005a8 <button_Scan+0xcc>)
 80004fc:	482b      	ldr	r0, [pc, #172]	; (80005ac <button_Scan+0xd0>)
 80004fe:	f002 fff8 	bl	80034f2 <HAL_SPI_Receive>
	  int button_index = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e03f      	b.n	8000592 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db06      	blt.n	8000526 <button_Scan+0x4a>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b03      	cmp	r3, #3
 800051c:	dc03      	bgt.n	8000526 <button_Scan+0x4a>
			  button_index = i + 4;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e018      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b03      	cmp	r3, #3
 800052a:	dd07      	ble.n	800053c <button_Scan+0x60>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b07      	cmp	r3, #7
 8000530:	dc04      	bgt.n	800053c <button_Scan+0x60>
			  button_index = 7 - i;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f1c3 0307 	rsb	r3, r3, #7
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00d      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dd06      	ble.n	8000550 <button_Scan+0x74>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0b      	cmp	r3, #11
 8000546:	dc03      	bgt.n	8000550 <button_Scan+0x74>
			  button_index = i + 4;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3304      	adds	r3, #4
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e003      	b.n	8000558 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f1c3 0317 	rsb	r3, r3, #23
 8000556:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <button_Scan+0xcc>)
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	4013      	ands	r3, r2
 8000560:	b29b      	uxth	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <button_Scan+0x96>
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2100      	movs	r1, #0
 800056c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000570:	e009      	b.n	8000586 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057a:	3301      	adds	r3, #1
 800057c:	b299      	uxth	r1, r3
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000586:	897b      	ldrh	r3, [r7, #10]
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	ddbc      	ble.n	8000512 <button_Scan+0x36>
	  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	20000060 	.word	0x20000060
 80005ac:	20000070 	.word	0x20000070
 80005b0:	20000040 	.word	0x20000040

080005b4 <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d131      	bne.n	8000634 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6393      	str	r3, [r2, #56]	; 0x38
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80005f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80005f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000604:	230c      	movs	r3, #12
 8000606:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HAL_FSMC_MspInit+0x90>)
 800060e:	f001 ff89 	bl	8002524 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000612:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000616:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000624:	230c      	movs	r3, #12
 8000626:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_FSMC_MspInit+0x94>)
 800062e:	f001 ff79 	bl	8002524 <HAL_GPIO_Init>
 8000632:	e000      	b.n	8000636 <HAL_FSMC_MspInit+0x82>
    return;
 8000634:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000064 	.word	0x20000064
 8000640:	40023800 	.word	0x40023800
 8000644:	40021000 	.word	0x40021000
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000654:	f7ff ffae 	bl	80005b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <LCD_WR_REG+0x1c>)
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	8013      	strh	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	600ffffe 	.word	0x600ffffe

08000680 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800068a:	4a04      	ldr	r2, [pc, #16]	; (800069c <LCD_WR_DATA+0x1c>)
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	8053      	strh	r3, [r2, #2]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	600ffffe 	.word	0x600ffffe

080006a0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <LCD_RD_DATA+0x20>)
 80006a8:	885b      	ldrh	r3, [r3, #2]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	80fb      	strh	r3, [r7, #6]
	return ram;
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	b29b      	uxth	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	600ffffe 	.word	0x600ffffe

080006c4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4604      	mov	r4, r0
 80006cc:	4608      	mov	r0, r1
 80006ce:	4611      	mov	r1, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	4623      	mov	r3, r4
 80006d4:	80fb      	strh	r3, [r7, #6]
 80006d6:	4603      	mov	r3, r0
 80006d8:	80bb      	strh	r3, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	807b      	strh	r3, [r7, #2]
 80006de:	4613      	mov	r3, r2
 80006e0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80006e2:	202a      	movs	r0, #42	; 0x2a
 80006e4:	f7ff ffbc 	bl	8000660 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80006e8:	88fb      	ldrh	r3, [r7, #6]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffc6 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffc0 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	0a1b      	lsrs	r3, r3, #8
 8000704:	b29b      	uxth	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffba 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800070c:	887b      	ldrh	r3, [r7, #2]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffb4 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000718:	202b      	movs	r0, #43	; 0x2b
 800071a:	f7ff ffa1 	bl	8000660 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800071e:	88bb      	ldrh	r3, [r7, #4]
 8000720:	0a1b      	lsrs	r3, r3, #8
 8000722:	b29b      	uxth	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffab 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ffa5 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000736:	883b      	ldrh	r3, [r7, #0]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff9f 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000742:	883b      	ldrh	r3, [r7, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff99 	bl	8000680 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800074e:	202c      	movs	r0, #44	; 0x2c
 8000750:	f7ff ff86 	bl	8000660 <LCD_WR_REG>
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}

0800075c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <lcd_Clear+0x60>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <lcd_Clear+0x60>)
 8000770:	885b      	ldrh	r3, [r3, #2]
 8000772:	3b01      	subs	r3, #1
 8000774:	b29b      	uxth	r3, r3
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ffa3 	bl	80006c4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800077e:	2300      	movs	r3, #0
 8000780:	81fb      	strh	r3, [r7, #14]
 8000782:	e011      	b.n	80007a8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000784:	2300      	movs	r3, #0
 8000786:	81bb      	strh	r3, [r7, #12]
 8000788:	e006      	b.n	8000798 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff77 	bl	8000680 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000792:	89bb      	ldrh	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	81bb      	strh	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <lcd_Clear+0x60>)
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	89ba      	ldrh	r2, [r7, #12]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3f3      	bcc.n	800078a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	81fb      	strh	r3, [r7, #14]
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <lcd_Clear+0x60>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	89fa      	ldrh	r2, [r7, #14]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d3e8      	bcc.n	8000784 <lcd_Clear+0x28>
		}
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000068 	.word	0x20000068

080007c0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
 80007ca:	460b      	mov	r3, r1
 80007cc:	80bb      	strh	r3, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	88b9      	ldrh	r1, [r7, #4]
 80007d8:	88f8      	ldrh	r0, [r7, #6]
 80007da:	f7ff ff73 	bl	80006c4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff4d 	bl	8000680 <LCD_WR_DATA>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	70fb      	strb	r3, [r7, #3]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800080e:	2300      	movs	r3, #0
 8000810:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800081a:	085b      	lsrs	r3, r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	08db      	lsrs	r3, r3, #3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461a      	mov	r2, r3
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b29a      	uxth	r2, r3
 800083c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000840:	b29b      	uxth	r3, r3
 8000842:	fb12 f303 	smulbb	r3, r2, r3
 8000846:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	3b20      	subs	r3, #32
 800084c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	b29a      	uxth	r2, r3
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	4413      	add	r3, r2
 8000856:	b29b      	uxth	r3, r3
 8000858:	3b01      	subs	r3, #1
 800085a:	b29c      	uxth	r4, r3
 800085c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000860:	b29a      	uxth	r2, r3
 8000862:	88bb      	ldrh	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	3b01      	subs	r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	88b9      	ldrh	r1, [r7, #4]
 800086e:	88f8      	ldrh	r0, [r7, #6]
 8000870:	4622      	mov	r2, r4
 8000872:	f7ff ff27 	bl	80006c4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000876:	2300      	movs	r3, #0
 8000878:	827b      	strh	r3, [r7, #18]
 800087a:	e07a      	b.n	8000972 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800087c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d028      	beq.n	80008d6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000884:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000888:	2b10      	cmp	r3, #16
 800088a:	d108      	bne.n	800089e <lcd_ShowChar+0xae>
 800088c:	78fa      	ldrb	r2, [r7, #3]
 800088e:	8a7b      	ldrh	r3, [r7, #18]
 8000890:	493c      	ldr	r1, [pc, #240]	; (8000984 <lcd_ShowChar+0x194>)
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	440a      	add	r2, r1
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	75fb      	strb	r3, [r7, #23]
 800089c:	e01b      	b.n	80008d6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800089e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008a2:	2b18      	cmp	r3, #24
 80008a4:	d10b      	bne.n	80008be <lcd_ShowChar+0xce>
 80008a6:	78fa      	ldrb	r2, [r7, #3]
 80008a8:	8a79      	ldrh	r1, [r7, #18]
 80008aa:	4837      	ldr	r0, [pc, #220]	; (8000988 <lcd_ShowChar+0x198>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	4403      	add	r3, r0
 80008b6:	440b      	add	r3, r1
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	75fb      	strb	r3, [r7, #23]
 80008bc:	e00b      	b.n	80008d6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80008be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008c2:	2b20      	cmp	r3, #32
 80008c4:	d15a      	bne.n	800097c <lcd_ShowChar+0x18c>
 80008c6:	78fa      	ldrb	r2, [r7, #3]
 80008c8:	8a7b      	ldrh	r3, [r7, #18]
 80008ca:	4930      	ldr	r1, [pc, #192]	; (800098c <lcd_ShowChar+0x19c>)
 80008cc:	0192      	lsls	r2, r2, #6
 80008ce:	440a      	add	r2, r1
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	75bb      	strb	r3, [r7, #22]
 80008da:	e044      	b.n	8000966 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80008dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d120      	bne.n	8000926 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80008e4:	7dfa      	ldrb	r2, [r7, #23]
 80008e6:	7dbb      	ldrb	r3, [r7, #22]
 80008e8:	fa42 f303 	asr.w	r3, r2, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <lcd_ShowChar+0x10e>
 80008f4:	883b      	ldrh	r3, [r7, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fec2 	bl	8000680 <LCD_WR_DATA>
 80008fc:	e003      	b.n	8000906 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80008fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff febd 	bl	8000680 <LCD_WR_DATA>
				m++;
 8000906:	7d7b      	ldrb	r3, [r7, #21]
 8000908:	3301      	adds	r3, #1
 800090a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800090c:	7d7b      	ldrb	r3, [r7, #21]
 800090e:	7bfa      	ldrb	r2, [r7, #15]
 8000910:	fbb3 f1f2 	udiv	r1, r3, r2
 8000914:	fb01 f202 	mul.w	r2, r1, r2
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	d11f      	bne.n	8000960 <lcd_ShowChar+0x170>
				{
					m=0;
 8000920:	2300      	movs	r3, #0
 8000922:	757b      	strb	r3, [r7, #21]
					break;
 8000924:	e022      	b.n	800096c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000926:	7dfa      	ldrb	r2, [r7, #23]
 8000928:	7dbb      	ldrb	r3, [r7, #22]
 800092a:	fa42 f303 	asr.w	r3, r2, r3
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	2b00      	cmp	r3, #0
 8000934:	d005      	beq.n	8000942 <lcd_ShowChar+0x152>
 8000936:	883a      	ldrh	r2, [r7, #0]
 8000938:	88b9      	ldrh	r1, [r7, #4]
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff3f 	bl	80007c0 <lcd_DrawPoint>
				x++;
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	3301      	adds	r3, #1
 8000946:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000948:	88fa      	ldrh	r2, [r7, #6]
 800094a:	8a3b      	ldrh	r3, [r7, #16]
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	429a      	cmp	r2, r3
 8000952:	d105      	bne.n	8000960 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000954:	8a3b      	ldrh	r3, [r7, #16]
 8000956:	80fb      	strh	r3, [r7, #6]
					y++;
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	80bb      	strh	r3, [r7, #4]
					break;
 800095e:	e005      	b.n	800096c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000960:	7dbb      	ldrb	r3, [r7, #22]
 8000962:	3301      	adds	r3, #1
 8000964:	75bb      	strb	r3, [r7, #22]
 8000966:	7dbb      	ldrb	r3, [r7, #22]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d9b7      	bls.n	80008dc <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800096c:	8a7b      	ldrh	r3, [r7, #18]
 800096e:	3301      	adds	r3, #1
 8000970:	827b      	strh	r3, [r7, #18]
 8000972:	8a7a      	ldrh	r2, [r7, #18]
 8000974:	89bb      	ldrh	r3, [r7, #12]
 8000976:	429a      	cmp	r2, r3
 8000978:	d380      	bcc.n	800087c <lcd_ShowChar+0x8c>
 800097a:	e000      	b.n	800097e <lcd_ShowChar+0x18e>
		else return;
 800097c:	bf00      	nop
				}
			}
		}
	}
}
 800097e:	371c      	adds	r7, #28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	080048dc 	.word	0x080048dc
 8000988:	08004ecc 	.word	0x08004ecc
 800098c:	0800609c 	.word	0x0800609c

08000990 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80009a4:	e004      	b.n	80009b0 <mypow+0x20>
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	71ba      	strb	r2, [r7, #6]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f5      	bne.n	80009a6 <mypow+0x16>
	return result;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	4603      	mov	r3, r0
 80009dc:	80bb      	strh	r3, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	4613      	mov	r3, r2
 80009e4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80009ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009ee:	085b      	lsrs	r3, r3, #1
 80009f0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e059      	b.n	8000aac <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80009f8:	887c      	ldrh	r4, [r7, #2]
 80009fa:	787a      	ldrb	r2, [r7, #1]
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3b01      	subs	r3, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4619      	mov	r1, r3
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f7ff ffc1 	bl	8000990 <mypow>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	fbb4 f1f3 	udiv	r1, r4, r3
 8000a14:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <lcd_ShowIntNum+0xf8>)
 8000a16:	fba3 2301 	umull	r2, r3, r3, r1
 8000a1a:	08da      	lsrs	r2, r3, #3
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	1aca      	subs	r2, r1, r3
 8000a26:	4613      	mov	r3, r2
 8000a28:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000a2a:	7bbb      	ldrb	r3, [r7, #14]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d121      	bne.n	8000a74 <lcd_ShowIntNum+0xac>
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	787b      	ldrb	r3, [r7, #1]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	429a      	cmp	r2, r3
 8000a38:	da1c      	bge.n	8000a74 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000a3a:	7b3b      	ldrb	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d117      	bne.n	8000a70 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	fb12 f303 	smulbb	r3, r2, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4413      	add	r3, r2
 8000a52:	b298      	uxth	r0, r3
 8000a54:	8c3a      	ldrh	r2, [r7, #32]
 8000a56:	88b9      	ldrh	r1, [r7, #4]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9302      	str	r3, [sp, #8]
 8000a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	2220      	movs	r2, #32
 8000a6a:	f7ff fec1 	bl	80007f0 <lcd_ShowChar>
				continue;
 8000a6e:	e01a      	b.n	8000aa6 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	fb12 f303 	smulbb	r3, r2, r3
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	4413      	add	r3, r2
 8000a86:	b298      	uxth	r0, r3
 8000a88:	7b3b      	ldrb	r3, [r7, #12]
 8000a8a:	3330      	adds	r3, #48	; 0x30
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	8c3c      	ldrh	r4, [r7, #32]
 8000a90:	88b9      	ldrh	r1, [r7, #4]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	4623      	mov	r3, r4
 8000aa2:	f7ff fea5 	bl	80007f0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	787b      	ldrb	r3, [r7, #1]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d3a1      	bcc.n	80009f8 <lcd_ShowIntNum+0x30>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	cccccccd 	.word	0xcccccccd

08000ac4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	091b      	lsrs	r3, r3, #4
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <lcd_SetDir+0x44>)
 8000ae0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ae4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <lcd_SetDir+0x44>)
 8000ae8:	22f0      	movs	r2, #240	; 0xf0
 8000aea:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000aec:	e006      	b.n	8000afc <lcd_SetDir+0x38>
		lcddev.width=240;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <lcd_SetDir+0x44>)
 8000af0:	22f0      	movs	r2, #240	; 0xf0
 8000af2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <lcd_SetDir+0x44>)
 8000af6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000afa:	805a      	strh	r2, [r3, #2]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000068 	.word	0x20000068

08000b0c <lcd_init>:


void lcd_init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	48aa      	ldr	r0, [pc, #680]	; (8000dc0 <lcd_init+0x2b4>)
 8000b18:	f001 fea0 	bl	800285c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b20:	f001 fbca 	bl	80022b8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	48a5      	ldr	r0, [pc, #660]	; (8000dc0 <lcd_init+0x2b4>)
 8000b2c:	f001 fe96 	bl	800285c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b34:	f001 fbc0 	bl	80022b8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff ffc3 	bl	8000ac4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000b3e:	20d3      	movs	r0, #211	; 0xd3
 8000b40:	f7ff fd8e 	bl	8000660 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000b44:	f7ff fdac 	bl	80006a0 <LCD_RD_DATA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b9d      	ldr	r3, [pc, #628]	; (8000dc4 <lcd_init+0x2b8>)
 8000b4e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000b50:	f7ff fda6 	bl	80006a0 <LCD_RD_DATA>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b9a      	ldr	r3, [pc, #616]	; (8000dc4 <lcd_init+0x2b8>)
 8000b5a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000b5c:	f7ff fda0 	bl	80006a0 <LCD_RD_DATA>
 8000b60:	4603      	mov	r3, r0
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b97      	ldr	r3, [pc, #604]	; (8000dc4 <lcd_init+0x2b8>)
 8000b66:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000b68:	4b96      	ldr	r3, [pc, #600]	; (8000dc4 <lcd_init+0x2b8>)
 8000b6a:	889b      	ldrh	r3, [r3, #4]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b94      	ldr	r3, [pc, #592]	; (8000dc4 <lcd_init+0x2b8>)
 8000b72:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000b74:	f7ff fd94 	bl	80006a0 <LCD_RD_DATA>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b91      	ldr	r3, [pc, #580]	; (8000dc4 <lcd_init+0x2b8>)
 8000b7e:	889b      	ldrh	r3, [r3, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4b8f      	ldr	r3, [pc, #572]	; (8000dc4 <lcd_init+0x2b8>)
 8000b86:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000b88:	20cf      	movs	r0, #207	; 0xcf
 8000b8a:	f7ff fd69 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fd76 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000b94:	20c1      	movs	r0, #193	; 0xc1
 8000b96:	f7ff fd73 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000b9a:	2030      	movs	r0, #48	; 0x30
 8000b9c:	f7ff fd70 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000ba0:	20ed      	movs	r0, #237	; 0xed
 8000ba2:	f7ff fd5d 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000ba6:	2064      	movs	r0, #100	; 0x64
 8000ba8:	f7ff fd6a 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f7ff fd67 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000bb2:	2012      	movs	r0, #18
 8000bb4:	f7ff fd64 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000bb8:	2081      	movs	r0, #129	; 0x81
 8000bba:	f7ff fd61 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000bbe:	20e8      	movs	r0, #232	; 0xe8
 8000bc0:	f7ff fd4e 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000bc4:	2085      	movs	r0, #133	; 0x85
 8000bc6:	f7ff fd5b 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f7ff fd58 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000bd0:	207a      	movs	r0, #122	; 0x7a
 8000bd2:	f7ff fd55 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000bd6:	20cb      	movs	r0, #203	; 0xcb
 8000bd8:	f7ff fd42 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000bdc:	2039      	movs	r0, #57	; 0x39
 8000bde:	f7ff fd4f 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000be2:	202c      	movs	r0, #44	; 0x2c
 8000be4:	f7ff fd4c 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fd49 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000bee:	2034      	movs	r0, #52	; 0x34
 8000bf0:	f7ff fd46 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fd43 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000bfa:	20f7      	movs	r0, #247	; 0xf7
 8000bfc:	f7ff fd30 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000c00:	2020      	movs	r0, #32
 8000c02:	f7ff fd3d 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000c06:	20ea      	movs	r0, #234	; 0xea
 8000c08:	f7ff fd2a 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd37 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fd34 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000c18:	20c0      	movs	r0, #192	; 0xc0
 8000c1a:	f7ff fd21 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000c1e:	201b      	movs	r0, #27
 8000c20:	f7ff fd2e 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000c24:	20c1      	movs	r0, #193	; 0xc1
 8000c26:	f7ff fd1b 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff fd28 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000c30:	20c5      	movs	r0, #197	; 0xc5
 8000c32:	f7ff fd15 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000c36:	2030      	movs	r0, #48	; 0x30
 8000c38:	f7ff fd22 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000c3c:	2030      	movs	r0, #48	; 0x30
 8000c3e:	f7ff fd1f 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000c42:	20c7      	movs	r0, #199	; 0xc7
 8000c44:	f7ff fd0c 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000c48:	20b7      	movs	r0, #183	; 0xb7
 8000c4a:	f7ff fd19 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f7ff fd06 	bl	8000660 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000c54:	2008      	movs	r0, #8
 8000c56:	f7ff fd13 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000c5a:	203a      	movs	r0, #58	; 0x3a
 8000c5c:	f7ff fd00 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000c60:	2055      	movs	r0, #85	; 0x55
 8000c62:	f7ff fd0d 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000c66:	20b1      	movs	r0, #177	; 0xb1
 8000c68:	f7ff fcfa 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fd07 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000c72:	201a      	movs	r0, #26
 8000c74:	f7ff fd04 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000c78:	20b6      	movs	r0, #182	; 0xb6
 8000c7a:	f7ff fcf1 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000c7e:	200a      	movs	r0, #10
 8000c80:	f7ff fcfe 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000c84:	20a2      	movs	r0, #162	; 0xa2
 8000c86:	f7ff fcfb 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000c8a:	20f2      	movs	r0, #242	; 0xf2
 8000c8c:	f7ff fce8 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fcf5 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000c96:	2026      	movs	r0, #38	; 0x26
 8000c98:	f7ff fce2 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fcef 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000ca2:	20e0      	movs	r0, #224	; 0xe0
 8000ca4:	f7ff fcdc 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000ca8:	200f      	movs	r0, #15
 8000caa:	f7ff fce9 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000cae:	202a      	movs	r0, #42	; 0x2a
 8000cb0:	f7ff fce6 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000cb4:	2028      	movs	r0, #40	; 0x28
 8000cb6:	f7ff fce3 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000cba:	2008      	movs	r0, #8
 8000cbc:	f7ff fce0 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000cc0:	200e      	movs	r0, #14
 8000cc2:	f7ff fcdd 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000cc6:	2008      	movs	r0, #8
 8000cc8:	f7ff fcda 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000ccc:	2054      	movs	r0, #84	; 0x54
 8000cce:	f7ff fcd7 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000cd2:	20a9      	movs	r0, #169	; 0xa9
 8000cd4:	f7ff fcd4 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000cd8:	2043      	movs	r0, #67	; 0x43
 8000cda:	f7ff fcd1 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f7ff fcce 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ce4:	200f      	movs	r0, #15
 8000ce6:	f7ff fccb 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff fcc8 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff fcc5 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff fcc2 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fcbf 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000d02:	20e1      	movs	r0, #225	; 0xe1
 8000d04:	f7ff fcac 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fcb9 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000d0e:	2015      	movs	r0, #21
 8000d10:	f7ff fcb6 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000d14:	2017      	movs	r0, #23
 8000d16:	f7ff fcb3 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f7ff fcb0 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000d20:	2011      	movs	r0, #17
 8000d22:	f7ff fcad 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000d26:	2006      	movs	r0, #6
 8000d28:	f7ff fcaa 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000d2c:	202b      	movs	r0, #43	; 0x2b
 8000d2e:	f7ff fca7 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000d32:	2056      	movs	r0, #86	; 0x56
 8000d34:	f7ff fca4 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000d38:	203c      	movs	r0, #60	; 0x3c
 8000d3a:	f7ff fca1 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f7ff fc9e 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d44:	2010      	movs	r0, #16
 8000d46:	f7ff fc9b 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f7ff fc98 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000d50:	203f      	movs	r0, #63	; 0x3f
 8000d52:	f7ff fc95 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000d56:	203f      	movs	r0, #63	; 0x3f
 8000d58:	f7ff fc92 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d5c:	200f      	movs	r0, #15
 8000d5e:	f7ff fc8f 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000d62:	202b      	movs	r0, #43	; 0x2b
 8000d64:	f7ff fc7c 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fc89 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fc86 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fc83 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000d7a:	203f      	movs	r0, #63	; 0x3f
 8000d7c:	f7ff fc80 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000d80:	202a      	movs	r0, #42	; 0x2a
 8000d82:	f7ff fc6d 	bl	8000660 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fc7a 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fc77 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fc74 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000d98:	20ef      	movs	r0, #239	; 0xef
 8000d9a:	f7ff fc71 	bl	8000680 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000d9e:	2011      	movs	r0, #17
 8000da0:	f7ff fc5e 	bl	8000660 <LCD_WR_REG>
	HAL_Delay(120);
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f001 fa87 	bl	80022b8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000daa:	2029      	movs	r0, #41	; 0x29
 8000dac:	f7ff fc58 	bl	8000660 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <lcd_init+0x2bc>)
 8000db8:	f001 fd50 	bl	800285c <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	20000068 	.word	0x20000068
 8000dc8:	40020000 	.word	0x40020000

08000dcc <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b298      	uxth	r0, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	8b3a      	ldrh	r2, [r7, #24]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff fce3 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	b298      	uxth	r0, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	8b3a      	ldrh	r2, [r7, #24]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fcd3 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	b298      	uxth	r0, r3
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	8b3a      	ldrh	r2, [r7, #24]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fcc3 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	b298      	uxth	r0, r3
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	8b3a      	ldrh	r2, [r7, #24]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fcb3 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	4413      	add	r3, r2
 8000e64:	b298      	uxth	r0, r3
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	8b3a      	ldrh	r2, [r7, #24]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fca3 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b298      	uxth	r0, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	8b3a      	ldrh	r2, [r7, #24]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fc93 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b298      	uxth	r0, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	8b3a      	ldrh	r2, [r7, #24]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fc83 	bl	80007c0 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	b298      	uxth	r0, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	8b3a      	ldrh	r2, [r7, #24]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fc73 	bl	80007c0 <lcd_DrawPoint>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b08a      	sub	sp, #40	; 0x28
 8000ee6:	af02      	add	r7, sp, #8
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	f1c3 0303 	rsb	r3, r3, #3
 8000f02:	613b      	str	r3, [r7, #16]


	if (fill)
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d04f      	beq.n	8000faa <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8000f0a:	e029      	b.n	8000f60 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e00a      	b.n	8000f28 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff ff55 	bl	8000dcc <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	ddf0      	ble.n	8000f12 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da06      	bge.n	8000f44 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	009a      	lsls	r2, r3, #2
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3306      	adds	r3, #6
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e00a      	b.n	8000f5a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	009a      	lsls	r2, r3, #2
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4413      	add	r3, r2
 8000f50:	330a      	adds	r3, #10
 8000f52:	613b      	str	r3, [r7, #16]
				y--;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	ddd1      	ble.n	8000f0c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8000f68:	e023      	b.n	8000fb2 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ff29 	bl	8000dcc <_draw_circle_8>
			if (d < 0) {
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da06      	bge.n	8000f8e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	009a      	lsls	r2, r3, #2
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4413      	add	r3, r2
 8000f88:	3306      	adds	r3, #6
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e00a      	b.n	8000fa4 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4413      	add	r3, r2
 8000f9a:	330a      	adds	r3, #10
 8000f9c:	613b      	str	r3, [r7, #16]
				y--;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
			x++;
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dddb      	ble.n	8000f6a <lcd_DrawCircle+0x88>
}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	60ba      	str	r2, [r7, #8]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	81fb      	strh	r3, [r7, #14]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	81bb      	strh	r3, [r7, #12]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8000fda:	e048      	b.n	800106e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d145      	bne.n	800106e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8000fe2:	89fa      	ldrh	r2, [r7, #14]
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <lcd_ShowStr+0xc4>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fee:	085b      	lsrs	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	1acb      	subs	r3, r1, r3
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dc3f      	bgt.n	8001078 <lcd_ShowStr+0xbc>
 8000ff8:	89ba      	ldrh	r2, [r7, #12]
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <lcd_ShowStr+0xc4>)
 8000ffc:	885b      	ldrh	r3, [r3, #2]
 8000ffe:	4619      	mov	r1, r3
 8001000:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001004:	1acb      	subs	r3, r1, r3
 8001006:	429a      	cmp	r2, r3
 8001008:	dc36      	bgt.n	8001078 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b80      	cmp	r3, #128	; 0x80
 8001010:	d902      	bls.n	8001018 <lcd_ShowStr+0x5c>
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
 8001016:	e02a      	b.n	800106e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b0d      	cmp	r3, #13
 800101e:	d10b      	bne.n	8001038 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001020:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001024:	b29a      	uxth	r2, r3
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	4413      	add	r3, r2
 800102a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800102c:	8abb      	ldrh	r3, [r7, #20]
 800102e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	3301      	adds	r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	e017      	b.n	8001068 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	88fc      	ldrh	r4, [r7, #6]
 800103e:	89b9      	ldrh	r1, [r7, #12]
 8001040:	89f8      	ldrh	r0, [r7, #14]
 8001042:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4623      	mov	r3, r4
 8001054:	f7ff fbcc 	bl	80007f0 <lcd_ShowChar>
					x+=sizey/2;
 8001058:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	b29a      	uxth	r2, r3
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	4413      	add	r3, r2
 8001066:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3301      	adds	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1b2      	bne.n	8000fdc <lcd_ShowStr+0x20>
 8001076:	e000      	b.n	800107a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001078:	bf00      	nop
			}
		}
	}
}
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	20000068 	.word	0x20000068

08001084 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	2140      	movs	r1, #64	; 0x40
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <led7_init+0x14>)
 800108e:	f001 fbe5 	bl	800285c <HAL_GPIO_WritePin>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021800 	.word	0x40021800

0800109c <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <led7_Scan+0x104>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <led7_Scan+0x104>)
 80010aa:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80010ac:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <led7_Scan+0x108>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <led7_Scan+0x10c>)
 80010b4:	5c9b      	ldrb	r3, [r3, r2]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <led7_Scan+0x104>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <led7_Scan+0x104>)
 80010c8:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <led7_Scan+0x108>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d846      	bhi.n	8001160 <led7_Scan+0xc4>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <led7_Scan+0x3c>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	080010e9 	.word	0x080010e9
 80010dc:	08001107 	.word	0x08001107
 80010e0:	08001125 	.word	0x08001125
 80010e4:	08001143 	.word	0x08001143
	case 0:
		spi_buffer |= 0x00b0;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <led7_Scan+0x104>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <led7_Scan+0x104>)
 80010f4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <led7_Scan+0x104>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <led7_Scan+0x104>)
 8001102:	801a      	strh	r2, [r3, #0]
		break;
 8001104:	e02d      	b.n	8001162 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <led7_Scan+0x104>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <led7_Scan+0x104>)
 8001112:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001114:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <led7_Scan+0x104>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f023 0320 	bic.w	r3, r3, #32
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <led7_Scan+0x104>)
 8001120:	801a      	strh	r2, [r3, #0]
		break;
 8001122:	e01e      	b.n	8001162 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <led7_Scan+0x104>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <led7_Scan+0x104>)
 8001130:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <led7_Scan+0x104>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	f023 0310 	bic.w	r3, r3, #16
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <led7_Scan+0x104>)
 800113e:	801a      	strh	r2, [r3, #0]
		break;
 8001140:	e00f      	b.n	8001162 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <led7_Scan+0x104>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <led7_Scan+0x104>)
 800114e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <led7_Scan+0x104>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <led7_Scan+0x104>)
 800115c:	801a      	strh	r2, [r3, #0]
		break;
 800115e:	e000      	b.n	8001162 <led7_Scan+0xc6>
	default:
		break;
 8001160:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <led7_Scan+0x108>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	425a      	negs	r2, r3
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	bf58      	it	pl
 8001174:	4253      	negpl	r3, r2
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <led7_Scan+0x108>)
 800117a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <led7_Scan+0x110>)
 8001182:	f001 fb6b 	bl	800285c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001186:	2301      	movs	r3, #1
 8001188:	2202      	movs	r2, #2
 800118a:	4905      	ldr	r1, [pc, #20]	; (80011a0 <led7_Scan+0x104>)
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <led7_Scan+0x114>)
 800118e:	f002 f86c 	bl	800326a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <led7_Scan+0x110>)
 8001198:	f001 fb60 	bl	800285c <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000004 	.word	0x20000004
 80011a4:	2000006e 	.word	0x2000006e
 80011a8:	20000000 	.word	0x20000000
 80011ac:	40021800 	.word	0x40021800
 80011b0:	20000070 	.word	0x20000070

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f001 f80b 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f8c1 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 f9ab 	bl	800151c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011c6:	f000 f95d 	bl	8001484 <MX_TIM2_Init>
  MX_SPI1_Init();
 80011ca:	f000 f925 	bl	8001418 <MX_SPI1_Init>
  MX_FSMC_Init();
 80011ce:	f000 fa9d 	bl	800170c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80011d2:	f000 fb15 	bl	8001800 <system_init>
  lcd_Clear(WHITE);
 80011d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011da:	f7ff fabf 	bl	800075c <lcd_Clear>
  uint16_t currentMode = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	82fb      	strh	r3, [r7, #22]
  char *modes[] = { "NORMAL", "RED_CONFIG", "GREEN_CONFIG", "YELLOW_CONFIG" };
 80011e2:	4b54      	ldr	r3, [pc, #336]	; (8001334 <main+0x180>)
 80011e4:	463c      	mov	r4, r7
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint16_t cycle = 10;
 80011ec:	230a      	movs	r3, #10
 80011ee:	82bb      	strh	r3, [r7, #20]
  uint16_t newCycle = cycle;
 80011f0:	8abb      	ldrh	r3, [r7, #20]
 80011f2:	827b      	strh	r3, [r7, #18]
  uint8_t confirmChangeCycle = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	747b      	strb	r3, [r7, #17]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(!flag_timer2);
 80011f8:	bf00      	nop
 80011fa:	4b4f      	ldr	r3, [pc, #316]	; (8001338 <main+0x184>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0fb      	beq.n	80011fa <main+0x46>
	  flag_timer2 = 0;
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <main+0x184>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001208:	f7ff f968 	bl	80004dc <button_Scan>
	  if (button_count[0]%20 == 1 ) {
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <main+0x188>)
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <main+0x18c>)
 8001212:	fba3 1302 	umull	r1, r3, r3, r2
 8001216:	0919      	lsrs	r1, r3, #4
 8001218:	460b      	mov	r3, r1
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29b      	uxth	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d10b      	bne.n	8001240 <main+0x8c>
		  currentMode = (currentMode + 1) % 4;
 8001228:	8afb      	ldrh	r3, [r7, #22]
 800122a:	3301      	adds	r3, #1
 800122c:	425a      	negs	r2, r3
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	bf58      	it	pl
 8001238:	4253      	negpl	r3, r2
 800123a:	82fb      	strh	r3, [r7, #22]
		  confirmChangeCycle = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	747b      	strb	r3, [r7, #17]
	  }
	  if (currentMode != 0) {
 8001240:	8afb      	ldrh	r3, [r7, #22]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d045      	beq.n	80012d2 <main+0x11e>


		  if (button_count[1]%20 == 1) {
 8001246:	4b3d      	ldr	r3, [pc, #244]	; (800133c <main+0x188>)
 8001248:	885a      	ldrh	r2, [r3, #2]
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <main+0x18c>)
 800124c:	fba3 1302 	umull	r1, r3, r3, r2
 8001250:	0919      	lsrs	r1, r3, #4
 8001252:	460b      	mov	r3, r1
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <main+0xc0>
			  if (newCycle >= 99)
 8001262:	8a7b      	ldrh	r3, [r7, #18]
 8001264:	2b62      	cmp	r3, #98	; 0x62
 8001266:	d902      	bls.n	800126e <main+0xba>
				  newCycle = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	827b      	strh	r3, [r7, #18]
 800126c:	e002      	b.n	8001274 <main+0xc0>
			  else newCycle++;
 800126e:	8a7b      	ldrh	r3, [r7, #18]
 8001270:	3301      	adds	r3, #1
 8001272:	827b      	strh	r3, [r7, #18]

		  }
		  if (button_count[3]%20 == 1) {
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <main+0x188>)
 8001276:	88da      	ldrh	r2, [r3, #6]
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <main+0x18c>)
 800127a:	fba3 1302 	umull	r1, r3, r3, r2
 800127e:	0919      	lsrs	r1, r3, #4
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d108      	bne.n	80012a2 <main+0xee>
			  if (newCycle <= 0)
 8001290:	8a7b      	ldrh	r3, [r7, #18]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <main+0xe8>
				  newCycle = 99;
 8001296:	2363      	movs	r3, #99	; 0x63
 8001298:	827b      	strh	r3, [r7, #18]
 800129a:	e002      	b.n	80012a2 <main+0xee>
			  else newCycle--;
 800129c:	8a7b      	ldrh	r3, [r7, #18]
 800129e:	3b01      	subs	r3, #1
 80012a0:	827b      	strh	r3, [r7, #18]
		  }

		  if (button_count[2]%20 == 1){
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <main+0x188>)
 80012a4:	889a      	ldrh	r2, [r3, #4]
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <main+0x18c>)
 80012a8:	fba3 1302 	umull	r1, r3, r3, r2
 80012ac:	0919      	lsrs	r1, r3, #4
 80012ae:	460b      	mov	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d109      	bne.n	80012d2 <main+0x11e>
			  cycle = newCycle;
 80012be:	8a7b      	ldrh	r3, [r7, #18]
 80012c0:	82bb      	strh	r3, [r7, #20]
			  traffic_init(currentMode,cycle);
 80012c2:	8aba      	ldrh	r2, [r7, #20]
 80012c4:	8afb      	ldrh	r3, [r7, #22]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fbd9 	bl	8001a80 <traffic_init>
			  confirmChangeCycle = 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	747b      	strb	r3, [r7, #17]
		  }


	  }
	  run_traffic();
 80012d2:	f000 fc65 	bl	8001ba0 <run_traffic>
	  lcd_ShowStr(30, 50, modes[currentMode], WHITE, RED, 24,0);
 80012d6:	8afb      	ldrh	r3, [r7, #22]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3318      	adds	r3, #24
 80012dc:	443b      	add	r3, r7
 80012de:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2318      	movs	r3, #24
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f4:	2132      	movs	r1, #50	; 0x32
 80012f6:	201e      	movs	r0, #30
 80012f8:	f7ff fe60 	bl	8000fbc <lcd_ShowStr>


	  lcd_ShowIntNum(30, 180, cycle, 2, WHITE, BLUE, 32);
 80012fc:	8aba      	ldrh	r2, [r7, #20]
 80012fe:	2320      	movs	r3, #32
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	231f      	movs	r3, #31
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	21b4      	movs	r1, #180	; 0xb4
 8001310:	201e      	movs	r0, #30
 8001312:	f7ff fb59 	bl	80009c8 <lcd_ShowIntNum>
	  lcd_ShowIntNum(30, 160, newCycle, 2, WHITE, BLUE, 32);
 8001316:	8a7a      	ldrh	r2, [r7, #18]
 8001318:	2320      	movs	r3, #32
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	231f      	movs	r3, #31
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2302      	movs	r3, #2
 8001328:	21a0      	movs	r1, #160	; 0xa0
 800132a:	201e      	movs	r0, #30
 800132c:	f7ff fb4c 	bl	80009c8 <lcd_ShowIntNum>
	  while(!flag_timer2);
 8001330:	e762      	b.n	80011f8 <main+0x44>
 8001332:	bf00      	nop
 8001334:	080048cc 	.word	0x080048cc
 8001338:	20000160 	.word	0x20000160
 800133c:	20000040 	.word	0x20000040
 8001340:	cccccccd 	.word	0xcccccccd

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fa68 	bl	8004828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <SystemClock_Config+0xcc>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <SystemClock_Config+0xcc>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <SystemClock_Config+0xcc>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <SystemClock_Config+0xd0>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <SystemClock_Config+0xd0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a8:	2310      	movs	r3, #16
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b4:	2308      	movs	r3, #8
 80013b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013b8:	23a8      	movs	r3, #168	; 0xa8
 80013ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f001 fa61 	bl	8002890 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013d4:	f000 fa23 	bl	800181e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2302      	movs	r3, #2
 80013de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80013ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2105      	movs	r1, #5
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fcc2 	bl	8002d80 <HAL_RCC_ClockConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001402:	f000 fa0c 	bl	800181e <Error_Handler>
  }
}
 8001406:	bf00      	nop
 8001408:	3750      	adds	r7, #80	; 0x50
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_SPI1_Init+0x64>)
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <MX_SPI1_Init+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_SPI1_Init+0x64>)
 8001424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_SPI1_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_SPI1_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_SPI1_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_SPI1_Init+0x64>)
 8001444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_SPI1_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <MX_SPI1_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_SPI1_Init+0x64>)
 8001464:	220a      	movs	r2, #10
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_SPI1_Init+0x64>)
 800146a:	f001 fe75 	bl	8003158 <HAL_SPI_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001474:	f000 f9d3 	bl	800181e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000070 	.word	0x20000070
 8001480:	40013000 	.word	0x40013000

08001484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM2_Init+0x94>)
 80014a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_TIM2_Init+0x94>)
 80014aa:	f240 3247 	movw	r2, #839	; 0x347
 80014ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM2_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_TIM2_Init+0x94>)
 80014b8:	2263      	movs	r2, #99	; 0x63
 80014ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_TIM2_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <MX_TIM2_Init+0x94>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c8:	4813      	ldr	r0, [pc, #76]	; (8001518 <MX_TIM2_Init+0x94>)
 80014ca:	f002 fc5f 	bl	8003d8c <HAL_TIM_Base_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014d4:	f000 f9a3 	bl	800181e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <MX_TIM2_Init+0x94>)
 80014e6:	f002 fe01 	bl	80040ec <HAL_TIM_ConfigClockSource>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014f0:	f000 f995 	bl	800181e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	4619      	mov	r1, r3
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_TIM2_Init+0x94>)
 8001502:	f003 f829 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800150c:	f000 f987 	bl	800181e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000c8 	.word	0x200000c8

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b6c      	ldr	r3, [pc, #432]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a67      	ldr	r2, [pc, #412]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a60      	ldr	r2, [pc, #384]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b5e      	ldr	r3, [pc, #376]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a59      	ldr	r2, [pc, #356]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <MX_GPIO_Init+0x1d8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2170      	movs	r1, #112	; 0x70
 80015fa:	483f      	ldr	r0, [pc, #252]	; (80016f8 <MX_GPIO_Init+0x1dc>)
 80015fc:	f001 f92e 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001606:	483d      	ldr	r0, [pc, #244]	; (80016fc <MX_GPIO_Init+0x1e0>)
 8001608:	f001 f928 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	483b      	ldr	r0, [pc, #236]	; (8001700 <MX_GPIO_Init+0x1e4>)
 8001612:	f001 f923 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161c:	4839      	ldr	r0, [pc, #228]	; (8001704 <MX_GPIO_Init+0x1e8>)
 800161e:	f001 f91d 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2108      	movs	r1, #8
 8001626:	4838      	ldr	r0, [pc, #224]	; (8001708 <MX_GPIO_Init+0x1ec>)
 8001628:	f001 f918 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800162c:	2370      	movs	r3, #112	; 0x70
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	482d      	ldr	r0, [pc, #180]	; (80016f8 <MX_GPIO_Init+0x1dc>)
 8001644:	f000 ff6e 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4826      	ldr	r0, [pc, #152]	; (80016fc <MX_GPIO_Init+0x1e0>)
 8001662:	f000 ff5f 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001666:	23c0      	movs	r3, #192	; 0xc0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	4822      	ldr	r0, [pc, #136]	; (8001704 <MX_GPIO_Init+0x1e8>)
 800167a:	f000 ff53 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X2_Pin INPUT_X3_Pin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800167e:	2330      	movs	r3, #48	; 0x30
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	481a      	ldr	r0, [pc, #104]	; (80016fc <MX_GPIO_Init+0x1e0>)
 8001692:	f000 ff47 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001696:	2340      	movs	r3, #64	; 0x40
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_GPIO_Init+0x1e4>)
 80016ae:	f000 ff39 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <MX_GPIO_Init+0x1e8>)
 80016cc:	f000 ff2a 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80016d0:	2308      	movs	r3, #8
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4808      	ldr	r0, [pc, #32]	; (8001708 <MX_GPIO_Init+0x1ec>)
 80016e8:	f000 ff1c 	bl	8002524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40020800 	.word	0x40020800
 8001700:	40021800 	.word	0x40021800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020c00 	.word	0x40020c00

0800170c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <MX_FSMC_Init+0xec>)
 800173a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800173e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001742:	4a2e      	ldr	r2, [pc, #184]	; (80017fc <MX_FSMC_Init+0xf0>)
 8001744:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_FSMC_Init+0xec>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MX_FSMC_Init+0xec>)
 800175a:	2210      	movs	r2, #16
 800175c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MX_FSMC_Init+0xec>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001780:	2200      	movs	r2, #0
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_FSMC_Init+0xec>)
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_FSMC_Init+0xec>)
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_FSMC_Init+0xec>)
 800179a:	2200      	movs	r2, #0
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800179e:	230f      	movs	r3, #15
 80017a0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80017a2:	230f      	movs	r3, #15
 80017a4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80017a6:	233c      	movs	r3, #60	; 0x3c
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80017ae:	2310      	movs	r3, #16
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80017b2:	2311      	movs	r3, #17
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80017ba:	2308      	movs	r3, #8
 80017bc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80017be:	230f      	movs	r3, #15
 80017c0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80017c2:	2309      	movs	r3, #9
 80017c4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80017ca:	2310      	movs	r3, #16
 80017cc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80017ce:	2311      	movs	r3, #17
 80017d0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80017d6:	463a      	mov	r2, r7
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MX_FSMC_Init+0xec>)
 80017e0:	f002 fa8c 	bl	8003cfc <HAL_SRAM_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80017ea:	f000 f818 	bl	800181e <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80017ee:	bf00      	nop
 80017f0:	3738      	adds	r7, #56	; 0x38
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000110 	.word	0x20000110
 80017fc:	a0000104 	.word	0xa0000104

08001800 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	button_init();
 8001804:	f7fe fe5e 	bl	80004c4 <button_init>
	lcd_init();
 8001808:	f7ff f980 	bl	8000b0c <lcd_init>
	led7_init();
 800180c:	f7ff fc3a 	bl	8001084 <led7_init>
	timer_init();
 8001810:	f000 f80a 	bl	8001828 <timer_init>
	setTimer2(50);
 8001814:	2032      	movs	r0, #50	; 0x32
 8001816:	f000 f811 	bl	800183c <setTimer2>
	//setTimer3(500);
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}

0800181e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001822:	b672      	cpsid	i
}
 8001824:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001826:	e7fe      	b.n	8001826 <Error_Handler+0x8>

08001828 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <timer_init+0x10>)
 800182e:	f002 fafd 	bl	8003e2c <HAL_TIM_Base_Start_IT>
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200000c8 	.word	0x200000c8

0800183c <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <setTimer2+0x2c>)
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <setTimer2+0x2c>)
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <setTimer2+0x30>)
 8001852:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <setTimer2+0x34>)
 8001856:	2200      	movs	r2, #0
 8001858:	801a      	strh	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000164 	.word	0x20000164
 800186c:	20000162 	.word	0x20000162
 8001870:	20000160 	.word	0x20000160

08001874 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001884:	d116      	bne.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d010      	beq.n	80018b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001898:	801a      	strh	r2, [r3, #0]
			if(timer2_counter <= 0) {
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018aa:	881a      	ldrh	r2, [r3, #0]
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018ae:	801a      	strh	r2, [r3, #0]
//				flag_timer3 = 1;
//				timer3_counter = timer3_MUL;
//			}
//		}
		// 1ms interrupt here
		led7_Scan();
 80018b0:	f7ff fbf4 	bl	800109c <led7_Scan>
	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000162 	.word	0x20000162
 80018c0:	20000160 	.word	0x20000160
 80018c4:	20000164 	.word	0x20000164

080018c8 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_SPI_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12b      	bne.n	8001942 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_SPI_MspInit+0x88>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_SPI_MspInit+0x88>)
 80018f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_SPI_MspInit+0x88>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_SPI_MspInit+0x88>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_SPI_MspInit+0x88>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_SPI_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001922:	2338      	movs	r3, #56	; 0x38
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001932:	2305      	movs	r3, #5
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_SPI_MspInit+0x8c>)
 800193e:	f000 fdf1 	bl	8002524 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40013000 	.word	0x40013000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020400 	.word	0x40020400

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 fc40 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM2_IRQHandler+0x10>)
 8001a02:	f002 fa83 	bl	8003f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000c8 	.word	0x200000c8

08001a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <SystemInit+0x20>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SystemInit+0x20>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM2_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d115      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201c      	movs	r0, #28
 8001a68:	f000 fd25 	bl	80024b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f000 fd3e 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <traffic_init>:
uint16_t yellowCycle = 2;
uint16_t counter = 5;
uint16_t light = 7;
uint8_t count_LED_debug = 0;
uint8_t ledState = 0;
void traffic_init (uint16_t curMode,uint16_t cycle) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	460a      	mov	r2, r1
 8001a8a:	80fb      	strh	r3, [r7, #6]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	80bb      	strh	r3, [r7, #4]
	if (curMode == 0) {
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d114      	bne.n	8001ac0 <traffic_init+0x40>
		currentMode = NORMAL;
 8001a96:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <traffic_init+0x100>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
		defaultCounter = 5;
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <traffic_init+0x104>)
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	801a      	strh	r2, [r3, #0]
		defaultLight = 7;
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <traffic_init+0x108>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	801a      	strh	r2, [r3, #0]
		redCycle = 7;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <traffic_init+0x10c>)
 8001aaa:	2207      	movs	r2, #7
 8001aac:	801a      	strh	r2, [r3, #0]
		greenCycle = 5;
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <traffic_init+0x110>)
 8001ab0:	2205      	movs	r2, #5
 8001ab2:	801a      	strh	r2, [r3, #0]
		counter = 5;
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <traffic_init+0x114>)
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	801a      	strh	r2, [r3, #0]
		light = 7;
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <traffic_init+0x118>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	801a      	strh	r2, [r3, #0]
	}
	if (curMode == 1) {
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d11a      	bne.n	8001afc <traffic_init+0x7c>
		currentMode = RED_CONFIG;
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <traffic_init+0x100>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
		redCycle = cycle;
 8001acc:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <traffic_init+0x10c>)
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	8013      	strh	r3, [r2, #0]
		defaultLight = redCycle;
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <traffic_init+0x10c>)
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <traffic_init+0x108>)
 8001ad8:	801a      	strh	r2, [r3, #0]
		defaultCounter = defaultLight - yellowCycle;
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <traffic_init+0x108>)
 8001adc:	881a      	ldrh	r2, [r3, #0]
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <traffic_init+0x11c>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <traffic_init+0x104>)
 8001ae8:	801a      	strh	r2, [r3, #0]
		light = defaultLight;
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <traffic_init+0x108>)
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <traffic_init+0x118>)
 8001af0:	801a      	strh	r2, [r3, #0]
		counter = defaultCounter;
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <traffic_init+0x104>)
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <traffic_init+0x114>)
 8001af8:	801a      	strh	r2, [r3, #0]
		light = defaultLight;
		counter = defaultCounter;
		//lcd_ShowIntNum(160, 160, defaultLight, 2, WHITE, BLUE, 32);
	}

}
 8001afa:	e03a      	b.n	8001b72 <traffic_init+0xf2>
	} else if (curMode == 2) {
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d11a      	bne.n	8001b38 <traffic_init+0xb8>
		currentMode = GREEN_CONFIG;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <traffic_init+0x100>)
 8001b04:	2203      	movs	r2, #3
 8001b06:	701a      	strb	r2, [r3, #0]
		greenCycle = cycle;
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <traffic_init+0x110>)
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	8013      	strh	r3, [r2, #0]
		defaultLight = greenCycle + yellowCycle;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <traffic_init+0x110>)
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <traffic_init+0x11c>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <traffic_init+0x108>)
 8001b1c:	801a      	strh	r2, [r3, #0]
		defaultCounter = greenCycle;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <traffic_init+0x110>)
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <traffic_init+0x104>)
 8001b24:	801a      	strh	r2, [r3, #0]
		light = defaultLight;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <traffic_init+0x108>)
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <traffic_init+0x118>)
 8001b2c:	801a      	strh	r2, [r3, #0]
		counter = defaultCounter;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <traffic_init+0x104>)
 8001b30:	881a      	ldrh	r2, [r3, #0]
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <traffic_init+0x114>)
 8001b34:	801a      	strh	r2, [r3, #0]
}
 8001b36:	e01c      	b.n	8001b72 <traffic_init+0xf2>
	} else if (curMode == 3) {
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d119      	bne.n	8001b72 <traffic_init+0xf2>
		currentMode = YELLOW_CONFIG;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <traffic_init+0x100>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	701a      	strb	r2, [r3, #0]
		yellowCycle = cycle;
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <traffic_init+0x11c>)
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	8013      	strh	r3, [r2, #0]
		defaultLight = greenCycle + yellowCycle;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <traffic_init+0x110>)
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <traffic_init+0x11c>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <traffic_init+0x108>)
 8001b58:	801a      	strh	r2, [r3, #0]
		defaultCounter = greenCycle;
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <traffic_init+0x110>)
 8001b5c:	881a      	ldrh	r2, [r3, #0]
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <traffic_init+0x104>)
 8001b60:	801a      	strh	r2, [r3, #0]
		light = defaultLight;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <traffic_init+0x108>)
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <traffic_init+0x118>)
 8001b68:	801a      	strh	r2, [r3, #0]
		counter = defaultCounter;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <traffic_init+0x104>)
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <traffic_init+0x114>)
 8001b70:	801a      	strh	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000166 	.word	0x20000166
 8001b84:	2000000c 	.word	0x2000000c
 8001b88:	2000000e 	.word	0x2000000e
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	20000012 	.word	0x20000012
 8001b94:	20000016 	.word	0x20000016
 8001b98:	20000018 	.word	0x20000018
 8001b9c:	20000014 	.word	0x20000014

08001ba0 <run_traffic>:
void run_traffic() {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

	count_LED_debug = (count_LED_debug + 1)%20;
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <run_traffic+0x164>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <run_traffic+0x168>)
 8001bac:	fb83 1302 	smull	r1, r3, r3, r2
 8001bb0:	10d9      	asrs	r1, r3, #3
 8001bb2:	17d3      	asrs	r3, r2, #31
 8001bb4:	1ac9      	subs	r1, r1, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	1ad1      	subs	r1, r2, r3
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <run_traffic+0x164>)
 8001bc4:	701a      	strb	r2, [r3, #0]
	if (count_LED_debug%10 == 0) {
 8001bc6:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <run_traffic+0x164>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <run_traffic+0x16c>)
 8001bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd0:	08d9      	lsrs	r1, r3, #3
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <run_traffic+0x50>
		turnOnTrafficLight(currentState);
 8001be2:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <run_traffic+0x170>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f89e 	bl	8001d28 <turnOnTrafficLight>
		displayNumb();
 8001bec:	f000 fa90 	bl	8002110 <displayNumb>
	}
	if(count_LED_debug == 0) {
 8001bf0:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <run_traffic+0x164>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 8082 	bne.w	8001cfe <run_traffic+0x15e>
		//displayNumb(light);
		switch(currentState) {
 8001bfa:	4b45      	ldr	r3, [pc, #276]	; (8001d10 <run_traffic+0x170>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d879      	bhi.n	8001cf6 <run_traffic+0x156>
 8001c02:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <run_traffic+0x68>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c49 	.word	0x08001c49
 8001c10:	08001c81 	.word	0x08001c81
 8001c14:	08001cb1 	.word	0x08001cb1
			case RED1_GREEN2:
				//turnOnTrafficLight(currentState);
				counter--;
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <run_traffic+0x174>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <run_traffic+0x174>)
 8001c22:	801a      	strh	r2, [r3, #0]
				light--;
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <run_traffic+0x178>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <run_traffic+0x178>)
 8001c2e:	801a      	strh	r2, [r3, #0]
				if (counter <= 0) {
 8001c30:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <run_traffic+0x174>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d157      	bne.n	8001ce8 <run_traffic+0x148>
					nextState = RED1_YELLOW2;
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <run_traffic+0x17c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
					counter = light;
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <run_traffic+0x178>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <run_traffic+0x174>)
 8001c44:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001c46:	e04f      	b.n	8001ce8 <run_traffic+0x148>
			case RED1_YELLOW2:
				//turnOnTrafficLight(currentState);
				counter--;
 8001c48:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <run_traffic+0x174>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <run_traffic+0x174>)
 8001c52:	801a      	strh	r2, [r3, #0]
				light--;
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <run_traffic+0x178>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <run_traffic+0x178>)
 8001c5e:	801a      	strh	r2, [r3, #0]
				if (counter <= 0) {
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <run_traffic+0x174>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d141      	bne.n	8001cec <run_traffic+0x14c>
					nextState = GREEN1_RED2;
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <run_traffic+0x17c>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
					counter = defaultLight;
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <run_traffic+0x180>)
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <run_traffic+0x174>)
 8001c74:	801a      	strh	r2, [r3, #0]
					light = defaultCounter;
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <run_traffic+0x184>)
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <run_traffic+0x178>)
 8001c7c:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001c7e:	e035      	b.n	8001cec <run_traffic+0x14c>
			case GREEN1_RED2:
				//turnOnTrafficLight(currentState);
				counter--;
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <run_traffic+0x174>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <run_traffic+0x174>)
 8001c8a:	801a      	strh	r2, [r3, #0]
				light--;
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <run_traffic+0x178>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <run_traffic+0x178>)
 8001c96:	801a      	strh	r2, [r3, #0]
				if (light <= 0) {
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <run_traffic+0x178>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d127      	bne.n	8001cf0 <run_traffic+0x150>
					nextState = YELLOW1_RED2;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <run_traffic+0x17c>)
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	701a      	strb	r2, [r3, #0]
					//counter = defaultLight - defaultCounter;
					light = counter;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <run_traffic+0x174>)
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <run_traffic+0x178>)
 8001cac:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001cae:	e01f      	b.n	8001cf0 <run_traffic+0x150>
			case YELLOW1_RED2:
				//turnOnTrafficLight(currentState);
				counter--;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <run_traffic+0x174>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <run_traffic+0x174>)
 8001cba:	801a      	strh	r2, [r3, #0]
				light--;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <run_traffic+0x178>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <run_traffic+0x178>)
 8001cc6:	801a      	strh	r2, [r3, #0]
				if (counter <= 0) {
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <run_traffic+0x174>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d111      	bne.n	8001cf4 <run_traffic+0x154>
					nextState = RED1_GREEN2;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <run_traffic+0x17c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
					counter = defaultCounter;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <run_traffic+0x184>)
 8001cd8:	881a      	ldrh	r2, [r3, #0]
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <run_traffic+0x174>)
 8001cdc:	801a      	strh	r2, [r3, #0]
					light = defaultLight;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <run_traffic+0x180>)
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <run_traffic+0x178>)
 8001ce4:	801a      	strh	r2, [r3, #0]
				}
				break;
 8001ce6:	e005      	b.n	8001cf4 <run_traffic+0x154>
				break;
 8001ce8:	bf00      	nop
 8001cea:	e004      	b.n	8001cf6 <run_traffic+0x156>
				break;
 8001cec:	bf00      	nop
 8001cee:	e002      	b.n	8001cf6 <run_traffic+0x156>
				break;
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <run_traffic+0x156>
				break;
 8001cf4:	bf00      	nop
		}
		currentState = nextState;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <run_traffic+0x17c>)
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <run_traffic+0x170>)
 8001cfc:	701a      	strb	r2, [r3, #0]
	}

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000169 	.word	0x20000169
 8001d08:	66666667 	.word	0x66666667
 8001d0c:	cccccccd 	.word	0xcccccccd
 8001d10:	20000167 	.word	0x20000167
 8001d14:	20000016 	.word	0x20000016
 8001d18:	20000018 	.word	0x20000018
 8001d1c:	20000168 	.word	0x20000168
 8001d20:	2000000e 	.word	0x2000000e
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <turnOnTrafficLight>:

void turnOnTrafficLight(enum traffic_light lightmode) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]

	if (currentMode != NORMAL) {
 8001d32:	4b9e      	ldr	r3, [pc, #632]	; (8001fac <turnOnTrafficLight+0x284>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <turnOnTrafficLight+0x26>
			ledState = !ledState; // Toggle LED state
 8001d3a:	4b9d      	ldr	r3, [pc, #628]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b99      	ldr	r3, [pc, #612]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001d4c:	701a      	strb	r2, [r3, #0]
	const uint16_t GREEN1_coordinate[2] = {80,250};
	const uint16_t GREEN2_coordinate[2] = {150,200};
	const uint16_t YELLOW1_coordinate[2] = {120,250};
	const uint16_t YELLOW2_coordinate[2] = {150,120};

	switch(lightmode) {
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	f200 81c8 	bhi.w	80020e6 <turnOnTrafficLight+0x3be>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <turnOnTrafficLight+0x34>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001e43 	.word	0x08001e43
 8001d64:	08001f19 	.word	0x08001f19
 8001d68:	08002011 	.word	0x08002011
		case RED1_GREEN2:
			lcd_DrawCircle(RED1_coordinate[0],RED1_coordinate[1], (currentMode==RED_CONFIG) ? (ledState ? RED :WHITE ): RED,10,1);
 8001d6c:	4b91      	ldr	r3, [pc, #580]	; (8001fb4 <turnOnTrafficLight+0x28c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <turnOnTrafficLight+0x28c>)
 8001d74:	885b      	ldrh	r3, [r3, #2]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <turnOnTrafficLight+0x284>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d109      	bne.n	8001d94 <turnOnTrafficLight+0x6c>
 8001d80:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <turnOnTrafficLight+0x66>
 8001d88:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d8c:	e004      	b.n	8001d98 <turnOnTrafficLight+0x70>
 8001d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d92:	e001      	b.n	8001d98 <turnOnTrafficLight+0x70>
 8001d94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	f7ff f8a0 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN1_coordinate[0],GREEN1_coordinate[1],WHITE,10,1);
 8001da2:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <turnOnTrafficLight+0x290>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <turnOnTrafficLight+0x290>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	4619      	mov	r1, r3
 8001dae:	2301      	movs	r3, #1
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	230a      	movs	r3, #10
 8001db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db8:	f7ff f893 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW1_coordinate[0],YELLOW1_coordinate[1],WHITE,10,1);
 8001dbc:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <turnOnTrafficLight+0x294>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <turnOnTrafficLight+0x294>)
 8001dc4:	885b      	ldrh	r3, [r3, #2]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	2301      	movs	r3, #1
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	230a      	movs	r3, #10
 8001dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd2:	f7ff f886 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(RED2_coordinate[0],RED2_coordinate[1],WHITE,10,1);
 8001dd6:	4b7a      	ldr	r3, [pc, #488]	; (8001fc0 <turnOnTrafficLight+0x298>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <turnOnTrafficLight+0x298>)
 8001dde:	885b      	ldrh	r3, [r3, #2]
 8001de0:	4619      	mov	r1, r3
 8001de2:	2301      	movs	r3, #1
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	230a      	movs	r3, #10
 8001de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dec:	f7ff f879 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN2_coordinate[0],GREEN2_coordinate[1],(currentMode==GREEN_CONFIG) ? (ledState ? GREEN :WHITE ): GREEN,10,1);
 8001df0:	4b74      	ldr	r3, [pc, #464]	; (8001fc4 <turnOnTrafficLight+0x29c>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <turnOnTrafficLight+0x29c>)
 8001df8:	885b      	ldrh	r3, [r3, #2]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4b6b      	ldr	r3, [pc, #428]	; (8001fac <turnOnTrafficLight+0x284>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d109      	bne.n	8001e18 <turnOnTrafficLight+0xf0>
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <turnOnTrafficLight+0xea>
 8001e0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001e10:	e004      	b.n	8001e1c <turnOnTrafficLight+0xf4>
 8001e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e16:	e001      	b.n	8001e1c <turnOnTrafficLight+0xf4>
 8001e18:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	230a      	movs	r3, #10
 8001e22:	f7ff f85e 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW2_coordinate[0],YELLOW2_coordinate[1],WHITE,10,1);
 8001e26:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <turnOnTrafficLight+0x2a0>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <turnOnTrafficLight+0x2a0>)
 8001e2e:	885b      	ldrh	r3, [r3, #2]
 8001e30:	4619      	mov	r1, r3
 8001e32:	2301      	movs	r3, #1
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	230a      	movs	r3, #10
 8001e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3c:	f7ff f851 	bl	8000ee2 <lcd_DrawCircle>
			break;
 8001e40:	e151      	b.n	80020e6 <turnOnTrafficLight+0x3be>
		case RED1_YELLOW2:
			lcd_DrawCircle(RED1_coordinate[0],RED1_coordinate[1],(currentMode==RED_CONFIG) ? (ledState ? RED :WHITE ): RED,10,1);
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <turnOnTrafficLight+0x28c>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <turnOnTrafficLight+0x28c>)
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4b57      	ldr	r3, [pc, #348]	; (8001fac <turnOnTrafficLight+0x284>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d109      	bne.n	8001e6a <turnOnTrafficLight+0x142>
 8001e56:	4b56      	ldr	r3, [pc, #344]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <turnOnTrafficLight+0x13c>
 8001e5e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001e62:	e004      	b.n	8001e6e <turnOnTrafficLight+0x146>
 8001e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e68:	e001      	b.n	8001e6e <turnOnTrafficLight+0x146>
 8001e6a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001e6e:	2301      	movs	r3, #1
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	230a      	movs	r3, #10
 8001e74:	f7ff f835 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN1_coordinate[0],GREEN1_coordinate[1],WHITE,10,1);
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <turnOnTrafficLight+0x290>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <turnOnTrafficLight+0x290>)
 8001e80:	885b      	ldrh	r3, [r3, #2]
 8001e82:	4619      	mov	r1, r3
 8001e84:	2301      	movs	r3, #1
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	230a      	movs	r3, #10
 8001e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e8e:	f7ff f828 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW1_coordinate[0],YELLOW1_coordinate[1],WHITE,10,1);
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <turnOnTrafficLight+0x294>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <turnOnTrafficLight+0x294>)
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea8:	f7ff f81b 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(RED2_coordinate[0],RED2_coordinate[1],WHITE,10,1);
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <turnOnTrafficLight+0x298>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <turnOnTrafficLight+0x298>)
 8001eb4:	885b      	ldrh	r3, [r3, #2]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec2:	f7ff f80e 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN2_coordinate[0],GREEN2_coordinate[1],WHITE,10,1);
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <turnOnTrafficLight+0x29c>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <turnOnTrafficLight+0x29c>)
 8001ece:	885b      	ldrh	r3, [r3, #2]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001edc:	f7ff f801 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW2_coordinate[0],YELLOW2_coordinate[1],(currentMode==YELLOW_CONFIG) ? (ledState ? YELLOW :WHITE ): YELLOW,10,1);
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <turnOnTrafficLight+0x2a0>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <turnOnTrafficLight+0x2a0>)
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <turnOnTrafficLight+0x284>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d109      	bne.n	8001f08 <turnOnTrafficLight+0x1e0>
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <turnOnTrafficLight+0x1da>
 8001efc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f00:	e004      	b.n	8001f0c <turnOnTrafficLight+0x1e4>
 8001f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f06:	e001      	b.n	8001f0c <turnOnTrafficLight+0x1e4>
 8001f08:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	230a      	movs	r3, #10
 8001f12:	f7fe ffe6 	bl	8000ee2 <lcd_DrawCircle>
			break;
 8001f16:	e0e6      	b.n	80020e6 <turnOnTrafficLight+0x3be>
		case GREEN1_RED2:
			lcd_DrawCircle(RED1_coordinate[0],RED1_coordinate[1],WHITE,10,1);
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <turnOnTrafficLight+0x28c>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <turnOnTrafficLight+0x28c>)
 8001f20:	885b      	ldrh	r3, [r3, #2]
 8001f22:	4619      	mov	r1, r3
 8001f24:	2301      	movs	r3, #1
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	230a      	movs	r3, #10
 8001f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f2e:	f7fe ffd8 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN1_coordinate[0],GREEN1_coordinate[1],(currentMode==GREEN_CONFIG) ? (ledState ? GREEN :WHITE ): GREEN,10,1);
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <turnOnTrafficLight+0x290>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <turnOnTrafficLight+0x290>)
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <turnOnTrafficLight+0x284>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d109      	bne.n	8001f5a <turnOnTrafficLight+0x232>
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <turnOnTrafficLight+0x22c>
 8001f4e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f52:	e004      	b.n	8001f5e <turnOnTrafficLight+0x236>
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f58:	e001      	b.n	8001f5e <turnOnTrafficLight+0x236>
 8001f5a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	230a      	movs	r3, #10
 8001f64:	f7fe ffbd 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW1_coordinate[0],YELLOW1_coordinate[1],WHITE,10,1);
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <turnOnTrafficLight+0x294>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <turnOnTrafficLight+0x294>)
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	4619      	mov	r1, r3
 8001f74:	2301      	movs	r3, #1
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	230a      	movs	r3, #10
 8001f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7e:	f7fe ffb0 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(RED2_coordinate[0],RED2_coordinate[1],(currentMode==RED_CONFIG) ? (ledState ? RED :WHITE ): RED,10,1);
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <turnOnTrafficLight+0x298>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <turnOnTrafficLight+0x298>)
 8001f8a:	885b      	ldrh	r3, [r3, #2]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <turnOnTrafficLight+0x284>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d11a      	bne.n	8001fcc <turnOnTrafficLight+0x2a4>
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <turnOnTrafficLight+0x288>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <turnOnTrafficLight+0x27c>
 8001f9e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001fa2:	e015      	b.n	8001fd0 <turnOnTrafficLight+0x2a8>
 8001fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa8:	e012      	b.n	8001fd0 <turnOnTrafficLight+0x2a8>
 8001faa:	bf00      	nop
 8001fac:	20000166 	.word	0x20000166
 8001fb0:	2000016a 	.word	0x2000016a
 8001fb4:	0800786c 	.word	0x0800786c
 8001fb8:	08007870 	.word	0x08007870
 8001fbc:	08007874 	.word	0x08007874
 8001fc0:	08007878 	.word	0x08007878
 8001fc4:	0800787c 	.word	0x0800787c
 8001fc8:	08007880 	.word	0x08007880
 8001fcc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	230a      	movs	r3, #10
 8001fd6:	f7fe ff84 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN2_coordinate[0],GREEN2_coordinate[1],WHITE,10,1);
 8001fda:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <turnOnTrafficLight+0x3c8>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <turnOnTrafficLight+0x3c8>)
 8001fe2:	885b      	ldrh	r3, [r3, #2]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	230a      	movs	r3, #10
 8001fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff0:	f7fe ff77 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW2_coordinate[0],YELLOW2_coordinate[1],WHITE,10,1);
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <turnOnTrafficLight+0x3cc>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <turnOnTrafficLight+0x3cc>)
 8001ffc:	885b      	ldrh	r3, [r3, #2]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2301      	movs	r3, #1
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	230a      	movs	r3, #10
 8002006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800200a:	f7fe ff6a 	bl	8000ee2 <lcd_DrawCircle>
			break;
 800200e:	e06a      	b.n	80020e6 <turnOnTrafficLight+0x3be>
		case YELLOW1_RED2:
			lcd_DrawCircle(RED1_coordinate[0],RED1_coordinate[1],WHITE,10,1);
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <turnOnTrafficLight+0x3d0>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <turnOnTrafficLight+0x3d0>)
 8002018:	885b      	ldrh	r3, [r3, #2]
 800201a:	4619      	mov	r1, r3
 800201c:	2301      	movs	r3, #1
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	230a      	movs	r3, #10
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	f7fe ff5c 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN1_coordinate[0],GREEN1_coordinate[1],WHITE,10,1);
 800202a:	4b34      	ldr	r3, [pc, #208]	; (80020fc <turnOnTrafficLight+0x3d4>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <turnOnTrafficLight+0x3d4>)
 8002032:	885b      	ldrh	r3, [r3, #2]
 8002034:	4619      	mov	r1, r3
 8002036:	2301      	movs	r3, #1
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	230a      	movs	r3, #10
 800203c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002040:	f7fe ff4f 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW1_coordinate[0],YELLOW1_coordinate[1],(currentMode==YELLOW_CONFIG) ? (ledState ? YELLOW :WHITE ): YELLOW,10,1);
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <turnOnTrafficLight+0x3d8>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <turnOnTrafficLight+0x3d8>)
 800204c:	885b      	ldrh	r3, [r3, #2]
 800204e:	4619      	mov	r1, r3
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <turnOnTrafficLight+0x3dc>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d109      	bne.n	800206c <turnOnTrafficLight+0x344>
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <turnOnTrafficLight+0x3e0>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <turnOnTrafficLight+0x33e>
 8002060:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002064:	e004      	b.n	8002070 <turnOnTrafficLight+0x348>
 8002066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206a:	e001      	b.n	8002070 <turnOnTrafficLight+0x348>
 800206c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002070:	2301      	movs	r3, #1
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	230a      	movs	r3, #10
 8002076:	f7fe ff34 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(RED2_coordinate[0],RED2_coordinate[1],(currentMode==RED_CONFIG) ? (ledState ? RED :WHITE ): RED,10,1);
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <turnOnTrafficLight+0x3e4>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	4b22      	ldr	r3, [pc, #136]	; (800210c <turnOnTrafficLight+0x3e4>)
 8002082:	885b      	ldrh	r3, [r3, #2]
 8002084:	4619      	mov	r1, r3
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <turnOnTrafficLight+0x3dc>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d109      	bne.n	80020a2 <turnOnTrafficLight+0x37a>
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <turnOnTrafficLight+0x3e0>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <turnOnTrafficLight+0x374>
 8002096:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800209a:	e004      	b.n	80020a6 <turnOnTrafficLight+0x37e>
 800209c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a0:	e001      	b.n	80020a6 <turnOnTrafficLight+0x37e>
 80020a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80020a6:	2301      	movs	r3, #1
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	230a      	movs	r3, #10
 80020ac:	f7fe ff19 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(GREEN2_coordinate[0],GREEN2_coordinate[1],WHITE,10,1);
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <turnOnTrafficLight+0x3c8>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <turnOnTrafficLight+0x3c8>)
 80020b8:	885b      	ldrh	r3, [r3, #2]
 80020ba:	4619      	mov	r1, r3
 80020bc:	2301      	movs	r3, #1
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	230a      	movs	r3, #10
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	f7fe ff0c 	bl	8000ee2 <lcd_DrawCircle>
			lcd_DrawCircle(YELLOW2_coordinate[0],YELLOW2_coordinate[1],WHITE,10,1);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <turnOnTrafficLight+0x3cc>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <turnOnTrafficLight+0x3cc>)
 80020d2:	885b      	ldrh	r3, [r3, #2]
 80020d4:	4619      	mov	r1, r3
 80020d6:	2301      	movs	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	230a      	movs	r3, #10
 80020dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e0:	f7fe feff 	bl	8000ee2 <lcd_DrawCircle>
			break;
 80020e4:	bf00      	nop
	}
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	0800787c 	.word	0x0800787c
 80020f4:	08007880 	.word	0x08007880
 80020f8:	0800786c 	.word	0x0800786c
 80020fc:	08007870 	.word	0x08007870
 8002100:	08007874 	.word	0x08007874
 8002104:	20000166 	.word	0x20000166
 8002108:	2000016a 	.word	0x2000016a
 800210c:	08007878 	.word	0x08007878

08002110 <displayNumb>:
void displayNumb() {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(100, 100, redCycle, 2, WHITE, RED, 32);
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <displayNumb+0x64>)
 8002118:	881a      	ldrh	r2, [r3, #0]
 800211a:	2320      	movs	r3, #32
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2302      	movs	r3, #2
 800212c:	2164      	movs	r1, #100	; 0x64
 800212e:	2064      	movs	r0, #100	; 0x64
 8002130:	f7fe fc4a 	bl	80009c8 <lcd_ShowIntNum>


	lcd_ShowIntNum(40, 280, light, 2, WHITE, BLUE, 32);
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <displayNumb+0x68>)
 8002136:	881a      	ldrh	r2, [r3, #0]
 8002138:	2320      	movs	r3, #32
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	231f      	movs	r3, #31
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2302      	movs	r3, #2
 8002148:	f44f 718c 	mov.w	r1, #280	; 0x118
 800214c:	2028      	movs	r0, #40	; 0x28
 800214e:	f7fe fc3b 	bl	80009c8 <lcd_ShowIntNum>
	lcd_ShowIntNum(180, 160, counter, 2, WHITE, BLUE, 32);
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <displayNumb+0x6c>)
 8002154:	881a      	ldrh	r2, [r3, #0]
 8002156:	2320      	movs	r3, #32
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	231f      	movs	r3, #31
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2302      	movs	r3, #2
 8002166:	21a0      	movs	r1, #160	; 0xa0
 8002168:	20b4      	movs	r0, #180	; 0xb4
 800216a:	f7fe fc2d 	bl	80009c8 <lcd_ShowIntNum>
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000010 	.word	0x20000010
 8002178:	20000018 	.word	0x20000018
 800217c:	20000016 	.word	0x20000016

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002184:	f7ff fc44 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	; (80021cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f002 fb43 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7fe ffff 	bl	80011b4 <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80021c4:	08007894 	.word	0x08007894
  ldr r2, =_sbss
 80021c8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80021cc:	20000170 	.word	0x20000170

080021d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_Init+0x40>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_Init+0x40>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_Init+0x40>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f94f 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	200f      	movs	r0, #15
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fba6 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f967 	bl	800250a <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 f92f 	bl	80024b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000008 	.word	0x20000008
 8002270:	20000020 	.word	0x20000020
 8002274:	2000001c 	.word	0x2000001c

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000020 	.word	0x20000020
 800229c:	2000016c 	.word	0x2000016c

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	2000016c 	.word	0x2000016c

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000020 	.word	0x20000020

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff8e 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff29 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c8:	f7ff ff3e 	bl	8002348 <__NVIC_GetPriorityGrouping>
 80024cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff ff8e 	bl	80023f4 <NVIC_EncodePriority>
 80024d8:	4602      	mov	r2, r0
 80024da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff5d 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff31 	bl	8002364 <__NVIC_EnableIRQ>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffa2 	bl	800245c <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e16b      	b.n	8002818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 815a 	bne.w	8002812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d005      	beq.n	8002576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	2b02      	cmp	r3, #2
 8002574:	d130      	bne.n	80025d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 0201 	and.w	r2, r3, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d017      	beq.n	8002614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d123      	bne.n	8002668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	69b9      	ldr	r1, [r7, #24]
 8002664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80b4 	beq.w	8002812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b60      	ldr	r3, [pc, #384]	; (8002830 <HAL_GPIO_Init+0x30c>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a5f      	ldr	r2, [pc, #380]	; (8002830 <HAL_GPIO_Init+0x30c>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_GPIO_Init+0x30c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c6:	4a5b      	ldr	r2, [pc, #364]	; (8002834 <HAL_GPIO_Init+0x310>)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	220f      	movs	r2, #15
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_GPIO_Init+0x314>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02b      	beq.n	800274a <HAL_GPIO_Init+0x226>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a51      	ldr	r2, [pc, #324]	; (800283c <HAL_GPIO_Init+0x318>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d025      	beq.n	8002746 <HAL_GPIO_Init+0x222>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a50      	ldr	r2, [pc, #320]	; (8002840 <HAL_GPIO_Init+0x31c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <HAL_GPIO_Init+0x21e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a4f      	ldr	r2, [pc, #316]	; (8002844 <HAL_GPIO_Init+0x320>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_Init+0x21a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4e      	ldr	r2, [pc, #312]	; (8002848 <HAL_GPIO_Init+0x324>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0x216>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4d      	ldr	r2, [pc, #308]	; (800284c <HAL_GPIO_Init+0x328>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_Init+0x212>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4c      	ldr	r2, [pc, #304]	; (8002850 <HAL_GPIO_Init+0x32c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_Init+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4b      	ldr	r2, [pc, #300]	; (8002854 <HAL_GPIO_Init+0x330>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_Init+0x20a>
 800272a:	2307      	movs	r3, #7
 800272c:	e00e      	b.n	800274c <HAL_GPIO_Init+0x228>
 800272e:	2308      	movs	r3, #8
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002732:	2306      	movs	r3, #6
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x228>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x228>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x228>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x228>
 800274a:	2300      	movs	r3, #0
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_GPIO_Init+0x310>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_GPIO_Init+0x334>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278e:	4a32      	ldr	r2, [pc, #200]	; (8002858 <HAL_GPIO_Init+0x334>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_GPIO_Init+0x334>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x334>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_GPIO_Init+0x334>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	f67f ae90 	bls.w	8002540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40013c00 	.word	0x40013c00

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002878:	e003      	b.n	8002882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	619a      	str	r2, [r3, #24]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e267      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d075      	beq.n	800299a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d00c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ba:	4b85      	ldr	r3, [pc, #532]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d112      	bne.n	80028ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c6:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05b      	beq.n	8002998 <HAL_RCC_OscConfig+0x108>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d157      	bne.n	8002998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e242      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x74>
 80028f6:	4b76      	ldr	r3, [pc, #472]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a75      	ldr	r2, [pc, #468]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0xb0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x98>
 800290e:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a6f      	ldr	r2, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6c      	ldr	r2, [pc, #432]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xb0>
 8002928:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a68      	ldr	r2, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fcaa 	bl	80022a0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fca6 	bl	80022a0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e207      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0xc0>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fc96 	bl	80022a0 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fc92 	bl	80022a0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1f3      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0xe8>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d11c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x152>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e1c7      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4937      	ldr	r1, [pc, #220]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	e03a      	b.n	8002a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_RCC_OscConfig+0x244>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7ff fc4b 	bl	80022a0 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7ff fc47 	bl	80022a0 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1a8      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4925      	ldr	r1, [pc, #148]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_OscConfig+0x244>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7ff fc2a 	bl	80022a0 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a50:	f7ff fc26 	bl	80022a0 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e187      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d036      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_RCC_OscConfig+0x248>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7ff fc0a 	bl	80022a0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7ff fc06 	bl	80022a0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e167      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x200>
 8002aae:	e01b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_RCC_OscConfig+0x248>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff fbf3 	bl	80022a0 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002abc:	e00e      	b.n	8002adc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abe:	f7ff fbef 	bl	80022a0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d907      	bls.n	8002adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e150      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	42470000 	.word	0x42470000
 8002ad8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1ea      	bne.n	8002abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8097 	beq.w	8002c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d118      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b74      	ldr	r3, [pc, #464]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a73      	ldr	r2, [pc, #460]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3e:	f7ff fbaf 	bl	80022a0 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7ff fbab 	bl	80022a0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e10c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x474>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2ea>
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	4a63      	ldr	r2, [pc, #396]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x324>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x30c>
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a5e      	ldr	r2, [pc, #376]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x324>
 8002b9c:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	4a54      	ldr	r2, [pc, #336]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff fb70 	bl	80022a0 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fb6c 	bl	80022a0 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0cb      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ee      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7ff fb5a 	bl	80022a0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7ff fb56 	bl	80022a0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0b5      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a1 	beq.w	8002d70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d05c      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d141      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7ff fb2a 	bl	80022a0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7ff fb26 	bl	80022a0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e087      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	3b01      	subs	r3, #1
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	491b      	ldr	r1, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff faff 	bl	80022a0 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca6:	f7ff fafb 	bl	80022a0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e05c      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x416>
 8002cc4:	e054      	b.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x478>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fae8 	bl	80022a0 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff fae4 	bl	80022a0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e045      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x444>
 8002cf2:	e03d      	b.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e038      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40007000 	.word	0x40007000
 8002d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d028      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d121      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d11a      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d111      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0cc      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d90c      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b63      	ldr	r3, [pc, #396]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b8      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a52      	ldr	r2, [pc, #328]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	494d      	ldr	r1, [pc, #308]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d044      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d119      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e07f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d003      	beq.n	8002e3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e067      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5e:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 0203 	bic.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4934      	ldr	r1, [pc, #208]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e70:	f7ff fa16 	bl	80022a0 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e78:	f7ff fa12 	bl	80022a0 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04f      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 020c 	and.w	r2, r3, #12
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1eb      	bne.n	8002e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d20c      	bcs.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4916      	ldr	r1, [pc, #88]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	490e      	ldr	r1, [pc, #56]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f06:	f000 f821 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	490a      	ldr	r1, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	5ccb      	ldrb	r3, [r1, r3]
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f976 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40023c00 	.word	0x40023c00
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	0800785c 	.word	0x0800785c
 8002f44:	20000008 	.word	0x20000008
 8002f48:	2000001c 	.word	0x2000001c

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b094      	sub	sp, #80	; 0x50
 8002f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f64:	4b79      	ldr	r3, [pc, #484]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d00d      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x40>
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	f200 80e1 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7e:	e0db      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f84:	e0db      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8a:	e0d8      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d063      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	2200      	movs	r2, #0
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd0:	0150      	lsls	r0, r2, #5
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	1a51      	subs	r1, r2, r1
 8002fda:	6139      	str	r1, [r7, #16]
 8002fdc:	4629      	mov	r1, r5
 8002fde:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	018b      	lsls	r3, r1, #6
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	018a      	lsls	r2, r1, #6
 8002ffe:	4651      	mov	r1, sl
 8003000:	ebb2 0801 	subs.w	r8, r2, r1
 8003004:	4659      	mov	r1, fp
 8003006:	eb63 0901 	sbc.w	r9, r3, r1
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301e:	4690      	mov	r8, r2
 8003020:	4699      	mov	r9, r3
 8003022:	4623      	mov	r3, r4
 8003024:	eb18 0303 	adds.w	r3, r8, r3
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	462b      	mov	r3, r5
 800302c:	eb49 0303 	adc.w	r3, r9, r3
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800303e:	4629      	mov	r1, r5
 8003040:	024b      	lsls	r3, r1, #9
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003048:	4621      	mov	r1, r4
 800304a:	024a      	lsls	r2, r1, #9
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003052:	2200      	movs	r2, #0
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
 8003056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800305c:	f7fd f8b4 	bl	80001c8 <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003068:	e058      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306a:	4b38      	ldr	r3, [pc, #224]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	099b      	lsrs	r3, r3, #6
 8003070:	2200      	movs	r2, #0
 8003072:	4618      	mov	r0, r3
 8003074:	4611      	mov	r1, r2
 8003076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800307a:	623b      	str	r3, [r7, #32]
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003084:	4642      	mov	r2, r8
 8003086:	464b      	mov	r3, r9
 8003088:	f04f 0000 	mov.w	r0, #0
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	0159      	lsls	r1, r3, #5
 8003092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003096:	0150      	lsls	r0, r2, #5
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4641      	mov	r1, r8
 800309e:	ebb2 0a01 	subs.w	sl, r2, r1
 80030a2:	4649      	mov	r1, r9
 80030a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030bc:	ebb2 040a 	subs.w	r4, r2, sl
 80030c0:	eb63 050b 	sbc.w	r5, r3, fp
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	00eb      	lsls	r3, r5, #3
 80030ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d2:	00e2      	lsls	r2, r4, #3
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	4643      	mov	r3, r8
 80030da:	18e3      	adds	r3, r4, r3
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	464b      	mov	r3, r9
 80030e0:	eb45 0303 	adc.w	r3, r5, r3
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f2:	4629      	mov	r1, r5
 80030f4:	028b      	lsls	r3, r1, #10
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030fc:	4621      	mov	r1, r4
 80030fe:	028a      	lsls	r2, r1, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003106:	2200      	movs	r2, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	61fa      	str	r2, [r7, #28]
 800310c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003110:	f7fd f85a 	bl	80001c8 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_GetSysClockFreq+0x200>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	3301      	adds	r3, #1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800312c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetSysClockFreq+0x204>)
 800313a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003140:	4618      	mov	r0, r3
 8003142:	3750      	adds	r7, #80	; 0x50
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400
 8003154:	007a1200 	.word	0x007a1200

08003158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07b      	b.n	8003262 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d009      	beq.n	8003190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
 8003182:	e005      	b.n	8003190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fb8c 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	ea42 0103 	orr.w	r1, r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0104 	and.w	r1, r3, #4
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0210 	and.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003250:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b088      	sub	sp, #32
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800327a:	f7ff f811 	bl	80022a0 <HAL_GetTick>
 800327e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	e12a      	b.n	80034ea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_Transmit+0x36>
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e122      	b.n	80034ea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_SPI_Transmit+0x48>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e11b      	b.n	80034ea <HAL_SPI_Transmit+0x280>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2203      	movs	r2, #3
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003300:	d10f      	bne.n	8003322 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d007      	beq.n	8003340 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d152      	bne.n	80033f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_SPI_Transmit+0xee>
 8003352:	8b7b      	ldrh	r3, [r7, #26]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d145      	bne.n	80033e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800337c:	e032      	b.n	80033e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b02      	cmp	r3, #2
 800338a:	d112      	bne.n	80033b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	1c9a      	adds	r2, r3, #2
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b0:	e018      	b.n	80033e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033b2:	f7fe ff75 	bl	80022a0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d803      	bhi.n	80033ca <HAL_SPI_Transmit+0x160>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d102      	bne.n	80033d0 <HAL_SPI_Transmit+0x166>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e082      	b.n	80034ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1c7      	bne.n	800337e <HAL_SPI_Transmit+0x114>
 80033ee:	e053      	b.n	8003498 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Transmit+0x194>
 80033f8:	8b7b      	ldrh	r3, [r7, #26]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d147      	bne.n	800348e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003424:	e033      	b.n	800348e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d113      	bne.n	800345c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	86da      	strh	r2, [r3, #54]	; 0x36
 800345a:	e018      	b.n	800348e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345c:	f7fe ff20 	bl	80022a0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d803      	bhi.n	8003474 <HAL_SPI_Transmit+0x20a>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d102      	bne.n	800347a <HAL_SPI_Transmit+0x210>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e02d      	b.n	80034ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1c6      	bne.n	8003426 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fbd9 	bl	8003c54 <SPI_EndRxTxTransaction>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d001      	beq.n	8003512 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	e104      	b.n	800371c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351a:	d112      	bne.n	8003542 <HAL_SPI_Receive+0x50>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10e      	bne.n	8003542 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2204      	movs	r2, #4
 8003528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8f3 	bl	8003724 <HAL_SPI_TransmitReceive>
 800353e:	4603      	mov	r3, r0
 8003540:	e0ec      	b.n	800371c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003542:	f7fe fead 	bl	80022a0 <HAL_GetTick>
 8003546:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Receive+0x62>
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0e1      	b.n	800371c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_SPI_Receive+0x74>
 8003562:	2302      	movs	r3, #2
 8003564:	e0da      	b.n	800371c <HAL_SPI_Receive+0x22a>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2204      	movs	r2, #4
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	88fa      	ldrh	r2, [r7, #6]
 8003586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b4:	d10f      	bne.n	80035d6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d007      	beq.n	80035f4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d170      	bne.n	80036de <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035fc:	e035      	b.n	800366a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d115      	bne.n	8003638 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f103 020c 	add.w	r2, r3, #12
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003636:	e018      	b.n	800366a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003638:	f7fe fe32 	bl	80022a0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d803      	bhi.n	8003650 <HAL_SPI_Receive+0x15e>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d102      	bne.n	8003656 <HAL_SPI_Receive+0x164>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e058      	b.n	800371c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1c4      	bne.n	80035fe <HAL_SPI_Receive+0x10c>
 8003674:	e038      	b.n	80036e8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d113      	bne.n	80036ac <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	b292      	uxth	r2, r2
 8003690:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036aa:	e018      	b.n	80036de <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ac:	f7fe fdf8 	bl	80022a0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d803      	bhi.n	80036c4 <HAL_SPI_Receive+0x1d2>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Receive+0x1d8>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e01e      	b.n	800371c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1c6      	bne.n	8003676 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa4b 	bl	8003b88 <SPI_EndRxTransaction>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800371a:	2300      	movs	r3, #0
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003732:	2301      	movs	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003736:	f7fe fdb3 	bl	80022a0 <HAL_GetTick>
 800373a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003742:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d00c      	beq.n	800376e <HAL_SPI_TransmitReceive+0x4a>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375a:	d106      	bne.n	800376a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_SPI_TransmitReceive+0x46>
 8003764:	7ffb      	ldrb	r3, [r7, #31]
 8003766:	2b04      	cmp	r3, #4
 8003768:	d001      	beq.n	800376e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	e17f      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x5c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x5c>
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e174      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x6e>
 800378e:	2302      	movs	r3, #2
 8003790:	e16d      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d003      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2205      	movs	r2, #5
 80037aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	887a      	ldrh	r2, [r7, #2]
 80037be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	887a      	ldrh	r2, [r7, #2]
 80037d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d007      	beq.n	8003802 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003800:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380a:	d17e      	bne.n	800390a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_SPI_TransmitReceive+0xf6>
 8003814:	8afb      	ldrh	r3, [r7, #22]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d16c      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	881a      	ldrh	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	1c9a      	adds	r2, r3, #2
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800383e:	e059      	b.n	80038f4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d11b      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x162>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d016      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x162>
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	2b01      	cmp	r3, #1
 800385c:	d113      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	1c9a      	adds	r2, r3, #2
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d119      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x1a4>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d014      	beq.n	80038c8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	b292      	uxth	r2, r2
 80038aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038c4:	2301      	movs	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038c8:	f7fe fcea 	bl	80022a0 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d80d      	bhi.n	80038f4 <HAL_SPI_TransmitReceive+0x1d0>
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d009      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0bc      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1a0      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x11c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d19b      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x11c>
 8003908:	e082      	b.n	8003a10 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x1f4>
 8003912:	8afb      	ldrh	r3, [r7, #22]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d171      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393e:	e05d      	b.n	80039fc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d11c      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x264>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d017      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x264>
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2b01      	cmp	r3, #1
 800395c:	d114      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d119      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x2a6>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d014      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039c6:	2301      	movs	r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039ca:	f7fe fc69 	bl	80022a0 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d803      	bhi.n	80039e2 <HAL_SPI_TransmitReceive+0x2be>
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_TransmitReceive+0x2c4>
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e038      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d19c      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x21c>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d197      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f91d 	bl	8003c54 <SPI_EndRxTxTransaction>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e01d      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a88:	f7fe fc0a 	bl	80022a0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	4413      	add	r3, r2
 8003a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a98:	f7fe fc02 	bl	80022a0 <HAL_GetTick>
 8003a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	015b      	lsls	r3, r3, #5
 8003aa4:	0d1b      	lsrs	r3, r3, #20
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aae:	e054      	b.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d050      	beq.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab8:	f7fe fbf2 	bl	80022a0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d902      	bls.n	8003ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d13d      	bne.n	8003b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae6:	d111      	bne.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af0:	d004      	beq.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afa:	d107      	bne.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b14:	d10f      	bne.n	8003b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e017      	b.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4013      	ands	r3, r2
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d19b      	bne.n	8003ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000008 	.word	0x20000008

08003b88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9c:	d111      	bne.n	8003bc2 <SPI_EndRxTransaction+0x3a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	d004      	beq.n	8003bb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d107      	bne.n	8003bc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bca:	d12a      	bne.n	8003c22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d012      	beq.n	8003bfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2180      	movs	r1, #128	; 0x80
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff ff49 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d02d      	beq.n	8003c48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	f043 0220 	orr.w	r2, r3, #32
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e026      	b.n	8003c4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2101      	movs	r1, #1
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff ff36 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e013      	b.n	8003c4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff23 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e000      	b.n	8003c4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2201      	movs	r2, #1
 8003c68:	2102      	movs	r1, #2
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff04 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e032      	b.n	8003cec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <SPI_EndRxTxTransaction+0xa0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <SPI_EndRxTxTransaction+0xa4>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0d5b      	lsrs	r3, r3, #21
 8003c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca4:	d112      	bne.n	8003ccc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fee1 	bl	8003a78 <SPI_WaitFlagStateUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d016      	beq.n	8003cea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e00f      	b.n	8003cec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d0f2      	beq.n	8003ccc <SPI_EndRxTxTransaction+0x78>
 8003ce6:	e000      	b.n	8003cea <SPI_EndRxTxTransaction+0x96>
        break;
 8003ce8:	bf00      	nop
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000008 	.word	0x20000008
 8003cf8:	165e9f81 	.word	0x165e9f81

08003cfc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e038      	b.n	8003d84 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7fc fc90 	bl	800064c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3308      	adds	r3, #8
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 fc9e 	bl	8004678 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	f000 fd00 	bl	800474c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6858      	ldr	r0, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	f000 fd2d 	bl	80047b8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	6892      	ldr	r2, [r2, #8]
 8003d66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	f041 0101 	orr.w	r1, r1, #1
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fe3e 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fa7e 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d001      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e04e      	b.n	8003ee2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d022      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d01d      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <HAL_TIM_Base_Start_IT+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x80>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d111      	bne.n	8003ed0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d010      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	e007      	b.n	8003ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40001800 	.word	0x40001800

08003f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d020      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0202 	mvn.w	r2, #2
 8003f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f999 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f98b 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f99c 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0204 	mvn.w	r2, #4
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f973 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f965 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f976 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0208 	mvn.w	r2, #8
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f94d 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f93f 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f950 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d020      	beq.n	8004054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01b      	beq.n	8004054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0210 	mvn.w	r2, #16
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2208      	movs	r2, #8
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f927 	bl	800428e <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f919 	bl	800427a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f92a 	bl	80042a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0201 	mvn.w	r2, #1
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fd fbfe 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fae4 	bl	8004664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f8fb 	bl	80042b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0220 	mvn.w	r2, #32
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fab6 	bl	8004650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIM_ConfigClockSource+0x1c>
 8004104:	2302      	movs	r3, #2
 8004106:	e0b4      	b.n	8004272 <HAL_TIM_ConfigClockSource+0x186>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004140:	d03e      	beq.n	80041c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004146:	f200 8087 	bhi.w	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	f000 8086 	beq.w	800425e <HAL_TIM_ConfigClockSource+0x172>
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	d87f      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b70      	cmp	r3, #112	; 0x70
 800415a:	d01a      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xa6>
 800415c:	2b70      	cmp	r3, #112	; 0x70
 800415e:	d87b      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b60      	cmp	r3, #96	; 0x60
 8004162:	d050      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x11a>
 8004164:	2b60      	cmp	r3, #96	; 0x60
 8004166:	d877      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d03c      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0xfa>
 800416c:	2b50      	cmp	r3, #80	; 0x50
 800416e:	d873      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d058      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x13a>
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d86f      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b30      	cmp	r3, #48	; 0x30
 800417a:	d064      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	2b30      	cmp	r3, #48	; 0x30
 800417e:	d86b      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b20      	cmp	r3, #32
 8004182:	d060      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b20      	cmp	r3, #32
 8004186:	d867      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05c      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 800418c:	2b10      	cmp	r3, #16
 800418e:	d05a      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 8004190:	e062      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a2:	f000 f9b9 	bl	8004518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]
      break;
 80041be:	e04f      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	f000 f9a2 	bl	8004518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041e2:	609a      	str	r2, [r3, #8]
      break;
 80041e4:	e03c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 f916 	bl	8004424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2150      	movs	r1, #80	; 0x50
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f96f 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004204:	e02c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004212:	461a      	mov	r2, r3
 8004214:	f000 f935 	bl	8004482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2160      	movs	r1, #96	; 0x60
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f95f 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004224:	e01c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	461a      	mov	r2, r3
 8004234:	f000 f8f6 	bl	8004424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f94f 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004244:	e00c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f000 f946 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004256:	e003      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      break;
 800425c:	e000      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800425e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <TIM_Base_SetConfig+0x12c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a43      	ldr	r2, [pc, #268]	; (80043fc <TIM_Base_SetConfig+0x130>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a42      	ldr	r2, [pc, #264]	; (8004400 <TIM_Base_SetConfig+0x134>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a41      	ldr	r2, [pc, #260]	; (8004404 <TIM_Base_SetConfig+0x138>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	; (8004408 <TIM_Base_SetConfig+0x13c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a35      	ldr	r2, [pc, #212]	; (80043f8 <TIM_Base_SetConfig+0x12c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d02b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d027      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a32      	ldr	r2, [pc, #200]	; (80043fc <TIM_Base_SetConfig+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d023      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a31      	ldr	r2, [pc, #196]	; (8004400 <TIM_Base_SetConfig+0x134>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a30      	ldr	r2, [pc, #192]	; (8004404 <TIM_Base_SetConfig+0x138>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <TIM_Base_SetConfig+0x13c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d017      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2e      	ldr	r2, [pc, #184]	; (800440c <TIM_Base_SetConfig+0x140>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <TIM_Base_SetConfig+0x144>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2c      	ldr	r2, [pc, #176]	; (8004414 <TIM_Base_SetConfig+0x148>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <TIM_Base_SetConfig+0x14c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2a      	ldr	r2, [pc, #168]	; (800441c <TIM_Base_SetConfig+0x150>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a29      	ldr	r2, [pc, #164]	; (8004420 <TIM_Base_SetConfig+0x154>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <TIM_Base_SetConfig+0x12c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0xf8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <TIM_Base_SetConfig+0x13c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d103      	bne.n	80043cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]
  }
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800
 8004418:	40001800 	.word	0x40001800
 800441c:	40001c00 	.word	0x40001c00
 8004420:	40002000 	.word	0x40002000

08004424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 030a 	bic.w	r3, r3, #10
 8004460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004482:	b480      	push	{r7}
 8004484:	b087      	sub	sp, #28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f023 0210 	bic.w	r2, r3, #16
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f043 0307 	orr.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	431a      	orrs	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e05a      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d022      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d01d      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d018      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40010400 	.word	0x40010400
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800

08004650 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	f023 0101 	bic.w	r1, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d102      	bne.n	80046a8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80046a2:	2340      	movs	r3, #64	; 0x40
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e001      	b.n	80046ac <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80046b8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80046be:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80046c4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80046ca:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80046d0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80046d6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80046dc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80046e2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80046e8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <FSMC_NORSRAM_Init+0xd0>)
 8004708:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004710:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004718:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	ea02 0103 	and.w	r1, r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4319      	orrs	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	0008fb7f 	.word	0x0008fb7f

0800474c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	431a      	orrs	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	431a      	orrs	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	431a      	orrs	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	3b01      	subs	r3, #1
 8004788:	051b      	lsls	r3, r3, #20
 800478a:	431a      	orrs	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	3b02      	subs	r3, #2
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	431a      	orrs	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4313      	orrs	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	3201      	adds	r2, #1
 80047a0:	4319      	orrs	r1, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d11d      	bne.n	800480a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80047d8:	4013      	ands	r3, r2
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	4311      	orrs	r1, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	0212      	lsls	r2, r2, #8
 80047ec:	4311      	orrs	r1, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	6992      	ldr	r2, [r2, #24]
 80047f2:	4311      	orrs	r1, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	68d2      	ldr	r2, [r2, #12]
 80047f8:	0412      	lsls	r2, r2, #16
 80047fa:	430a      	orrs	r2, r1
 80047fc:	ea43 0102 	orr.w	r1, r3, r2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004808:	e005      	b.n	8004816 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	cff00000 	.word	0xcff00000

08004828 <memset>:
 8004828:	4402      	add	r2, r0
 800482a:	4603      	mov	r3, r0
 800482c:	4293      	cmp	r3, r2
 800482e:	d100      	bne.n	8004832 <memset+0xa>
 8004830:	4770      	bx	lr
 8004832:	f803 1b01 	strb.w	r1, [r3], #1
 8004836:	e7f9      	b.n	800482c <memset+0x4>

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4d0d      	ldr	r5, [pc, #52]	; (8004870 <__libc_init_array+0x38>)
 800483c:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 800483e:	1b64      	subs	r4, r4, r5
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	2600      	movs	r6, #0
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	4d0b      	ldr	r5, [pc, #44]	; (8004878 <__libc_init_array+0x40>)
 800484a:	4c0c      	ldr	r4, [pc, #48]	; (800487c <__libc_init_array+0x44>)
 800484c:	f000 f818 	bl	8004880 <_init>
 8004850:	1b64      	subs	r4, r4, r5
 8004852:	10a4      	asrs	r4, r4, #2
 8004854:	2600      	movs	r6, #0
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	0800788c 	.word	0x0800788c
 8004874:	0800788c 	.word	0x0800788c
 8004878:	0800788c 	.word	0x0800788c
 800487c:	08007890 	.word	0x08007890

08004880 <_init>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr

0800488c <_fini>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr
