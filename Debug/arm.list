
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003020  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd0  08008fd0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd8  08008fd8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd8  08008fd8  00018fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08008fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          000001c8  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012666  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033d1  00000000  00000000  0003270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001228  00000000  00000000  00035ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e05  00000000  00000000  00036d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023510  00000000  00000000  00037b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018679  00000000  00000000  0005b01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf88c  00000000  00000000  00073696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a5c  00000000  00000000  00142f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00147980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f98 	.word	0x08005f98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08005f98 	.word	0x08005f98

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <button_init+0x14>)
 80004ce:	f002 fc6d 	bl	8002dac <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00

080004dc <button_Scan>:

void button_Scan(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <button_Scan+0xc8>)
 80004e8:	f002 fc60 	bl	8002dac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	482c      	ldr	r0, [pc, #176]	; (80005a4 <button_Scan+0xc8>)
 80004f2:	f002 fc5b 	bl	8002dac <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f6:	230a      	movs	r3, #10
 80004f8:	2202      	movs	r2, #2
 80004fa:	492b      	ldr	r1, [pc, #172]	; (80005a8 <button_Scan+0xcc>)
 80004fc:	482b      	ldr	r0, [pc, #172]	; (80005ac <button_Scan+0xd0>)
 80004fe:	f004 fba6 	bl	8004c4e <HAL_SPI_Receive>
	  int button_index = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e03f      	b.n	8000592 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db06      	blt.n	8000526 <button_Scan+0x4a>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b03      	cmp	r3, #3
 800051c:	dc03      	bgt.n	8000526 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e018      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b03      	cmp	r3, #3
 800052a:	dd07      	ble.n	800053c <button_Scan+0x60>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b07      	cmp	r3, #7
 8000530:	dc04      	bgt.n	800053c <button_Scan+0x60>
			  button_index = 7 - i;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f1c3 0307 	rsb	r3, r3, #7
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00d      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dd06      	ble.n	8000550 <button_Scan+0x74>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0b      	cmp	r3, #11
 8000546:	dc03      	bgt.n	8000550 <button_Scan+0x74>
			  button_index = i + 4;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3304      	adds	r3, #4
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e003      	b.n	8000558 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f1c3 0317 	rsb	r3, r3, #23
 8000556:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <button_Scan+0xcc>)
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	4013      	ands	r3, r2
 8000560:	b29b      	uxth	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <button_Scan+0x96>
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2100      	movs	r1, #0
 800056c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000570:	e009      	b.n	8000586 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057a:	3301      	adds	r3, #1
 800057c:	b299      	uxth	r1, r3
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000586:	897b      	ldrh	r3, [r7, #10]
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	ddbc      	ble.n	8000512 <button_Scan+0x36>
	  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	20000070 	.word	0x20000070
 80005ac:	20000140 	.word	0x20000140
 80005b0:	20000050 	.word	0x20000050

080005b4 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005b8:	201e      	movs	r0, #30
 80005ba:	f002 f865 	bl	8002688 <DEC2BCD>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <ds3231_init+0x80>)
 80005c4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005c6:	2016      	movs	r0, #22
 80005c8:	f002 f85e 	bl	8002688 <DEC2BCD>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <ds3231_init+0x80>)
 80005d2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d4:	2015      	movs	r0, #21
 80005d6:	f002 f857 	bl	8002688 <DEC2BCD>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <ds3231_init+0x80>)
 80005e0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005e2:	2006      	movs	r0, #6
 80005e4:	f002 f850 	bl	8002688 <DEC2BCD>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <ds3231_init+0x80>)
 80005ee:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005f0:	200f      	movs	r0, #15
 80005f2:	f002 f849 	bl	8002688 <DEC2BCD>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <ds3231_init+0x80>)
 80005fc:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005fe:	2009      	movs	r0, #9
 8000600:	f002 f842 	bl	8002688 <DEC2BCD>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <ds3231_init+0x80>)
 800060a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800060c:	2017      	movs	r0, #23
 800060e:	f002 f83b 	bl	8002688 <DEC2BCD>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <ds3231_init+0x80>)
 8000618:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800061a:	2332      	movs	r3, #50	; 0x32
 800061c:	2203      	movs	r2, #3
 800061e:	21d0      	movs	r1, #208	; 0xd0
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <ds3231_init+0x84>)
 8000622:	f003 f841 	bl	80036a8 <HAL_I2C_IsDeviceReady>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d000      	beq.n	800062e <ds3231_init+0x7a>
		while(1);
 800062c:	e7fe      	b.n	800062c <ds3231_init+0x78>
	};
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000074 	.word	0x20000074
 8000638:	200000d8 	.word	0x200000d8

0800063c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af04      	add	r7, sp, #16
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f81a 	bl	8002688 <DEC2BCD>
 8000654:	4603      	mov	r3, r0
 8000656:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	b29a      	uxth	r2, r3
 800065c:	230a      	movs	r3, #10
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	2301      	movs	r3, #1
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	f107 030f 	add.w	r3, r7, #15
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	21d0      	movs	r1, #208	; 0xd0
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <ds3231_Write+0x40>)
 8000670:	f002 fcfa 	bl	8003068 <HAL_I2C_Mem_Write>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000d8 	.word	0x200000d8

08000680 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000686:	230a      	movs	r3, #10
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2307      	movs	r3, #7
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <ds3231_ReadTime+0xa4>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	2200      	movs	r2, #0
 8000696:	21d0      	movs	r1, #208	; 0xd0
 8000698:	4823      	ldr	r0, [pc, #140]	; (8000728 <ds3231_ReadTime+0xa8>)
 800069a:	f002 fddf 	bl	800325c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ffd6 	bl	8002654 <BCD2DEC>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <ds3231_ReadTime+0xac>)
 80006ae:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ffcd 	bl	8002654 <BCD2DEC>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <ds3231_ReadTime+0xb0>)
 80006c0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ffc4 	bl	8002654 <BCD2DEC>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <ds3231_ReadTime+0xb4>)
 80006d2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 ffbb 	bl	8002654 <BCD2DEC>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <ds3231_ReadTime+0xb8>)
 80006e4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 ffb2 	bl	8002654 <BCD2DEC>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <ds3231_ReadTime+0xbc>)
 80006f6:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <ds3231_ReadTime+0xa4>)
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 ffa9 	bl	8002654 <BCD2DEC>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <ds3231_ReadTime+0xc0>)
 8000708:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <ds3231_ReadTime+0xa4>)
 800070c:	799b      	ldrb	r3, [r3, #6]
 800070e:	4618      	mov	r0, r3
 8000710:	f001 ffa0 	bl	8002654 <BCD2DEC>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <ds3231_ReadTime+0xc4>)
 800071a:	701a      	strb	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000074 	.word	0x20000074
 8000728:	200000d8 	.word	0x200000d8
 800072c:	2000007d 	.word	0x2000007d
 8000730:	2000007c 	.word	0x2000007c
 8000734:	2000007b 	.word	0x2000007b
 8000738:	2000007f 	.word	0x2000007f
 800073c:	2000007e 	.word	0x2000007e
 8000740:	20000080 	.word	0x20000080
 8000744:	20000081 	.word	0x20000081

08000748 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_FSMC_Init+0xec>)
 8000776:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800077a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_FSMC_Init+0xec>)
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_FSMC_Init+0xf0>)
 8000780:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <MX_FSMC_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_FSMC_Init+0xec>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_FSMC_Init+0xec>)
 8000796:	2210      	movs	r2, #16
 8000798:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_FSMC_Init+0xec>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_FSMC_Init+0xec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_FSMC_Init+0xec>)
 80007b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_FSMC_Init+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_FSMC_Init+0xec>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_FSMC_Init+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_FSMC_Init+0xec>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_FSMC_Init+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007da:	230f      	movs	r3, #15
 80007dc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007de:	230f      	movs	r3, #15
 80007e0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007e2:	233c      	movs	r3, #60	; 0x3c
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007ea:	2310      	movs	r3, #16
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ee:	2311      	movs	r3, #17
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007f2:	2300      	movs	r3, #0
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007f6:	2308      	movs	r3, #8
 80007f8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007fa:	230f      	movs	r3, #15
 80007fc:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007fe:	2309      	movs	r3, #9
 8000800:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000806:	2310      	movs	r3, #16
 8000808:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800080a:	2311      	movs	r3, #17
 800080c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000812:	463a      	mov	r2, r7
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_FSMC_Init+0xec>)
 800081c:	f004 fdfa 	bl	8005414 <HAL_SRAM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000826:	f001 f82d 	bl	8001884 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800082a:	bf00      	nop
 800082c:	3738      	adds	r7, #56	; 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000084 	.word	0x20000084
 8000838:	a0000104 	.word	0xa0000104

0800083c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_FSMC_MspInit+0x88>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d131      	bne.n	80008bc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_FSMC_MspInit+0x88>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <HAL_FSMC_MspInit+0x8c>)
 8000864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <HAL_FSMC_MspInit+0x8c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6393      	str	r3, [r2, #56]	; 0x38
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_FSMC_MspInit+0x8c>)
 8000870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800087a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800087e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800088c:	230c      	movs	r3, #12
 800088e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <HAL_FSMC_MspInit+0x90>)
 8000896:	f002 f8ed 	bl	8002a74 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800089a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800089e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008ac:	230c      	movs	r3, #12
 80008ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <HAL_FSMC_MspInit+0x94>)
 80008b6:	f002 f8dd 	bl	8002a74 <HAL_GPIO_Init>
 80008ba:	e000      	b.n	80008be <HAL_FSMC_MspInit+0x82>
    return;
 80008bc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000d4 	.word	0x200000d4
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008dc:	f7ff ffae 	bl	800083c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a6e      	ldr	r2, [pc, #440]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b6c      	ldr	r3, [pc, #432]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b68      	ldr	r3, [pc, #416]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a67      	ldr	r2, [pc, #412]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b65      	ldr	r3, [pc, #404]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a60      	ldr	r2, [pc, #384]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5e      	ldr	r3, [pc, #376]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b5a      	ldr	r3, [pc, #360]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a59      	ldr	r2, [pc, #356]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a52      	ldr	r2, [pc, #328]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 8000994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2170      	movs	r1, #112	; 0x70
 80009c6:	483f      	ldr	r0, [pc, #252]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 80009c8:	f002 f9f0 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d2:	483d      	ldr	r0, [pc, #244]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009d4:	f002 f9ea 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	483b      	ldr	r0, [pc, #236]	; (8000acc <MX_GPIO_Init+0x1e4>)
 80009de:	f002 f9e5 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e8:	4839      	ldr	r0, [pc, #228]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 80009ea:	f002 f9df 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2108      	movs	r1, #8
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 80009f4:	f002 f9da 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009f8:	2370      	movs	r3, #112	; 0x70
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482d      	ldr	r0, [pc, #180]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 8000a10:	f002 f830 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a2e:	f002 f821 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4822      	ldr	r0, [pc, #136]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000a46:	f002 f815 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a4a:	2330      	movs	r3, #48	; 0x30
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481a      	ldr	r0, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a5e:	f002 f809 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000a7a:	f001 fffb 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000a98:	f001 ffec 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 8000ab4:	f001 ffde 	bl	8002a74 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f002 f963 	bl	8002de0 <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 feb0 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000d8 	.word	0x200000d8
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	000186a0 	.word	0x000186a0

08000b34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <HAL_I2C_MspInit+0x84>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d12b      	bne.n	8000bae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b76:	2312      	movs	r3, #18
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b82:	2304      	movs	r3, #4
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <HAL_I2C_MspInit+0x8c>)
 8000b8e:	f001 ff71 	bl	8002a74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_I2C_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <LCD_WR_REG+0x1c>)
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	8013      	strh	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	600ffffe 	.word	0x600ffffe

08000be4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <LCD_WR_DATA+0x1c>)
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	8053      	strh	r3, [r2, #2]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	600ffffe 	.word	0x600ffffe

08000c04 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <LCD_RD_DATA+0x20>)
 8000c0c:	885b      	ldrh	r3, [r3, #2]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b29b      	uxth	r3, r3
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	600ffffe 	.word	0x600ffffe

08000c28 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	80fb      	strh	r3, [r7, #6]
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80bb      	strh	r3, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	807b      	strh	r3, [r7, #2]
 8000c42:	4613      	mov	r3, r2
 8000c44:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c46:	202a      	movs	r0, #42	; 0x2a
 8000c48:	f7ff ffbc 	bl	8000bc4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffc6 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc0 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffba 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffb4 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c7c:	202b      	movs	r0, #43	; 0x2b
 8000c7e:	f7ff ffa1 	bl	8000bc4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffab 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffa5 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c9a:	883b      	ldrh	r3, [r7, #0]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff9f 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ca6:	883b      	ldrh	r3, [r7, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff99 	bl	8000be4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f7ff ff86 	bl	8000bc4 <LCD_WR_REG>
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}

08000cc0 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <lcd_Clear+0x70>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <lcd_Clear+0x70>)
 8000ce4:	885b      	ldrh	r3, [r3, #2]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff ff9b 	bl	8000c28 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	e011      	b.n	8000d1c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	81bb      	strh	r3, [r7, #12]
 8000cfc:	e006      	b.n	8000d0c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff6f 	bl	8000be4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d06:	89bb      	ldrh	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	81bb      	strh	r3, [r7, #12]
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <lcd_Clear+0x70>)
 8000d0e:	885b      	ldrh	r3, [r3, #2]
 8000d10:	89ba      	ldrh	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3f3      	bcc.n	8000cfe <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d16:	89fb      	ldrh	r3, [r7, #14]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	81fb      	strh	r3, [r7, #14]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <lcd_Clear+0x70>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	89fa      	ldrh	r2, [r7, #14]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3e8      	bcc.n	8000cf8 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000012c 	.word	0x2000012c

08000d34 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	80bb      	strh	r3, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	88b9      	ldrh	r1, [r7, #4]
 8000d4c:	88f8      	ldrh	r0, [r7, #6]
 8000d4e:	f7ff ff6b 	bl	8000c28 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff45 	bl	8000be4 <LCD_WR_DATA>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <lcd_DrawLine>:

void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000d62:	b590      	push	{r4, r7, lr}
 8000d64:	b08d      	sub	sp, #52	; 0x34
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4604      	mov	r4, r0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4623      	mov	r3, r4
 8000d72:	80fb      	strh	r3, [r7, #6]
 8000d74:	4603      	mov	r3, r0
 8000d76:	80bb      	strh	r3, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000d88:	887a      	ldrh	r2, [r7, #2]
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8000d90:	883a      	ldrh	r2, [r7, #0]
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8000da0:	6a3b      	ldr	r3, [r7, #32]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dd02      	ble.n	8000dac <lcd_DrawLine+0x4a>
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e00b      	b.n	8000dc4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d102      	bne.n	8000db8 <lcd_DrawLine+0x56>
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e005      	b.n	8000dc4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	dd02      	ble.n	8000dd0 <lcd_DrawLine+0x6e>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e00b      	b.n	8000de8 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <lcd_DrawLine+0x7a>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e005      	b.n	8000de8 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	425b      	negs	r3, r3
 8000de6:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8000de8:	6a3a      	ldr	r2, [r7, #32]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dd02      	ble.n	8000df6 <lcd_DrawLine+0x94>
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	e001      	b.n	8000dfa <lcd_DrawLine+0x98>
	else distance=delta_y;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000dfe:	e02b      	b.n	8000e58 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	b291      	uxth	r1, r2
 8000e08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff91 	bl	8000d34 <lcd_DrawPoint>
		xerr+=delta_x;
 8000e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	4413      	add	r3, r2
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	4413      	add	r3, r2
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8000e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	dd07      	ble.n	8000e3a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8000e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dd07      	ble.n	8000e52 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8000e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8000e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e54:	3301      	adds	r3, #1
 8000e56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dacf      	bge.n	8000e00 <lcd_DrawLine+0x9e>
		}
	}
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3734      	adds	r7, #52	; 0x34
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}

08000e6a <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8000e6a:	b590      	push	{r4, r7, lr}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af02      	add	r7, sp, #8
 8000e70:	4604      	mov	r4, r0
 8000e72:	4608      	mov	r0, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	80fb      	strh	r3, [r7, #6]
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8000e88:	88bc      	ldrh	r4, [r7, #4]
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	88b9      	ldrh	r1, [r7, #4]
 8000e8e:	88f8      	ldrh	r0, [r7, #6]
 8000e90:	8b3b      	ldrh	r3, [r7, #24]
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	4623      	mov	r3, r4
 8000e96:	f7ff ff64 	bl	8000d62 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8000e9a:	883c      	ldrh	r4, [r7, #0]
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	88b9      	ldrh	r1, [r7, #4]
 8000ea0:	88f8      	ldrh	r0, [r7, #6]
 8000ea2:	8b3b      	ldrh	r3, [r7, #24]
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	f7ff ff5b 	bl	8000d62 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8000eac:	883c      	ldrh	r4, [r7, #0]
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	8839      	ldrh	r1, [r7, #0]
 8000eb2:	88f8      	ldrh	r0, [r7, #6]
 8000eb4:	8b3b      	ldrh	r3, [r7, #24]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	4623      	mov	r3, r4
 8000eba:	f7ff ff52 	bl	8000d62 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8000ebe:	883c      	ldrh	r4, [r7, #0]
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	8878      	ldrh	r0, [r7, #2]
 8000ec6:	8b3b      	ldrh	r3, [r7, #24]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4623      	mov	r3, r4
 8000ecc:	f7ff ff49 	bl	8000d62 <lcd_DrawLine>
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4604      	mov	r4, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	80fb      	strh	r3, [r7, #6]
 8000eea:	4603      	mov	r3, r0
 8000eec:	80bb      	strh	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70fb      	strb	r3, [r7, #3]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	08db      	lsrs	r3, r3, #3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	fb12 f303 	smulbb	r3, r2, r3
 8000f2e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	3b20      	subs	r3, #32
 8000f34:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29c      	uxth	r4, r3
 8000f44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	88b9      	ldrh	r1, [r7, #4]
 8000f56:	88f8      	ldrh	r0, [r7, #6]
 8000f58:	4622      	mov	r2, r4
 8000f5a:	f7ff fe65 	bl	8000c28 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	827b      	strh	r3, [r7, #18]
 8000f62:	e07a      	b.n	800105a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d028      	beq.n	8000fbe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d108      	bne.n	8000f86 <lcd_ShowChar+0xae>
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	8a7b      	ldrh	r3, [r7, #18]
 8000f78:	493c      	ldr	r1, [pc, #240]	; (800106c <lcd_ShowChar+0x194>)
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	440a      	add	r2, r1
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	75fb      	strb	r3, [r7, #23]
 8000f84:	e01b      	b.n	8000fbe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f8a:	2b18      	cmp	r3, #24
 8000f8c:	d10b      	bne.n	8000fa6 <lcd_ShowChar+0xce>
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	8a79      	ldrh	r1, [r7, #18]
 8000f92:	4837      	ldr	r0, [pc, #220]	; (8001070 <lcd_ShowChar+0x198>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4403      	add	r3, r0
 8000f9e:	440b      	add	r3, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	75fb      	strb	r3, [r7, #23]
 8000fa4:	e00b      	b.n	8000fbe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000fa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000faa:	2b20      	cmp	r3, #32
 8000fac:	d15a      	bne.n	8001064 <lcd_ShowChar+0x18c>
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	8a7b      	ldrh	r3, [r7, #18]
 8000fb2:	4930      	ldr	r1, [pc, #192]	; (8001074 <lcd_ShowChar+0x19c>)
 8000fb4:	0192      	lsls	r2, r2, #6
 8000fb6:	440a      	add	r2, r1
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75bb      	strb	r3, [r7, #22]
 8000fc2:	e044      	b.n	800104e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000fc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d120      	bne.n	800100e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000fcc:	7dfa      	ldrb	r2, [r7, #23]
 8000fce:	7dbb      	ldrb	r3, [r7, #22]
 8000fd0:	fa42 f303 	asr.w	r3, r2, r3
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <lcd_ShowChar+0x10e>
 8000fdc:	883b      	ldrh	r3, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe00 	bl	8000be4 <LCD_WR_DATA>
 8000fe4:	e003      	b.n	8000fee <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fdfb 	bl	8000be4 <LCD_WR_DATA>
				m++;
 8000fee:	7d7b      	ldrb	r3, [r7, #21]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ff4:	7d7b      	ldrb	r3, [r7, #21]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ffc:	fb01 f202 	mul.w	r2, r1, r2
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11f      	bne.n	8001048 <lcd_ShowChar+0x170>
				{
					m=0;
 8001008:	2300      	movs	r3, #0
 800100a:	757b      	strb	r3, [r7, #21]
					break;
 800100c:	e022      	b.n	8001054 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800100e:	7dfa      	ldrb	r2, [r7, #23]
 8001010:	7dbb      	ldrb	r3, [r7, #22]
 8001012:	fa42 f303 	asr.w	r3, r2, r3
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <lcd_ShowChar+0x152>
 800101e:	883a      	ldrh	r2, [r7, #0]
 8001020:	88b9      	ldrh	r1, [r7, #4]
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fe85 	bl	8000d34 <lcd_DrawPoint>
				x++;
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	3301      	adds	r3, #1
 800102e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	8a3b      	ldrh	r3, [r7, #16]
 8001034:	1ad2      	subs	r2, r2, r3
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	429a      	cmp	r2, r3
 800103a:	d105      	bne.n	8001048 <lcd_ShowChar+0x170>
				{
					x=x0;
 800103c:	8a3b      	ldrh	r3, [r7, #16]
 800103e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	80bb      	strh	r3, [r7, #4]
					break;
 8001046:	e005      	b.n	8001054 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001048:	7dbb      	ldrb	r3, [r7, #22]
 800104a:	3301      	adds	r3, #1
 800104c:	75bb      	strb	r3, [r7, #22]
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	2b07      	cmp	r3, #7
 8001052:	d9b7      	bls.n	8000fc4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001054:	8a7b      	ldrh	r3, [r7, #18]
 8001056:	3301      	adds	r3, #1
 8001058:	827b      	strh	r3, [r7, #18]
 800105a:	8a7a      	ldrh	r2, [r7, #18]
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	429a      	cmp	r2, r3
 8001060:	d380      	bcc.n	8000f64 <lcd_ShowChar+0x8c>
 8001062:	e000      	b.n	8001066 <lcd_ShowChar+0x18e>
		else return;
 8001064:	bf00      	nop
				}
			}
		}
	}
}
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	08006038 	.word	0x08006038
 8001070:	08006628 	.word	0x08006628
 8001074:	080077f8 	.word	0x080077f8

08001078 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001088:	2301      	movs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800108c:	e004      	b.n	8001098 <mypow+0x20>
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	1e5a      	subs	r2, r3, #1
 800109c:	71ba      	strb	r2, [r7, #6]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f5      	bne.n	800108e <mypow+0x16>
	return result;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	4603      	mov	r3, r0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80010d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e059      	b.n	8001194 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80010e0:	887c      	ldrh	r4, [r7, #2]
 80010e2:	787a      	ldrb	r2, [r7, #1]
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	200a      	movs	r0, #10
 80010f2:	f7ff ffc1 	bl	8001078 <mypow>
 80010f6:	4603      	mov	r3, r0
 80010f8:	fbb4 f1f3 	udiv	r1, r4, r3
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <lcd_ShowIntNum+0xf8>)
 80010fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	1aca      	subs	r2, r1, r3
 800110e:	4613      	mov	r3, r2
 8001110:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d121      	bne.n	800115c <lcd_ShowIntNum+0xac>
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	787b      	ldrb	r3, [r7, #1]
 800111c:	3b01      	subs	r3, #1
 800111e:	429a      	cmp	r2, r3
 8001120:	da1c      	bge.n	800115c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001122:	7b3b      	ldrb	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d117      	bne.n	8001158 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	b29a      	uxth	r2, r3
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	b29b      	uxth	r3, r3
 8001130:	fb12 f303 	smulbb	r3, r2, r3
 8001134:	b29a      	uxth	r2, r3
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4413      	add	r3, r2
 800113a:	b298      	uxth	r0, r3
 800113c:	8c3a      	ldrh	r2, [r7, #32]
 800113e:	88b9      	ldrh	r1, [r7, #4]
 8001140:	2300      	movs	r3, #0
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	4613      	mov	r3, r2
 8001150:	2220      	movs	r2, #32
 8001152:	f7ff fec1 	bl	8000ed8 <lcd_ShowChar>
				continue;
 8001156:	e01a      	b.n	800118e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001158:	2301      	movs	r3, #1
 800115a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	b29a      	uxth	r2, r3
 8001160:	7b7b      	ldrb	r3, [r7, #13]
 8001162:	b29b      	uxth	r3, r3
 8001164:	fb12 f303 	smulbb	r3, r2, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4413      	add	r3, r2
 800116e:	b298      	uxth	r0, r3
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	3330      	adds	r3, #48	; 0x30
 8001174:	b2da      	uxtb	r2, r3
 8001176:	8c3c      	ldrh	r4, [r7, #32]
 8001178:	88b9      	ldrh	r1, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4623      	mov	r3, r4
 800118a:	f7ff fea5 	bl	8000ed8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	3301      	adds	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	787b      	ldrb	r3, [r7, #1]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3a1      	bcc.n	80010e0 <lcd_ShowIntNum+0x30>
	}
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	cccccccd 	.word	0xcccccccd

080011ac <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <lcd_SetDir+0x44>)
 80011c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011cc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <lcd_SetDir+0x44>)
 80011d0:	22f0      	movs	r2, #240	; 0xf0
 80011d2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80011d4:	e006      	b.n	80011e4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <lcd_SetDir+0x44>)
 80011d8:	22f0      	movs	r2, #240	; 0xf0
 80011da:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <lcd_SetDir+0x44>)
 80011de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011e2:	805a      	strh	r2, [r3, #2]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	2000012c 	.word	0x2000012c

080011f4 <lcd_init>:


void lcd_init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	48aa      	ldr	r0, [pc, #680]	; (80014a8 <lcd_init+0x2b4>)
 8001200:	f001 fdd4 	bl	8002dac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001208:	f001 fafe 	bl	8002808 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001212:	48a5      	ldr	r0, [pc, #660]	; (80014a8 <lcd_init+0x2b4>)
 8001214:	f001 fdca 	bl	8002dac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f001 faf4 	bl	8002808 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ffc3 	bl	80011ac <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001226:	20d3      	movs	r0, #211	; 0xd3
 8001228:	f7ff fccc 	bl	8000bc4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800122c:	f7ff fcea 	bl	8000c04 <LCD_RD_DATA>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <lcd_init+0x2b8>)
 8001236:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001238:	f7ff fce4 	bl	8000c04 <LCD_RD_DATA>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b9a      	ldr	r3, [pc, #616]	; (80014ac <lcd_init+0x2b8>)
 8001242:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001244:	f7ff fcde 	bl	8000c04 <LCD_RD_DATA>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b97      	ldr	r3, [pc, #604]	; (80014ac <lcd_init+0x2b8>)
 800124e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001250:	4b96      	ldr	r3, [pc, #600]	; (80014ac <lcd_init+0x2b8>)
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b94      	ldr	r3, [pc, #592]	; (80014ac <lcd_init+0x2b8>)
 800125a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800125c:	f7ff fcd2 	bl	8000c04 <LCD_RD_DATA>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b91      	ldr	r3, [pc, #580]	; (80014ac <lcd_init+0x2b8>)
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	4313      	orrs	r3, r2
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <lcd_init+0x2b8>)
 800126e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001270:	20cf      	movs	r0, #207	; 0xcf
 8001272:	f7ff fca7 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fcb4 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800127c:	20c1      	movs	r0, #193	; 0xc1
 800127e:	f7ff fcb1 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001282:	2030      	movs	r0, #48	; 0x30
 8001284:	f7ff fcae 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001288:	20ed      	movs	r0, #237	; 0xed
 800128a:	f7ff fc9b 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800128e:	2064      	movs	r0, #100	; 0x64
 8001290:	f7ff fca8 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff fca5 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800129a:	2012      	movs	r0, #18
 800129c:	f7ff fca2 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80012a0:	2081      	movs	r0, #129	; 0x81
 80012a2:	f7ff fc9f 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80012a6:	20e8      	movs	r0, #232	; 0xe8
 80012a8:	f7ff fc8c 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80012ac:	2085      	movs	r0, #133	; 0x85
 80012ae:	f7ff fc99 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012b2:	2010      	movs	r0, #16
 80012b4:	f7ff fc96 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80012b8:	207a      	movs	r0, #122	; 0x7a
 80012ba:	f7ff fc93 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80012be:	20cb      	movs	r0, #203	; 0xcb
 80012c0:	f7ff fc80 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80012c4:	2039      	movs	r0, #57	; 0x39
 80012c6:	f7ff fc8d 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80012ca:	202c      	movs	r0, #44	; 0x2c
 80012cc:	f7ff fc8a 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fc87 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80012d6:	2034      	movs	r0, #52	; 0x34
 80012d8:	f7ff fc84 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fc81 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80012e2:	20f7      	movs	r0, #247	; 0xf7
 80012e4:	f7ff fc6e 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80012e8:	2020      	movs	r0, #32
 80012ea:	f7ff fc7b 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80012ee:	20ea      	movs	r0, #234	; 0xea
 80012f0:	f7ff fc68 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fc75 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fc72 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001300:	20c0      	movs	r0, #192	; 0xc0
 8001302:	f7ff fc5f 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001306:	201b      	movs	r0, #27
 8001308:	f7ff fc6c 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800130c:	20c1      	movs	r0, #193	; 0xc1
 800130e:	f7ff fc59 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fc66 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001318:	20c5      	movs	r0, #197	; 0xc5
 800131a:	f7ff fc53 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800131e:	2030      	movs	r0, #48	; 0x30
 8001320:	f7ff fc60 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001324:	2030      	movs	r0, #48	; 0x30
 8001326:	f7ff fc5d 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800132a:	20c7      	movs	r0, #199	; 0xc7
 800132c:	f7ff fc4a 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001330:	20b7      	movs	r0, #183	; 0xb7
 8001332:	f7ff fc57 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001336:	2036      	movs	r0, #54	; 0x36
 8001338:	f7ff fc44 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 800133c:	2008      	movs	r0, #8
 800133e:	f7ff fc51 	bl	8000be4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001342:	203a      	movs	r0, #58	; 0x3a
 8001344:	f7ff fc3e 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001348:	2055      	movs	r0, #85	; 0x55
 800134a:	f7ff fc4b 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800134e:	20b1      	movs	r0, #177	; 0xb1
 8001350:	f7ff fc38 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fc45 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800135a:	201a      	movs	r0, #26
 800135c:	f7ff fc42 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001360:	20b6      	movs	r0, #182	; 0xb6
 8001362:	f7ff fc2f 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff fc3c 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800136c:	20a2      	movs	r0, #162	; 0xa2
 800136e:	f7ff fc39 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001372:	20f2      	movs	r0, #242	; 0xf2
 8001374:	f7ff fc26 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fc33 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800137e:	2026      	movs	r0, #38	; 0x26
 8001380:	f7ff fc20 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fc2d 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800138a:	20e0      	movs	r0, #224	; 0xe0
 800138c:	f7ff fc1a 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001390:	200f      	movs	r0, #15
 8001392:	f7ff fc27 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001396:	202a      	movs	r0, #42	; 0x2a
 8001398:	f7ff fc24 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f7ff fc21 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013a2:	2008      	movs	r0, #8
 80013a4:	f7ff fc1e 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80013a8:	200e      	movs	r0, #14
 80013aa:	f7ff fc1b 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80013ae:	2008      	movs	r0, #8
 80013b0:	f7ff fc18 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80013b4:	2054      	movs	r0, #84	; 0x54
 80013b6:	f7ff fc15 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80013ba:	20a9      	movs	r0, #169	; 0xa9
 80013bc:	f7ff fc12 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80013c0:	2043      	movs	r0, #67	; 0x43
 80013c2:	f7ff fc0f 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f7ff fc0c 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013cc:	200f      	movs	r0, #15
 80013ce:	f7ff fc09 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fc06 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fc03 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff fc00 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fbfd 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80013ea:	20e1      	movs	r0, #225	; 0xe1
 80013ec:	f7ff fbea 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fbf7 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80013f6:	2015      	movs	r0, #21
 80013f8:	f7ff fbf4 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80013fc:	2017      	movs	r0, #23
 80013fe:	f7ff fbf1 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001402:	2007      	movs	r0, #7
 8001404:	f7ff fbee 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001408:	2011      	movs	r0, #17
 800140a:	f7ff fbeb 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800140e:	2006      	movs	r0, #6
 8001410:	f7ff fbe8 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001414:	202b      	movs	r0, #43	; 0x2b
 8001416:	f7ff fbe5 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800141a:	2056      	movs	r0, #86	; 0x56
 800141c:	f7ff fbe2 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001420:	203c      	movs	r0, #60	; 0x3c
 8001422:	f7ff fbdf 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001426:	2005      	movs	r0, #5
 8001428:	f7ff fbdc 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800142c:	2010      	movs	r0, #16
 800142e:	f7ff fbd9 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001432:	200f      	movs	r0, #15
 8001434:	f7ff fbd6 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001438:	203f      	movs	r0, #63	; 0x3f
 800143a:	f7ff fbd3 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800143e:	203f      	movs	r0, #63	; 0x3f
 8001440:	f7ff fbd0 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001444:	200f      	movs	r0, #15
 8001446:	f7ff fbcd 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800144a:	202b      	movs	r0, #43	; 0x2b
 800144c:	f7ff fbba 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fbc7 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fbc4 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fbc1 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001462:	203f      	movs	r0, #63	; 0x3f
 8001464:	f7ff fbbe 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001468:	202a      	movs	r0, #42	; 0x2a
 800146a:	f7ff fbab 	bl	8000bc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fbb8 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fbb5 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fbb2 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001480:	20ef      	movs	r0, #239	; 0xef
 8001482:	f7ff fbaf 	bl	8000be4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001486:	2011      	movs	r0, #17
 8001488:	f7ff fb9c 	bl	8000bc4 <LCD_WR_REG>
	HAL_Delay(120);
 800148c:	2078      	movs	r0, #120	; 0x78
 800148e:	f001 f9bb 	bl	8002808 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001492:	2029      	movs	r0, #41	; 0x29
 8001494:	f7ff fb96 	bl	8000bc4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <lcd_init+0x2bc>)
 80014a0:	f001 fc84 	bl	8002dac <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020800 	.word	0x40020800
 80014ac:	2000012c 	.word	0x2000012c
 80014b0:	40020000 	.word	0x40020000

080014b4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b08b      	sub	sp, #44	; 0x2c
 80014b8:	af04      	add	r7, sp, #16
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	461a      	mov	r2, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	81fb      	strh	r3, [r7, #14]
 80014c2:	460b      	mov	r3, r1
 80014c4:	81bb      	strh	r3, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80014d2:	e048      	b.n	8001566 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d145      	bne.n	8001566 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014da:	89fa      	ldrh	r2, [r7, #14]
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <lcd_ShowStr+0xc4>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e6:	085b      	lsrs	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dc3f      	bgt.n	8001570 <lcd_ShowStr+0xbc>
 80014f0:	89ba      	ldrh	r2, [r7, #12]
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <lcd_ShowStr+0xc4>)
 80014f4:	885b      	ldrh	r3, [r3, #2]
 80014f6:	4619      	mov	r1, r3
 80014f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014fc:	1acb      	subs	r3, r1, r3
 80014fe:	429a      	cmp	r2, r3
 8001500:	dc36      	bgt.n	8001570 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b80      	cmp	r3, #128	; 0x80
 8001508:	d902      	bls.n	8001510 <lcd_ShowStr+0x5c>
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
 800150e:	e02a      	b.n	8001566 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b0d      	cmp	r3, #13
 8001516:	d10b      	bne.n	8001530 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800151c:	b29a      	uxth	r2, r3
 800151e:	89bb      	ldrh	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001524:	8abb      	ldrh	r3, [r7, #20]
 8001526:	81fb      	strh	r3, [r7, #14]
					str++;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3301      	adds	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	e017      	b.n	8001560 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	88fc      	ldrh	r4, [r7, #6]
 8001536:	89b9      	ldrh	r1, [r7, #12]
 8001538:	89f8      	ldrh	r0, [r7, #14]
 800153a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	f7ff fcc4 	bl	8000ed8 <lcd_ShowChar>
					x+=sizey/2;
 8001550:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b29a      	uxth	r2, r3
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	4413      	add	r3, r2
 800155e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1b2      	bne.n	80014d4 <lcd_ShowStr+0x20>
 800156e:	e000      	b.n	8001572 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001570:	bf00      	nop
			}
		}
	}
}
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	2000012c 	.word	0x2000012c

0800157c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	2140      	movs	r1, #64	; 0x40
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <led7_init+0x14>)
 8001586:	f001 fc11 	bl	8002dac <HAL_GPIO_WritePin>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021800 	.word	0x40021800

08001594 <led7_Scan>:

void led7_Scan(){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <led7_Scan+0x104>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <led7_Scan+0x104>)
 80015a2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <led7_Scan+0x108>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <led7_Scan+0x10c>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <led7_Scan+0x104>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <led7_Scan+0x104>)
 80015be:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <led7_Scan+0x108>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d847      	bhi.n	8001658 <led7_Scan+0xc4>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <led7_Scan+0x3c>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015ff 	.word	0x080015ff
 80015d8:	0800161d 	.word	0x0800161d
 80015dc:	0800163b 	.word	0x0800163b
	case 0:
		spi_buffer |= 0x00b0;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <led7_Scan+0x104>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <led7_Scan+0x104>)
 80015ec:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <led7_Scan+0x104>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <led7_Scan+0x104>)
 80015fa:	801a      	strh	r2, [r3, #0]
		break;
 80015fc:	e02d      	b.n	800165a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <led7_Scan+0x104>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <led7_Scan+0x104>)
 800160a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <led7_Scan+0x104>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	f023 0320 	bic.w	r3, r3, #32
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <led7_Scan+0x104>)
 8001618:	801a      	strh	r2, [r3, #0]
		break;
 800161a:	e01e      	b.n	800165a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <led7_Scan+0x104>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <led7_Scan+0x104>)
 8001628:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <led7_Scan+0x104>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	f023 0310 	bic.w	r3, r3, #16
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <led7_Scan+0x104>)
 8001636:	801a      	strh	r2, [r3, #0]
		break;
 8001638:	e00f      	b.n	800165a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <led7_Scan+0x104>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <led7_Scan+0x104>)
 8001646:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <led7_Scan+0x104>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <led7_Scan+0x104>)
 8001654:	801a      	strh	r2, [r3, #0]
		break;
 8001656:	e000      	b.n	800165a <led7_Scan+0xc6>
	default:
		break;
 8001658:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <led7_Scan+0x108>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	425a      	negs	r2, r3
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	bf58      	it	pl
 800166c:	4253      	negpl	r3, r2
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <led7_Scan+0x108>)
 8001670:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <led7_Scan+0x110>)
 8001678:	f001 fb98 	bl	8002dac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800167c:	2301      	movs	r3, #1
 800167e:	2202      	movs	r2, #2
 8001680:	4905      	ldr	r1, [pc, #20]	; (8001698 <led7_Scan+0x104>)
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <led7_Scan+0x114>)
 8001684:	f003 f9a7 	bl	80049d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <led7_Scan+0x110>)
 800168e:	f001 fb8d 	bl	8002dac <HAL_GPIO_WritePin>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000004 	.word	0x20000004
 800169c:	20000134 	.word	0x20000134
 80016a0:	20000000 	.word	0x20000000
 80016a4:	40021800 	.word	0x40021800
 80016a8:	20000140 	.word	0x20000140

080016ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b0:	f001 f838 	bl	8002724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b4:	f000 f822 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b8:	f7ff f916 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016bc:	f000 fa24 	bl	8001b08 <MX_TIM2_Init>
  MX_SPI1_Init();
 80016c0:	f000 f936 	bl	8001930 <MX_SPI1_Init>
  MX_FSMC_Init();
 80016c4:	f7ff f840 	bl	8000748 <MX_FSMC_Init>
  MX_I2C1_Init();
 80016c8:	f7ff fa06 	bl	8000ad8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80016cc:	f000 f880 	bl	80017d0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff faf5 	bl	8000cc0 <lcd_Clear>
 updateTime();
 80016d6:	f000 f89d 	bl	8001814 <updateTime>

  while (1)
  {
	  while(!flag_timer2);
 80016da:	bf00      	nop
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <main+0x4c>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0fb      	beq.n	80016dc <main+0x30>
	  flag_timer2 = 0;
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <main+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80016ea:	f7fe fef7 	bl	80004dc <button_Scan>
	  ds3231_ReadTime();
 80016ee:	f7fe ffc7 	bl	8000680 <ds3231_ReadTime>
	  button_press();
 80016f2:	f000 fc81 	bl	8001ff8 <button_press>
	  while(!flag_timer2);
 80016f6:	e7f0      	b.n	80016da <main+0x2e>
 80016f8:	20000138 	.word	0x20000138

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2230      	movs	r2, #48	; 0x30
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 fc18 	bl	8005f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <SystemClock_Config+0xcc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <SystemClock_Config+0xcc>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <SystemClock_Config+0xcc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <SystemClock_Config+0xd0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <SystemClock_Config+0xd0>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SystemClock_Config+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001760:	2310      	movs	r3, #16
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001764:	2302      	movs	r3, #2
 8001766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001768:	2300      	movs	r3, #0
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800176c:	2308      	movs	r3, #8
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001770:	23a8      	movs	r3, #168	; 0xa8
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001774:	2302      	movs	r3, #2
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001778:	2304      	movs	r3, #4
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fc1b 	bl	8003fbc <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800178c:	f000 f87a 	bl	8001884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	2302      	movs	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2105      	movs	r1, #5
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fe7c 	bl	80044ac <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ba:	f000 f863 	bl	8001884 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3750      	adds	r7, #80	; 0x50
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2120      	movs	r1, #32
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <system_init+0x40>)
 80017da:	f001 fae7 	bl	8002dac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2140      	movs	r1, #64	; 0x40
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <system_init+0x40>)
 80017e4:	f001 fae2 	bl	8002dac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2110      	movs	r1, #16
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <system_init+0x40>)
 80017ee:	f001 fadd 	bl	8002dac <HAL_GPIO_WritePin>
	  timer_init();
 80017f2:	f000 f84d 	bl	8001890 <timer_init>
	  led7_init();
 80017f6:	f7ff fec1 	bl	800157c <led7_init>
	  button_init();
 80017fa:	f7fe fe63 	bl	80004c4 <button_init>
	  lcd_init();
 80017fe:	f7ff fcf9 	bl	80011f4 <lcd_init>
	  ds3231_init();
 8001802:	f7fe fed7 	bl	80005b4 <ds3231_init>
	  setTimer2(50);
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f000 f84c 	bl	80018a4 <setTimer2>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000

08001814 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, timeElements[0]);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <updateTime+0x6c>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	2006      	movs	r0, #6
 8001822:	f7fe ff0b 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, timeElements[1]);
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <updateTime+0x6c>)
 8001828:	885b      	ldrh	r3, [r3, #2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	2005      	movs	r0, #5
 8001830:	f7fe ff04 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, timeElements[2]);
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <updateTime+0x6c>)
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	2004      	movs	r0, #4
 800183e:	f7fe fefd 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, timeElements[3]);
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <updateTime+0x6c>)
 8001844:	88db      	ldrh	r3, [r3, #6]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4619      	mov	r1, r3
 800184a:	2003      	movs	r0, #3
 800184c:	f7fe fef6 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, timeElements[4]);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <updateTime+0x6c>)
 8001852:	891b      	ldrh	r3, [r3, #8]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	2002      	movs	r0, #2
 800185a:	f7fe feef 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, timeElements[5]);
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <updateTime+0x6c>)
 8001860:	895b      	ldrh	r3, [r3, #10]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	2001      	movs	r0, #1
 8001868:	f7fe fee8 	bl	800063c <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, timeElements[6]);
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <updateTime+0x6c>)
 800186e:	899b      	ldrh	r3, [r3, #12]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	2000      	movs	r0, #0
 8001876:	f7fe fee1 	bl	800063c <ds3231_Write>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000010 	.word	0x20000010

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <timer_init+0x10>)
 8001896:	f003 fe51 	bl	800553c <HAL_TIM_Base_Start_IT>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000198 	.word	0x20000198

080018a4 <setTimer2>:

void setTimer2(uint16_t duration){
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <setTimer2+0x2c>)
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <setTimer2+0x2c>)
 80018b6:	881a      	ldrh	r2, [r3, #0]
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <setTimer2+0x30>)
 80018ba:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <setTimer2+0x34>)
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000013c 	.word	0x2000013c
 80018d4:	2000013a 	.word	0x2000013a
 80018d8:	20000138 	.word	0x20000138

080018dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d116      	bne.n	800191c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d010      	beq.n	8001918 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001900:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800190c:	2201      	movs	r2, #1
 800190e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001916:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001918:	f7ff fe3c 	bl	8001594 <led7_Scan>
	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000013a 	.word	0x2000013a
 8001928:	20000138 	.word	0x20000138
 800192c:	2000013c 	.word	0x2000013c

08001930 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_SPI1_Init+0x64>)
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <MX_SPI1_Init+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_SPI1_Init+0x64>)
 800193c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_SPI1_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_SPI1_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_SPI1_Init+0x64>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_SPI1_Init+0x64>)
 800197c:	220a      	movs	r2, #10
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_SPI1_Init+0x64>)
 8001982:	f002 ff9f 	bl	80048c4 <HAL_SPI_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800198c:	f7ff ff7a 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000140 	.word	0x20000140
 8001998:	40013000 	.word	0x40013000

0800199c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_SPI_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12b      	bne.n	8001a16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_SPI_MspInit+0x88>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_SPI_MspInit+0x88>)
 80019c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_SPI_MspInit+0x88>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_SPI_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_SPI_MspInit+0x88>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_SPI_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019f6:	2338      	movs	r3, #56	; 0x38
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a06:	2305      	movs	r3, #5
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_SPI_MspInit+0x8c>)
 8001a12:	f001 f82f 	bl	8002a74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40013000 	.word	0x40013000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_MspInit+0x4c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 fe7e 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM2_IRQHandler+0x10>)
 8001ad6:	f003 fda1 	bl	800561c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000198 	.word	0x20000198

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b2e:	f240 3247 	movw	r2, #839	; 0x347
 8001b32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b3c:	2263      	movs	r2, #99	; 0x63
 8001b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4c:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b4e:	f003 fca5 	bl	800549c <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b58:	f7ff fe94 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b6a:	f003 fe5f 	bl	800582c <HAL_TIM_ConfigClockSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b74:	f7ff fe86 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b86:	f004 f87b 	bl	8005c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b90:	f7ff fe78 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000198 	.word	0x20000198

08001ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d115      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_TIM_Base_MspInit+0x48>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_TIM_Base_MspInit+0x48>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_TIM_Base_MspInit+0x48>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201c      	movs	r0, #28
 8001bd4:	f000 ff17 	bl	8002a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd8:	201c      	movs	r0, #28
 8001bda:	f000 ff30 	bl	8002a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <storeTime>:
uint8_t setAlarmFlag = 0;
uint8_t holdCounter = 0;

char *modes[] = { "NORMAL", "MODIFY", "SCHEDULE"};

void storeTime() {
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
	timeElements[0] = ds3231_year;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <storeTime+0x54>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <storeTime+0x58>)
 8001bf8:	801a      	strh	r2, [r3, #0]
	timeElements[1] = ds3231_month;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <storeTime+0x5c>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <storeTime+0x58>)
 8001c02:	805a      	strh	r2, [r3, #2]
	timeElements[2] = ds3231_date;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <storeTime+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <storeTime+0x58>)
 8001c0c:	809a      	strh	r2, [r3, #4]
	timeElements[3] = ds3231_day;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <storeTime+0x64>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <storeTime+0x58>)
 8001c16:	80da      	strh	r2, [r3, #6]
	timeElements[4] = ds3231_hours;
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <storeTime+0x68>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <storeTime+0x58>)
 8001c20:	811a      	strh	r2, [r3, #8]
	timeElements[5] = ds3231_min;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <storeTime+0x6c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <storeTime+0x58>)
 8001c2a:	815a      	strh	r2, [r3, #10]
	timeElements[6] = ds3231_sec;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <storeTime+0x70>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <storeTime+0x58>)
 8001c34:	819a      	strh	r2, [r3, #12]
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	20000081 	.word	0x20000081
 8001c44:	20000010 	.word	0x20000010
 8001c48:	20000080 	.word	0x20000080
 8001c4c:	2000007e 	.word	0x2000007e
 8001c50:	2000007f 	.word	0x2000007f
 8001c54:	2000007b 	.word	0x2000007b
 8001c58:	2000007c 	.word	0x2000007c
 8001c5c:	2000007d 	.word	0x2000007d

08001c60 <checkAlarm>:
uint8_t checkAlarm() {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af02      	add	r7, sp, #8
	if (scheduleElements[6] == ds3231_sec && scheduleElements[5] == ds3231_min
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <checkAlarm+0x88>)
 8001c68:	899a      	ldrh	r2, [r3, #12]
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <checkAlarm+0x8c>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d134      	bne.n	8001cde <checkAlarm+0x7e>
 8001c74:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <checkAlarm+0x88>)
 8001c76:	895a      	ldrh	r2, [r3, #10]
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <checkAlarm+0x90>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d12d      	bne.n	8001cde <checkAlarm+0x7e>
		&& scheduleElements[4] == ds3231_hours && scheduleElements[3] == ds3231_day
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <checkAlarm+0x88>)
 8001c84:	891a      	ldrh	r2, [r3, #8]
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <checkAlarm+0x94>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d126      	bne.n	8001cde <checkAlarm+0x7e>
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <checkAlarm+0x88>)
 8001c92:	88da      	ldrh	r2, [r3, #6]
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <checkAlarm+0x98>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d11f      	bne.n	8001cde <checkAlarm+0x7e>
		&& scheduleElements[2] == ds3231_date && scheduleElements[1] == ds3231_month
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <checkAlarm+0x88>)
 8001ca0:	889a      	ldrh	r2, [r3, #4]
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <checkAlarm+0x9c>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d118      	bne.n	8001cde <checkAlarm+0x7e>
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <checkAlarm+0x88>)
 8001cae:	885a      	ldrh	r2, [r3, #2]
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <checkAlarm+0xa0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d111      	bne.n	8001cde <checkAlarm+0x7e>
		&& scheduleElements[0]== ds3231_year){
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <checkAlarm+0x88>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <checkAlarm+0xa4>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10a      	bne.n	8001cde <checkAlarm+0x7e>
		lcd_DrawRectangle(0, 0, 240, 30, RED);
 8001cc8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	231e      	movs	r3, #30
 8001cd0:	22f0      	movs	r2, #240	; 0xf0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff f8c8 	bl	8000e6a <lcd_DrawRectangle>
		return 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <checkAlarm+0x80>
	}
	return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001e4 	.word	0x200001e4
 8001cec:	2000007d 	.word	0x2000007d
 8001cf0:	2000007c 	.word	0x2000007c
 8001cf4:	2000007b 	.word	0x2000007b
 8001cf8:	2000007f 	.word	0x2000007f
 8001cfc:	2000007e 	.word	0x2000007e
 8001d00:	20000080 	.word	0x20000080
 8001d04:	20000081 	.word	0x20000081

08001d08 <timeEdit>:
void timeEdit(enum timeElements currentElement) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af04      	add	r7, sp, #16
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	currentEle = currentElement;
 8001d12:	4a74      	ldr	r2, [pc, #464]	; (8001ee4 <timeEdit+0x1dc>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	7013      	strb	r3, [r2, #0]
	count_LED_debug = (count_LED_debug + 1)%10;
 8001d18:	4b73      	ldr	r3, [pc, #460]	; (8001ee8 <timeEdit+0x1e0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <timeEdit+0x1e4>)
 8001d20:	fb83 1302 	smull	r1, r3, r3, r2
 8001d24:	1099      	asrs	r1, r3, #2
 8001d26:	17d3      	asrs	r3, r2, #31
 8001d28:	1ac9      	subs	r1, r1, r3
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	1ad1      	subs	r1, r2, r3
 8001d34:	b2ca      	uxtb	r2, r1
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <timeEdit+0x1e0>)
 8001d38:	701a      	strb	r2, [r3, #0]
	if (count_LED_debug == 0) {
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <timeEdit+0x1e0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 80cb 	bne.w	8001eda <timeEdit+0x1d2>

		if (currentMode != NORMAL) {
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <timeEdit+0x1e8>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <timeEdit+0x58>
			changeMode = !changeMode;
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <timeEdit+0x1ec>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <timeEdit+0x1ec>)
 8001d5e:	701a      	strb	r2, [r3, #0]
		}
		lcd_ShowIntNum(70, 100, timeElements[4], 2, (currentEle == HOUR) ? (changeMode ? GREEN : BLACK) : GREEN, BLACK, 24);
 8001d60:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <timeEdit+0x1f0>)
 8001d62:	891a      	ldrh	r2, [r3, #8]
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <timeEdit+0x1dc>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d108      	bne.n	8001d7e <timeEdit+0x76>
 8001d6c:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <timeEdit+0x1ec>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <timeEdit+0x72>
 8001d74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d78:	e003      	b.n	8001d82 <timeEdit+0x7a>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e001      	b.n	8001d82 <timeEdit+0x7a>
 8001d7e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d82:	2118      	movs	r1, #24
 8001d84:	9102      	str	r1, [sp, #8]
 8001d86:	2100      	movs	r1, #0
 8001d88:	9101      	str	r1, [sp, #4]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	2046      	movs	r0, #70	; 0x46
 8001d92:	f7ff f98d 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, timeElements[5], 2, (currentEle == MIN) ? (changeMode ? GREEN : BLACK) : GREEN, BLACK, 24);
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <timeEdit+0x1f0>)
 8001d98:	895a      	ldrh	r2, [r3, #10]
 8001d9a:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <timeEdit+0x1dc>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <timeEdit+0xac>
 8001da2:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <timeEdit+0x1ec>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <timeEdit+0xa8>
 8001daa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dae:	e003      	b.n	8001db8 <timeEdit+0xb0>
 8001db0:	2300      	movs	r3, #0
 8001db2:	e001      	b.n	8001db8 <timeEdit+0xb0>
 8001db4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001db8:	2118      	movs	r1, #24
 8001dba:	9102      	str	r1, [sp, #8]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	9101      	str	r1, [sp, #4]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	2164      	movs	r1, #100	; 0x64
 8001dc6:	206e      	movs	r0, #110	; 0x6e
 8001dc8:	f7ff f972 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, timeElements[6], 2, (currentEle == SEC) ? (changeMode ? GREEN : BLACK) : GREEN, BLACK, 24);
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <timeEdit+0x1f0>)
 8001dce:	899a      	ldrh	r2, [r3, #12]
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <timeEdit+0x1dc>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d108      	bne.n	8001dea <timeEdit+0xe2>
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <timeEdit+0x1ec>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <timeEdit+0xde>
 8001de0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001de4:	e003      	b.n	8001dee <timeEdit+0xe6>
 8001de6:	2300      	movs	r3, #0
 8001de8:	e001      	b.n	8001dee <timeEdit+0xe6>
 8001dea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dee:	2118      	movs	r1, #24
 8001df0:	9102      	str	r1, [sp, #8]
 8001df2:	2100      	movs	r1, #0
 8001df4:	9101      	str	r1, [sp, #4]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2164      	movs	r1, #100	; 0x64
 8001dfc:	2096      	movs	r0, #150	; 0x96
 8001dfe:	f7ff f957 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, timeElements[3], 2, (currentEle == DAY) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <timeEdit+0x1f0>)
 8001e04:	88da      	ldrh	r2, [r3, #6]
 8001e06:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <timeEdit+0x1dc>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d108      	bne.n	8001e20 <timeEdit+0x118>
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <timeEdit+0x1ec>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <timeEdit+0x114>
 8001e16:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e1a:	e003      	b.n	8001e24 <timeEdit+0x11c>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e001      	b.n	8001e24 <timeEdit+0x11c>
 8001e20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e24:	2118      	movs	r1, #24
 8001e26:	9102      	str	r1, [sp, #8]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	9101      	str	r1, [sp, #4]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2302      	movs	r3, #2
 8001e30:	2182      	movs	r1, #130	; 0x82
 8001e32:	2014      	movs	r0, #20
 8001e34:	f7ff f93c 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, timeElements[2], 2, (currentEle == DATE) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 8001e38:	4b2f      	ldr	r3, [pc, #188]	; (8001ef8 <timeEdit+0x1f0>)
 8001e3a:	889a      	ldrh	r2, [r3, #4]
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <timeEdit+0x1dc>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d108      	bne.n	8001e56 <timeEdit+0x14e>
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <timeEdit+0x1ec>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <timeEdit+0x14a>
 8001e4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e50:	e003      	b.n	8001e5a <timeEdit+0x152>
 8001e52:	2300      	movs	r3, #0
 8001e54:	e001      	b.n	8001e5a <timeEdit+0x152>
 8001e56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e5a:	2118      	movs	r1, #24
 8001e5c:	9102      	str	r1, [sp, #8]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	9101      	str	r1, [sp, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2302      	movs	r3, #2
 8001e66:	2182      	movs	r1, #130	; 0x82
 8001e68:	2046      	movs	r0, #70	; 0x46
 8001e6a:	f7ff f921 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, timeElements[1], 2, (currentEle == MONTH) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <timeEdit+0x1f0>)
 8001e70:	885a      	ldrh	r2, [r3, #2]
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <timeEdit+0x1dc>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d108      	bne.n	8001e8c <timeEdit+0x184>
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <timeEdit+0x1ec>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <timeEdit+0x180>
 8001e82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e86:	e003      	b.n	8001e90 <timeEdit+0x188>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e001      	b.n	8001e90 <timeEdit+0x188>
 8001e8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e90:	2118      	movs	r1, #24
 8001e92:	9102      	str	r1, [sp, #8]
 8001e94:	2100      	movs	r1, #0
 8001e96:	9101      	str	r1, [sp, #4]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	2182      	movs	r1, #130	; 0x82
 8001e9e:	206e      	movs	r0, #110	; 0x6e
 8001ea0:	f7ff f906 	bl	80010b0 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, timeElements[0], 2, (currentEle == YEAR) ? (changeMode ? YELLOW : BLACK) : YELLOW, BLACK, 24);
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <timeEdit+0x1f0>)
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <timeEdit+0x1dc>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d108      	bne.n	8001ec2 <timeEdit+0x1ba>
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <timeEdit+0x1ec>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <timeEdit+0x1b6>
 8001eb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ebc:	e003      	b.n	8001ec6 <timeEdit+0x1be>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e001      	b.n	8001ec6 <timeEdit+0x1be>
 8001ec2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ec6:	2118      	movs	r1, #24
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	2100      	movs	r1, #0
 8001ecc:	9101      	str	r1, [sp, #4]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	2182      	movs	r1, #130	; 0x82
 8001ed4:	2096      	movs	r0, #150	; 0x96
 8001ed6:	f7ff f8eb 	bl	80010b0 <lcd_ShowIntNum>

	}
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001e0 	.word	0x200001e0
 8001ee8:	200001e2 	.word	0x200001e2
 8001eec:	66666667 	.word	0x66666667
 8001ef0:	2000000d 	.word	0x2000000d
 8001ef4:	200001e1 	.word	0x200001e1
 8001ef8:	20000010 	.word	0x20000010

08001efc <displayTime>:
void displayTime(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af04      	add	r7, sp, #16

	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001f02:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <displayTime+0xe0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2318      	movs	r3, #24
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2302      	movs	r3, #2
 8001f18:	2164      	movs	r1, #100	; 0x64
 8001f1a:	2046      	movs	r0, #70	; 0x46
 8001f1c:	f7ff f8c8 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <displayTime+0xe4>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	2318      	movs	r3, #24
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2302      	movs	r3, #2
 8001f36:	2164      	movs	r1, #100	; 0x64
 8001f38:	206e      	movs	r0, #110	; 0x6e
 8001f3a:	f7ff f8b9 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001f3e:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <displayTime+0xe8>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2318      	movs	r3, #24
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2302      	movs	r3, #2
 8001f54:	2164      	movs	r1, #100	; 0x64
 8001f56:	2096      	movs	r0, #150	; 0x96
 8001f58:	f7ff f8aa 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <displayTime+0xec>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	2318      	movs	r3, #24
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2302      	movs	r3, #2
 8001f72:	2182      	movs	r1, #130	; 0x82
 8001f74:	2014      	movs	r0, #20
 8001f76:	f7ff f89b 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <displayTime+0xf0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2318      	movs	r3, #24
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	2182      	movs	r1, #130	; 0x82
 8001f92:	2046      	movs	r0, #70	; 0x46
 8001f94:	f7ff f88c 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <displayTime+0xf4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	2318      	movs	r3, #24
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2302      	movs	r3, #2
 8001fae:	2182      	movs	r1, #130	; 0x82
 8001fb0:	206e      	movs	r0, #110	; 0x6e
 8001fb2:	f7ff f87d 	bl	80010b0 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <displayTime+0xf8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	2318      	movs	r3, #24
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	2182      	movs	r1, #130	; 0x82
 8001fce:	2096      	movs	r0, #150	; 0x96
 8001fd0:	f7ff f86e 	bl	80010b0 <lcd_ShowIntNum>
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000007b 	.word	0x2000007b
 8001fe0:	2000007c 	.word	0x2000007c
 8001fe4:	2000007d 	.word	0x2000007d
 8001fe8:	2000007f 	.word	0x2000007f
 8001fec:	2000007e 	.word	0x2000007e
 8001ff0:	20000080 	.word	0x20000080
 8001ff4:	20000081 	.word	0x20000081

08001ff8 <button_press>:
void button_press() {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af04      	add	r7, sp, #16
	if (button_count[0]%20 == 1 ) {
 8001ffe:	4b99      	ldr	r3, [pc, #612]	; (8002264 <button_press+0x26c>)
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	4b99      	ldr	r3, [pc, #612]	; (8002268 <button_press+0x270>)
 8002004:	fba3 1302 	umull	r1, r3, r3, r2
 8002008:	0919      	lsrs	r1, r3, #4
 800200a:	460b      	mov	r3, r1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d111      	bne.n	800203e <button_press+0x46>
		curMode = (curMode + 1) % 3;
 800201a:	4b94      	ldr	r3, [pc, #592]	; (800226c <button_press+0x274>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	4b93      	ldr	r3, [pc, #588]	; (8002270 <button_press+0x278>)
 8002022:	fb83 3102 	smull	r3, r1, r3, r2
 8002026:	17d3      	asrs	r3, r2, #31
 8002028:	1ac9      	subs	r1, r1, r3
 800202a:	460b      	mov	r3, r1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	440b      	add	r3, r1
 8002030:	1ad1      	subs	r1, r2, r3
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	4b8d      	ldr	r3, [pc, #564]	; (800226c <button_press+0x274>)
 8002036:	701a      	strb	r2, [r3, #0]
	  confirmChangeTime = 1;
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <button_press+0x27c>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
	}
	  if (curMode != 0) {
 800203e:	4b8b      	ldr	r3, [pc, #556]	; (800226c <button_press+0x274>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 81cc 	beq.w	80023e0 <button_press+0x3e8>
		  if (confirmChangeTime) {
 8002048:	4b8a      	ldr	r3, [pc, #552]	; (8002274 <button_press+0x27c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <button_press+0x70>
			  currentEle = SEC;
 8002050:	4b89      	ldr	r3, [pc, #548]	; (8002278 <button_press+0x280>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
			  nextEle = currentEle;
 8002056:	4b88      	ldr	r3, [pc, #544]	; (8002278 <button_press+0x280>)
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	4b88      	ldr	r3, [pc, #544]	; (800227c <button_press+0x284>)
 800205c:	701a      	strb	r2, [r3, #0]
			  storeTime();
 800205e:	f7ff fdc5 	bl	8001bec <storeTime>
			  confirmChangeTime = 0;
 8002062:	4b84      	ldr	r3, [pc, #528]	; (8002274 <button_press+0x27c>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		  }
			  if (button_count[3]%20 == 1) {
 8002068:	4b7e      	ldr	r3, [pc, #504]	; (8002264 <button_press+0x26c>)
 800206a:	88da      	ldrh	r2, [r3, #6]
 800206c:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <button_press+0x270>)
 800206e:	fba3 1302 	umull	r1, r3, r3, r2
 8002072:	0919      	lsrs	r1, r3, #4
 8002074:	460b      	mov	r3, r1
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b01      	cmp	r3, #1
 8002082:	f040 808d 	bne.w	80021a0 <button_press+0x1a8>
				  holdCounter = 0;
 8002086:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <button_press+0x288>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
				  switch (currentEle){
 800208c:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <button_press+0x280>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b06      	cmp	r3, #6
 8002092:	f200 8085 	bhi.w	80021a0 <button_press+0x1a8>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <button_press+0xa4>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	080020b9 	.word	0x080020b9
 80020a0:	080020db 	.word	0x080020db
 80020a4:	080020fd 	.word	0x080020fd
 80020a8:	0800211f 	.word	0x0800211f
 80020ac:	08002141 	.word	0x08002141
 80020b0:	08002163 	.word	0x08002163
 80020b4:	08002185 	.word	0x08002185
				  case SEC:
					  timeElements[6]++;
 80020b8:	4b72      	ldr	r3, [pc, #456]	; (8002284 <button_press+0x28c>)
 80020ba:	899b      	ldrh	r3, [r3, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b70      	ldr	r3, [pc, #448]	; (8002284 <button_press+0x28c>)
 80020c2:	819a      	strh	r2, [r3, #12]
					  if (timeElements[6] >= 60) {
 80020c4:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <button_press+0x28c>)
 80020c6:	899b      	ldrh	r3, [r3, #12]
 80020c8:	2b3b      	cmp	r3, #59	; 0x3b
 80020ca:	d902      	bls.n	80020d2 <button_press+0xda>
						  timeElements[6] = 0;
 80020cc:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <button_press+0x28c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	819a      	strh	r2, [r3, #12]
					  }
					  nextEle = MIN;
 80020d2:	4b6a      	ldr	r3, [pc, #424]	; (800227c <button_press+0x284>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
					  break;
 80020d8:	e062      	b.n	80021a0 <button_press+0x1a8>
				  case MIN:
					  timeElements[5]++;
 80020da:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <button_press+0x28c>)
 80020dc:	895b      	ldrh	r3, [r3, #10]
 80020de:	3301      	adds	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b68      	ldr	r3, [pc, #416]	; (8002284 <button_press+0x28c>)
 80020e4:	815a      	strh	r2, [r3, #10]
					  if (timeElements[5] >= 60) {
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <button_press+0x28c>)
 80020e8:	895b      	ldrh	r3, [r3, #10]
 80020ea:	2b3b      	cmp	r3, #59	; 0x3b
 80020ec:	d902      	bls.n	80020f4 <button_press+0xfc>
						  timeElements[5] = 0;
 80020ee:	4b65      	ldr	r3, [pc, #404]	; (8002284 <button_press+0x28c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	815a      	strh	r2, [r3, #10]
					  }
					  nextEle = HOUR;
 80020f4:	4b61      	ldr	r3, [pc, #388]	; (800227c <button_press+0x284>)
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
					  break;
 80020fa:	e051      	b.n	80021a0 <button_press+0x1a8>
				  case HOUR:
					  timeElements[4]++;
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <button_press+0x28c>)
 80020fe:	891b      	ldrh	r3, [r3, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <button_press+0x28c>)
 8002106:	811a      	strh	r2, [r3, #8]
					  if (timeElements[4] >= 24) {
 8002108:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <button_press+0x28c>)
 800210a:	891b      	ldrh	r3, [r3, #8]
 800210c:	2b17      	cmp	r3, #23
 800210e:	d902      	bls.n	8002116 <button_press+0x11e>
						  timeElements[4] = 0;
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <button_press+0x28c>)
 8002112:	2200      	movs	r2, #0
 8002114:	811a      	strh	r2, [r3, #8]
					  }
					  nextEle = DAY;
 8002116:	4b59      	ldr	r3, [pc, #356]	; (800227c <button_press+0x284>)
 8002118:	2203      	movs	r2, #3
 800211a:	701a      	strb	r2, [r3, #0]
					  break;
 800211c:	e040      	b.n	80021a0 <button_press+0x1a8>
				  case DAY:
					  timeElements[3]++;
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <button_press+0x28c>)
 8002120:	88db      	ldrh	r3, [r3, #6]
 8002122:	3301      	adds	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	4b57      	ldr	r3, [pc, #348]	; (8002284 <button_press+0x28c>)
 8002128:	80da      	strh	r2, [r3, #6]
					  if (timeElements[3] >= 8) {
 800212a:	4b56      	ldr	r3, [pc, #344]	; (8002284 <button_press+0x28c>)
 800212c:	88db      	ldrh	r3, [r3, #6]
 800212e:	2b07      	cmp	r3, #7
 8002130:	d902      	bls.n	8002138 <button_press+0x140>
						  timeElements[3] = 1;
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <button_press+0x28c>)
 8002134:	2201      	movs	r2, #1
 8002136:	80da      	strh	r2, [r3, #6]
					  }
					  nextEle = DATE;
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <button_press+0x284>)
 800213a:	2204      	movs	r2, #4
 800213c:	701a      	strb	r2, [r3, #0]
					  break;
 800213e:	e02f      	b.n	80021a0 <button_press+0x1a8>
				  case DATE:
					  timeElements[2]++;
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <button_press+0x28c>)
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <button_press+0x28c>)
 800214a:	809a      	strh	r2, [r3, #4]
					  if (timeElements[2] >= 32) {
 800214c:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <button_press+0x28c>)
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	2b1f      	cmp	r3, #31
 8002152:	d902      	bls.n	800215a <button_press+0x162>
						  timeElements[2] = 1;
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <button_press+0x28c>)
 8002156:	2201      	movs	r2, #1
 8002158:	809a      	strh	r2, [r3, #4]
					  }
					  nextEle = MONTH;
 800215a:	4b48      	ldr	r3, [pc, #288]	; (800227c <button_press+0x284>)
 800215c:	2205      	movs	r2, #5
 800215e:	701a      	strb	r2, [r3, #0]
					  break;
 8002160:	e01e      	b.n	80021a0 <button_press+0x1a8>
				  case MONTH:
					  timeElements[1]++;
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <button_press+0x28c>)
 8002164:	885b      	ldrh	r3, [r3, #2]
 8002166:	3301      	adds	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <button_press+0x28c>)
 800216c:	805a      	strh	r2, [r3, #2]
					  if (timeElements[1] >= 13) {
 800216e:	4b45      	ldr	r3, [pc, #276]	; (8002284 <button_press+0x28c>)
 8002170:	885b      	ldrh	r3, [r3, #2]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d902      	bls.n	800217c <button_press+0x184>
						  timeElements[1] = 1;
 8002176:	4b43      	ldr	r3, [pc, #268]	; (8002284 <button_press+0x28c>)
 8002178:	2201      	movs	r2, #1
 800217a:	805a      	strh	r2, [r3, #2]
					  }
					  nextEle = YEAR;
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <button_press+0x284>)
 800217e:	2206      	movs	r2, #6
 8002180:	701a      	strb	r2, [r3, #0]
					  break;
 8002182:	e00d      	b.n	80021a0 <button_press+0x1a8>
				  case YEAR:
					  timeElements[0]++;
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <button_press+0x28c>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <button_press+0x28c>)
 800218e:	801a      	strh	r2, [r3, #0]
					  if (timeElements[0] >= 100) {
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <button_press+0x28c>)
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	2b63      	cmp	r3, #99	; 0x63
 8002196:	d902      	bls.n	800219e <button_press+0x1a6>
						  timeElements[0] = 1;
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <button_press+0x28c>)
 800219a:	2201      	movs	r2, #1
 800219c:	801a      	strh	r2, [r3, #0]
					  }
					  break;
 800219e:	bf00      	nop
				  }

			  }
			  if (button_count[3] >= 40) { // Long press behavior
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <button_press+0x26c>)
 80021a2:	88db      	ldrh	r3, [r3, #6]
 80021a4:	2b27      	cmp	r3, #39	; 0x27
 80021a6:	f240 80a6 	bls.w	80022f6 <button_press+0x2fe>
				  holdCounter++;
 80021aa:	4b35      	ldr	r3, [pc, #212]	; (8002280 <button_press+0x288>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b33      	ldr	r3, [pc, #204]	; (8002280 <button_press+0x288>)
 80021b4:	701a      	strb	r2, [r3, #0]
				  if (holdCounter >= 4) { // 4 * 50ms = 200ms
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <button_press+0x288>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	f240 809b 	bls.w	80022f6 <button_press+0x2fe>
					  holdCounter = 0; // Reset hold counter
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <button_press+0x288>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
					  switch (currentEle) {
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <button_press+0x280>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	f200 8093 	bhi.w	80022f6 <button_press+0x2fe>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <button_press+0x1e0>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021f5 	.word	0x080021f5
 80021dc:	08002211 	.word	0x08002211
 80021e0:	0800222d 	.word	0x0800222d
 80021e4:	08002249 	.word	0x08002249
 80021e8:	08002289 	.word	0x08002289
 80021ec:	080022a5 	.word	0x080022a5
 80021f0:	080022c1 	.word	0x080022c1
						  case SEC:
							  timeElements[6]++;
 80021f4:	4b23      	ldr	r3, [pc, #140]	; (8002284 <button_press+0x28c>)
 80021f6:	899b      	ldrh	r3, [r3, #12]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <button_press+0x28c>)
 80021fe:	819a      	strh	r2, [r3, #12]
							  if (timeElements[6] >= 60) timeElements[6] = 0;
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <button_press+0x28c>)
 8002202:	899b      	ldrh	r3, [r3, #12]
 8002204:	2b3b      	cmp	r3, #59	; 0x3b
 8002206:	d969      	bls.n	80022dc <button_press+0x2e4>
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <button_press+0x28c>)
 800220a:	2200      	movs	r2, #0
 800220c:	819a      	strh	r2, [r3, #12]
							  break;
 800220e:	e065      	b.n	80022dc <button_press+0x2e4>
						  case MIN:
							  timeElements[5]++;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <button_press+0x28c>)
 8002212:	895b      	ldrh	r3, [r3, #10]
 8002214:	3301      	adds	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <button_press+0x28c>)
 800221a:	815a      	strh	r2, [r3, #10]
							  if (timeElements[5] >= 60) timeElements[5] = 0;
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <button_press+0x28c>)
 800221e:	895b      	ldrh	r3, [r3, #10]
 8002220:	2b3b      	cmp	r3, #59	; 0x3b
 8002222:	d95d      	bls.n	80022e0 <button_press+0x2e8>
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <button_press+0x28c>)
 8002226:	2200      	movs	r2, #0
 8002228:	815a      	strh	r2, [r3, #10]
							  break;
 800222a:	e059      	b.n	80022e0 <button_press+0x2e8>
						  case HOUR:
							  timeElements[4]++;
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <button_press+0x28c>)
 800222e:	891b      	ldrh	r3, [r3, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <button_press+0x28c>)
 8002236:	811a      	strh	r2, [r3, #8]
							  if (timeElements[4] >= 24) timeElements[4] = 0;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <button_press+0x28c>)
 800223a:	891b      	ldrh	r3, [r3, #8]
 800223c:	2b17      	cmp	r3, #23
 800223e:	d951      	bls.n	80022e4 <button_press+0x2ec>
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <button_press+0x28c>)
 8002242:	2200      	movs	r2, #0
 8002244:	811a      	strh	r2, [r3, #8]
							  break;
 8002246:	e04d      	b.n	80022e4 <button_press+0x2ec>
						  case DAY:
							  timeElements[3]++;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <button_press+0x28c>)
 800224a:	88db      	ldrh	r3, [r3, #6]
 800224c:	3301      	adds	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <button_press+0x28c>)
 8002252:	80da      	strh	r2, [r3, #6]
							  if (timeElements[3] >= 8) timeElements[3] = 1;
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <button_press+0x28c>)
 8002256:	88db      	ldrh	r3, [r3, #6]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d945      	bls.n	80022e8 <button_press+0x2f0>
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <button_press+0x28c>)
 800225e:	2201      	movs	r2, #1
 8002260:	80da      	strh	r2, [r3, #6]
							  break;
 8002262:	e041      	b.n	80022e8 <button_press+0x2f0>
 8002264:	20000050 	.word	0x20000050
 8002268:	cccccccd 	.word	0xcccccccd
 800226c:	200001f2 	.word	0x200001f2
 8002270:	55555556 	.word	0x55555556
 8002274:	200001f3 	.word	0x200001f3
 8002278:	200001e0 	.word	0x200001e0
 800227c:	2000000c 	.word	0x2000000c
 8002280:	200001f5 	.word	0x200001f5
 8002284:	20000010 	.word	0x20000010
						  case DATE:
							  timeElements[2]++;
 8002288:	4ba4      	ldr	r3, [pc, #656]	; (800251c <button_press+0x524>)
 800228a:	889b      	ldrh	r3, [r3, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	4ba2      	ldr	r3, [pc, #648]	; (800251c <button_press+0x524>)
 8002292:	809a      	strh	r2, [r3, #4]
							  if (timeElements[2] >= 32) timeElements[2] = 1;
 8002294:	4ba1      	ldr	r3, [pc, #644]	; (800251c <button_press+0x524>)
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	2b1f      	cmp	r3, #31
 800229a:	d927      	bls.n	80022ec <button_press+0x2f4>
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <button_press+0x524>)
 800229e:	2201      	movs	r2, #1
 80022a0:	809a      	strh	r2, [r3, #4]
							  break;
 80022a2:	e023      	b.n	80022ec <button_press+0x2f4>
						  case MONTH:
							  timeElements[1]++;
 80022a4:	4b9d      	ldr	r3, [pc, #628]	; (800251c <button_press+0x524>)
 80022a6:	885b      	ldrh	r3, [r3, #2]
 80022a8:	3301      	adds	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	4b9b      	ldr	r3, [pc, #620]	; (800251c <button_press+0x524>)
 80022ae:	805a      	strh	r2, [r3, #2]
							  if (timeElements[1] >= 13) timeElements[1] = 1;
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <button_press+0x524>)
 80022b2:	885b      	ldrh	r3, [r3, #2]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d91b      	bls.n	80022f0 <button_press+0x2f8>
 80022b8:	4b98      	ldr	r3, [pc, #608]	; (800251c <button_press+0x524>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	805a      	strh	r2, [r3, #2]
							  break;
 80022be:	e017      	b.n	80022f0 <button_press+0x2f8>
						  case YEAR:
							  timeElements[0]++;
 80022c0:	4b96      	ldr	r3, [pc, #600]	; (800251c <button_press+0x524>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b94      	ldr	r3, [pc, #592]	; (800251c <button_press+0x524>)
 80022ca:	801a      	strh	r2, [r3, #0]
							  if (timeElements[0] >= 100) timeElements[0] = 1;
 80022cc:	4b93      	ldr	r3, [pc, #588]	; (800251c <button_press+0x524>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	2b63      	cmp	r3, #99	; 0x63
 80022d2:	d90f      	bls.n	80022f4 <button_press+0x2fc>
 80022d4:	4b91      	ldr	r3, [pc, #580]	; (800251c <button_press+0x524>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	801a      	strh	r2, [r3, #0]
							  break;
 80022da:	e00b      	b.n	80022f4 <button_press+0x2fc>
							  break;
 80022dc:	bf00      	nop
 80022de:	e00a      	b.n	80022f6 <button_press+0x2fe>
							  break;
 80022e0:	bf00      	nop
 80022e2:	e008      	b.n	80022f6 <button_press+0x2fe>
							  break;
 80022e4:	bf00      	nop
 80022e6:	e006      	b.n	80022f6 <button_press+0x2fe>
							  break;
 80022e8:	bf00      	nop
 80022ea:	e004      	b.n	80022f6 <button_press+0x2fe>
							  break;
 80022ec:	bf00      	nop
 80022ee:	e002      	b.n	80022f6 <button_press+0x2fe>
							  break;
 80022f0:	bf00      	nop
 80022f2:	e000      	b.n	80022f6 <button_press+0x2fe>
							  break;
 80022f4:	bf00      	nop
					  }
				  }
			  }
			  if (button_count[12]%20 == 1) {
 80022f6:	4b8a      	ldr	r3, [pc, #552]	; (8002520 <button_press+0x528>)
 80022f8:	8b1a      	ldrh	r2, [r3, #24]
 80022fa:	4b8a      	ldr	r3, [pc, #552]	; (8002524 <button_press+0x52c>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	0919      	lsrs	r1, r3, #4
 8002302:	460b      	mov	r3, r1
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d160      	bne.n	80023d4 <button_press+0x3dc>
				  if (curMode != 2) {
 8002312:	4b85      	ldr	r3, [pc, #532]	; (8002528 <button_press+0x530>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d001      	beq.n	800231e <button_press+0x326>
					  updateTime();
 800231a:	f7ff fa7b 	bl	8001814 <updateTime>
				  }
				  if (nextEle == currentEle && currentEle != YEAR) {
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <button_press+0x534>)
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	4b83      	ldr	r3, [pc, #524]	; (8002530 <button_press+0x538>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d12e      	bne.n	8002388 <button_press+0x390>
 800232a:	4b81      	ldr	r3, [pc, #516]	; (8002530 <button_press+0x538>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d02a      	beq.n	8002388 <button_press+0x390>
					  switch(currentEle) {
 8002332:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <button_press+0x538>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d826      	bhi.n	8002388 <button_press+0x390>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <button_press+0x348>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002359 	.word	0x08002359
 8002344:	08002361 	.word	0x08002361
 8002348:	08002369 	.word	0x08002369
 800234c:	08002371 	.word	0x08002371
 8002350:	08002379 	.word	0x08002379
 8002354:	08002381 	.word	0x08002381
					  case SEC:
						  nextEle = MIN;
 8002358:	4b74      	ldr	r3, [pc, #464]	; (800252c <button_press+0x534>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
						  break;
 800235e:	e013      	b.n	8002388 <button_press+0x390>
					  case MIN:
						  nextEle = HOUR;
 8002360:	4b72      	ldr	r3, [pc, #456]	; (800252c <button_press+0x534>)
 8002362:	2202      	movs	r2, #2
 8002364:	701a      	strb	r2, [r3, #0]
						  break;
 8002366:	e00f      	b.n	8002388 <button_press+0x390>
					  case HOUR:
						  nextEle = DAY;
 8002368:	4b70      	ldr	r3, [pc, #448]	; (800252c <button_press+0x534>)
 800236a:	2203      	movs	r2, #3
 800236c:	701a      	strb	r2, [r3, #0]
						  break;
 800236e:	e00b      	b.n	8002388 <button_press+0x390>
					  case DAY:
						  nextEle = DATE;
 8002370:	4b6e      	ldr	r3, [pc, #440]	; (800252c <button_press+0x534>)
 8002372:	2204      	movs	r2, #4
 8002374:	701a      	strb	r2, [r3, #0]
						  break;
 8002376:	e007      	b.n	8002388 <button_press+0x390>
					  case DATE:
						  nextEle = MONTH;
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <button_press+0x534>)
 800237a:	2205      	movs	r2, #5
 800237c:	701a      	strb	r2, [r3, #0]
						  break;
 800237e:	e003      	b.n	8002388 <button_press+0x390>
					  case MONTH:
						  nextEle = YEAR;
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <button_press+0x534>)
 8002382:	2206      	movs	r2, #6
 8002384:	701a      	strb	r2, [r3, #0]
						  break;
 8002386:	bf00      	nop

					  }
				  }

				  if (currentEle == YEAR) {
 8002388:	4b69      	ldr	r3, [pc, #420]	; (8002530 <button_press+0x538>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d11d      	bne.n	80023cc <button_press+0x3d4>
					  if (curMode == 2) {
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <button_press+0x530>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d113      	bne.n	80023c0 <button_press+0x3c8>
						  setAlarmFlag = 1;
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <button_press+0x53c>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
						  for (int i = 0; i < 7; i++){
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	e00a      	b.n	80023ba <button_press+0x3c2>
							  scheduleElements[i] = timeElements[i];
 80023a4:	4a5d      	ldr	r2, [pc, #372]	; (800251c <button_press+0x524>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80023ac:	4a62      	ldr	r2, [pc, #392]	; (8002538 <button_press+0x540>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						  for (int i = 0; i < 7; i++){
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3301      	adds	r3, #1
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b06      	cmp	r3, #6
 80023be:	ddf1      	ble.n	80023a4 <button_press+0x3ac>
						  }
					  }
					  confirmChangeTime = 1;
 80023c0:	4b5e      	ldr	r3, [pc, #376]	; (800253c <button_press+0x544>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
					  curMode = 0;
 80023c6:	4b58      	ldr	r3, [pc, #352]	; (8002528 <button_press+0x530>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]

				  }
				  currentEle = nextEle;
 80023cc:	4b57      	ldr	r3, [pc, #348]	; (800252c <button_press+0x534>)
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	4b57      	ldr	r3, [pc, #348]	; (8002530 <button_press+0x538>)
 80023d2:	701a      	strb	r2, [r3, #0]


			  }

			  timeEdit(currentEle);
 80023d4:	4b56      	ldr	r3, [pc, #344]	; (8002530 <button_press+0x538>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fc95 	bl	8001d08 <timeEdit>
 80023de:	e001      	b.n	80023e4 <button_press+0x3ec>

	  } else displayTime();
 80023e0:	f7ff fd8c 	bl	8001efc <displayTime>
	  lcd_ShowStr(30, 50, modes[curMode], WHITE, RED, 24,0);
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <button_press+0x530>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b55      	ldr	r3, [pc, #340]	; (8002540 <button_press+0x548>)
 80023ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	2318      	movs	r3, #24
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002402:	2132      	movs	r1, #50	; 0x32
 8002404:	201e      	movs	r0, #30
 8002406:	f7ff f855 	bl	80014b4 <lcd_ShowStr>
	  	  if (setAlarmFlag) {
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <button_press+0x53c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 810e 	beq.w	8002630 <button_press+0x638>
	  		  lcd_ShowStr(30, 185, "alarm at" , WHITE, RED, 24,0);
 8002414:	2300      	movs	r3, #0
 8002416:	9302      	str	r3, [sp, #8]
 8002418:	2318      	movs	r3, #24
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <button_press+0x54c>)
 8002428:	21b9      	movs	r1, #185	; 0xb9
 800242a:	201e      	movs	r0, #30
 800242c:	f7ff f842 	bl	80014b4 <lcd_ShowStr>
	  		  lcd_ShowIntNum(130, 185, 2000 + scheduleElements[0], 2, GREEN, BLACK, 24);
 8002430:	4b41      	ldr	r3, [pc, #260]	; (8002538 <button_press+0x540>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002438:	b29a      	uxth	r2, r3
 800243a:	2318      	movs	r3, #24
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	2300      	movs	r3, #0
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2302      	movs	r3, #2
 800244a:	21b9      	movs	r1, #185	; 0xb9
 800244c:	2082      	movs	r0, #130	; 0x82
 800244e:	f7fe fe2f 	bl	80010b0 <lcd_ShowIntNum>
	  		  lcd_ShowStr(160, 185, "year" , WHITE, RED, 24,0);
 8002452:	2300      	movs	r3, #0
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2318      	movs	r3, #24
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <button_press+0x550>)
 8002466:	21b9      	movs	r1, #185	; 0xb9
 8002468:	20a0      	movs	r0, #160	; 0xa0
 800246a:	f7ff f823 	bl	80014b4 <lcd_ShowStr>
	  		  lcd_ShowIntNum(130, 210, scheduleElements[1], 2, GREEN, BLACK, 24);
 800246e:	4b32      	ldr	r3, [pc, #200]	; (8002538 <button_press+0x540>)
 8002470:	885a      	ldrh	r2, [r3, #2]
 8002472:	2318      	movs	r3, #24
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	2300      	movs	r3, #0
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2302      	movs	r3, #2
 8002482:	21d2      	movs	r1, #210	; 0xd2
 8002484:	2082      	movs	r0, #130	; 0x82
 8002486:	f7fe fe13 	bl	80010b0 <lcd_ShowIntNum>
	  		  lcd_ShowStr(160, 210, "month" , WHITE, RED, 24,0);
 800248a:	2300      	movs	r3, #0
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	2318      	movs	r3, #24
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <button_press+0x554>)
 800249e:	21d2      	movs	r1, #210	; 0xd2
 80024a0:	20a0      	movs	r0, #160	; 0xa0
 80024a2:	f7ff f807 	bl	80014b4 <lcd_ShowStr>
	  		  lcd_ShowIntNum(130, 235, scheduleElements[2], 2, GREEN, BLACK, 24);
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <button_press+0x540>)
 80024a8:	889a      	ldrh	r2, [r3, #4]
 80024aa:	2318      	movs	r3, #24
 80024ac:	9302      	str	r3, [sp, #8]
 80024ae:	2300      	movs	r3, #0
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2302      	movs	r3, #2
 80024ba:	21eb      	movs	r1, #235	; 0xeb
 80024bc:	2082      	movs	r0, #130	; 0x82
 80024be:	f7fe fdf7 	bl	80010b0 <lcd_ShowIntNum>
	  		  lcd_ShowStr(160, 235, "date" , WHITE, RED, 24,0);
 80024c2:	2300      	movs	r3, #0
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2318      	movs	r3, #24
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d4:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <button_press+0x558>)
 80024d6:	21eb      	movs	r1, #235	; 0xeb
 80024d8:	20a0      	movs	r0, #160	; 0xa0
 80024da:	f7fe ffeb 	bl	80014b4 <lcd_ShowStr>
	  		  lcd_ShowStr(160, 260, (scheduleElements[3] == 1) ? "MONDAY"
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <button_press+0x540>)
 80024e0:	88db      	ldrh	r3, [r3, #6]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d042      	beq.n	800256c <button_press+0x574>
	  				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <button_press+0x540>)
 80024e8:	88db      	ldrh	r3, [r3, #6]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d03c      	beq.n	8002568 <button_press+0x570>
	  						  : (scheduleElements[3] == 3) ? "WEDNESDAY"
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <button_press+0x540>)
 80024f0:	88db      	ldrh	r3, [r3, #6]
	  				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d036      	beq.n	8002564 <button_press+0x56c>
	  						  :(scheduleElements[3] == 4) ? "THURSDAY"
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <button_press+0x540>)
 80024f8:	88db      	ldrh	r3, [r3, #6]
	  				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d030      	beq.n	8002560 <button_press+0x568>
	  						  : (scheduleElements[3] == 5) ? "FRIDAY"
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <button_press+0x540>)
 8002500:	88db      	ldrh	r3, [r3, #6]
	  				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 8002502:	2b05      	cmp	r3, #5
 8002504:	d007      	beq.n	8002516 <button_press+0x51e>
	  						  :(scheduleElements[3] == 6) ? "SATURDAY"
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <button_press+0x540>)
 8002508:	88db      	ldrh	r3, [r3, #6]
	  				  	  	  : (scheduleElements[3] == 2) ? "TUESDAY"
 800250a:	2b06      	cmp	r3, #6
 800250c:	d101      	bne.n	8002512 <button_press+0x51a>
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <button_press+0x55c>)
 8002510:	e02d      	b.n	800256e <button_press+0x576>
 8002512:	4a11      	ldr	r2, [pc, #68]	; (8002558 <button_press+0x560>)
 8002514:	e02b      	b.n	800256e <button_press+0x576>
 8002516:	4a11      	ldr	r2, [pc, #68]	; (800255c <button_press+0x564>)
 8002518:	e029      	b.n	800256e <button_press+0x576>
 800251a:	bf00      	nop
 800251c:	20000010 	.word	0x20000010
 8002520:	20000050 	.word	0x20000050
 8002524:	cccccccd 	.word	0xcccccccd
 8002528:	200001f2 	.word	0x200001f2
 800252c:	2000000c 	.word	0x2000000c
 8002530:	200001e0 	.word	0x200001e0
 8002534:	200001f4 	.word	0x200001f4
 8002538:	200001e4 	.word	0x200001e4
 800253c:	200001f3 	.word	0x200001f3
 8002540:	20000020 	.word	0x20000020
 8002544:	08005fcc 	.word	0x08005fcc
 8002548:	08005fd8 	.word	0x08005fd8
 800254c:	08005fe0 	.word	0x08005fe0
 8002550:	08005fe8 	.word	0x08005fe8
 8002554:	08005ff0 	.word	0x08005ff0
 8002558:	08005ffc 	.word	0x08005ffc
 800255c:	08006004 	.word	0x08006004
 8002560:	4a35      	ldr	r2, [pc, #212]	; (8002638 <button_press+0x640>)
 8002562:	e004      	b.n	800256e <button_press+0x576>
 8002564:	4a35      	ldr	r2, [pc, #212]	; (800263c <button_press+0x644>)
 8002566:	e002      	b.n	800256e <button_press+0x576>
 8002568:	4a35      	ldr	r2, [pc, #212]	; (8002640 <button_press+0x648>)
 800256a:	e000      	b.n	800256e <button_press+0x576>
	  		  lcd_ShowStr(160, 260, (scheduleElements[3] == 1) ? "MONDAY"
 800256c:	4a35      	ldr	r2, [pc, #212]	; (8002644 <button_press+0x64c>)
 800256e:	2300      	movs	r3, #0
 8002570:	9302      	str	r3, [sp, #8]
 8002572:	2318      	movs	r3, #24
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002580:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002584:	20a0      	movs	r0, #160	; 0xa0
 8002586:	f7fe ff95 	bl	80014b4 <lcd_ShowStr>
	  						  : "SUNDAY", WHITE, RED, 24,0);
	  		  lcd_ShowIntNum(20, 260, scheduleElements[4], 2, GREEN, BLACK, 24);
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <button_press+0x650>)
 800258c:	891a      	ldrh	r2, [r3, #8]
 800258e:	2318      	movs	r3, #24
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	2300      	movs	r3, #0
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2302      	movs	r3, #2
 800259e:	f44f 7182 	mov.w	r1, #260	; 0x104
 80025a2:	2014      	movs	r0, #20
 80025a4:	f7fe fd84 	bl	80010b0 <lcd_ShowIntNum>
	  		  lcd_ShowStr(50, 260, ":" , WHITE, RED, 24,0);
 80025a8:	2300      	movs	r3, #0
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	2318      	movs	r3, #24
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <button_press+0x654>)
 80025bc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80025c0:	2032      	movs	r0, #50	; 0x32
 80025c2:	f7fe ff77 	bl	80014b4 <lcd_ShowStr>
	  		  lcd_ShowIntNum(65, 260, scheduleElements[5], 2, GREEN, BLACK, 24);
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <button_press+0x650>)
 80025c8:	895a      	ldrh	r2, [r3, #10]
 80025ca:	2318      	movs	r3, #24
 80025cc:	9302      	str	r3, [sp, #8]
 80025ce:	2300      	movs	r3, #0
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2302      	movs	r3, #2
 80025da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80025de:	2041      	movs	r0, #65	; 0x41
 80025e0:	f7fe fd66 	bl	80010b0 <lcd_ShowIntNum>
	  		  lcd_ShowStr(100, 260, ":" , WHITE, RED, 24,0);
 80025e4:	2300      	movs	r3, #0
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	2318      	movs	r3, #24
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f6:	4a15      	ldr	r2, [pc, #84]	; (800264c <button_press+0x654>)
 80025f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80025fc:	2064      	movs	r0, #100	; 0x64
 80025fe:	f7fe ff59 	bl	80014b4 <lcd_ShowStr>
	  		  lcd_ShowIntNum(110, 260, scheduleElements[6], 2, GREEN, BLACK, 24);
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <button_press+0x650>)
 8002604:	899a      	ldrh	r2, [r3, #12]
 8002606:	2318      	movs	r3, #24
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	2300      	movs	r3, #0
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2302      	movs	r3, #2
 8002616:	f44f 7182 	mov.w	r1, #260	; 0x104
 800261a:	206e      	movs	r0, #110	; 0x6e
 800261c:	f7fe fd48 	bl	80010b0 <lcd_ShowIntNum>
	  		  if (checkAlarm()) setAlarmFlag = 0;
 8002620:	f7ff fb1e 	bl	8001c60 <checkAlarm>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <button_press+0x638>
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <button_press+0x658>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
	  	 }
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	0800600c 	.word	0x0800600c
 800263c:	08006018 	.word	0x08006018
 8002640:	08006024 	.word	0x08006024
 8002644:	0800602c 	.word	0x0800602c
 8002648:	200001e4 	.word	0x200001e4
 800264c:	08006034 	.word	0x08006034
 8002650:	200001f4 	.word	0x200001f4

08002654 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4413      	add	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4413      	add	r3, r2
 8002678:	b2db      	uxtb	r3, r3
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <DEC2BCD+0x44>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	b258      	sxtb	r0, r3
 80026a2:	79fa      	ldrb	r2, [r7, #7]
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <DEC2BCD+0x44>)
 80026a6:	fba3 1302 	umull	r1, r3, r3, r2
 80026aa:	08d9      	lsrs	r1, r3, #3
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	4303      	orrs	r3, r0
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	b2db      	uxtb	r3, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	cccccccd 	.word	0xcccccccd

080026d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d4:	480d      	ldr	r0, [pc, #52]	; (800270c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026d6:	490e      	ldr	r1, [pc, #56]	; (8002710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026ec:	4c0b      	ldr	r4, [pc, #44]	; (800271c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026fa:	f7ff f9f3 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f003 fc27 	bl	8005f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002702:	f7fe ffd3 	bl	80016ac <main>
  bx  lr    
 8002706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002714:	08008fe0 	.word	0x08008fe0
  ldr r2, =_sbss
 8002718:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800271c:	200001fc 	.word	0x200001fc

08002720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC_IRQHandler>
	...

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <HAL_Init+0x40>)
 800272e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_Init+0x40>)
 800273a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_Init+0x40>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_Init+0x40>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274c:	2003      	movs	r0, #3
 800274e:	f000 f94f 	bl	80029f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002752:	200f      	movs	r0, #15
 8002754:	f000 f808 	bl	8002768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002758:	f7ff f968 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023c00 	.word	0x40023c00

08002768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x54>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x58>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f967 	bl	8002a5a <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f92f 	bl	8002a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <HAL_InitTick+0x5c>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000008 	.word	0x20000008
 80027c0:	20000030 	.word	0x20000030
 80027c4:	2000002c 	.word	0x2000002c

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000030 	.word	0x20000030
 80027ec:	200001f8 	.word	0x200001f8

080027f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200001f8 	.word	0x200001f8

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff ffee 	bl	80027f0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_Delay+0x44>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffde 	bl	80027f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000030 	.word	0x20000030

08002850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800286c:	4013      	ands	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <__NVIC_SetPriorityGrouping+0x44>)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	60d3      	str	r3, [r2, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <__NVIC_GetPriorityGrouping+0x18>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f003 0307 	and.w	r3, r3, #7
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	db0b      	blt.n	80028de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <__NVIC_EnableIRQ+0x38>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2001      	movs	r0, #1
 80028d6:	fa00 f202 	lsl.w	r2, r0, r2
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000e100 	.word	0xe000e100

080028f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	2b00      	cmp	r3, #0
 8002902:	db0a      	blt.n	800291a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	490c      	ldr	r1, [pc, #48]	; (800293c <__NVIC_SetPriority+0x4c>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	440b      	add	r3, r1
 8002914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002918:	e00a      	b.n	8002930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <__NVIC_SetPriority+0x50>)
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	3b04      	subs	r3, #4
 8002928:	0112      	lsls	r2, r2, #4
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	440b      	add	r3, r1
 800292e:	761a      	strb	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f1c3 0307 	rsb	r3, r3, #7
 800295e:	2b04      	cmp	r3, #4
 8002960:	bf28      	it	cs
 8002962:	2304      	movcs	r3, #4
 8002964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3304      	adds	r3, #4
 800296a:	2b06      	cmp	r3, #6
 800296c:	d902      	bls.n	8002974 <NVIC_EncodePriority+0x30>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3b03      	subs	r3, #3
 8002972:	e000      	b.n	8002976 <NVIC_EncodePriority+0x32>
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	401a      	ands	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	43d9      	mvns	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	4313      	orrs	r3, r2
         );
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3724      	adds	r7, #36	; 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029bc:	d301      	bcc.n	80029c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029be:	2301      	movs	r3, #1
 80029c0:	e00f      	b.n	80029e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <SysTick_Config+0x40>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ca:	210f      	movs	r1, #15
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f7ff ff8e 	bl	80028f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <SysTick_Config+0x40>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029da:	4b04      	ldr	r3, [pc, #16]	; (80029ec <SysTick_Config+0x40>)
 80029dc:	2207      	movs	r2, #7
 80029de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff29 	bl	8002850 <__NVIC_SetPriorityGrouping>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a18:	f7ff ff3e 	bl	8002898 <__NVIC_GetPriorityGrouping>
 8002a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff8e 	bl	8002944 <NVIC_EncodePriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff5d 	bl	80028f0 <__NVIC_SetPriority>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff31 	bl	80028b4 <__NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffa2 	bl	80029ac <SysTick_Config>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e16b      	b.n	8002d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 815a 	bne.w	8002d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80b4 	beq.w	8002d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b60      	ldr	r3, [pc, #384]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a5f      	ldr	r2, [pc, #380]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a5b      	ldr	r2, [pc, #364]	; (8002d84 <HAL_GPIO_Init+0x310>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_GPIO_Init+0x314>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a51      	ldr	r2, [pc, #324]	; (8002d8c <HAL_GPIO_Init+0x318>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4f      	ldr	r2, [pc, #316]	; (8002d94 <HAL_GPIO_Init+0x320>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x21a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	; (8002d98 <HAL_GPIO_Init+0x324>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x216>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4d      	ldr	r2, [pc, #308]	; (8002d9c <HAL_GPIO_Init+0x328>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x212>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <HAL_GPIO_Init+0x32c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x20a>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00e      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4935      	ldr	r1, [pc, #212]	; (8002d84 <HAL_GPIO_Init+0x310>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cde:	4a32      	ldr	r2, [pc, #200]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce4:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae90 	bls.w	8002a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020c00 	.word	0x40020c00
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40021400 	.word	0x40021400
 8002da0:	40021800 	.word	0x40021800
 8002da4:	40021c00 	.word	0x40021c00
 8002da8:	40013c00 	.word	0x40013c00

08002dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
 8002db8:	4613      	mov	r3, r2
 8002dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dbc:	787b      	ldrb	r3, [r7, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc8:	e003      	b.n	8002dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	041a      	lsls	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e12b      	b.n	800304a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fe94 	bl	8000b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e44:	f001 fd2a 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8002e48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a81      	ldr	r2, [pc, #516]	; (8003054 <HAL_I2C_Init+0x274>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d807      	bhi.n	8002e64 <HAL_I2C_Init+0x84>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a80      	ldr	r2, [pc, #512]	; (8003058 <HAL_I2C_Init+0x278>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bf94      	ite	ls
 8002e5c:	2301      	movls	r3, #1
 8002e5e:	2300      	movhi	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e006      	b.n	8002e72 <HAL_I2C_Init+0x92>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a7d      	ldr	r2, [pc, #500]	; (800305c <HAL_I2C_Init+0x27c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	bf94      	ite	ls
 8002e6c:	2301      	movls	r3, #1
 8002e6e:	2300      	movhi	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0e7      	b.n	800304a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a78      	ldr	r2, [pc, #480]	; (8003060 <HAL_I2C_Init+0x280>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_I2C_Init+0x274>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d802      	bhi.n	8002eb4 <HAL_I2C_Init+0xd4>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	e009      	b.n	8002ec8 <HAL_I2C_Init+0xe8>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	4a69      	ldr	r2, [pc, #420]	; (8003064 <HAL_I2C_Init+0x284>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	495c      	ldr	r1, [pc, #368]	; (8003054 <HAL_I2C_Init+0x274>)
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	d819      	bhi.n	8002f1c <HAL_I2C_Init+0x13c>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e59      	subs	r1, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002efc:	400b      	ands	r3, r1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_I2C_Init+0x138>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e59      	subs	r1, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f16:	e051      	b.n	8002fbc <HAL_I2C_Init+0x1dc>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	e04f      	b.n	8002fbc <HAL_I2C_Init+0x1dc>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d111      	bne.n	8002f48 <HAL_I2C_Init+0x168>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e58      	subs	r0, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e012      	b.n	8002f6e <HAL_I2C_Init+0x18e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	0099      	lsls	r1, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Init+0x196>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e022      	b.n	8002fbc <HAL_I2C_Init+0x1dc>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10e      	bne.n	8002f9c <HAL_I2C_Init+0x1bc>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1e58      	subs	r0, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	440b      	add	r3, r1
 8002f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9a:	e00f      	b.n	8002fbc <HAL_I2C_Init+0x1dc>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	6809      	ldr	r1, [r1, #0]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6911      	ldr	r1, [r2, #16]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68d2      	ldr	r2, [r2, #12]
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	000186a0 	.word	0x000186a0
 8003058:	001e847f 	.word	0x001e847f
 800305c:	003d08ff 	.word	0x003d08ff
 8003060:	431bde83 	.word	0x431bde83
 8003064:	10624dd3 	.word	0x10624dd3

08003068 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003082:	f7ff fbb5 	bl	80027f0 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	f040 80d9 	bne.w	8003248 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2319      	movs	r3, #25
 800309c:	2201      	movs	r2, #1
 800309e:	496d      	ldr	r1, [pc, #436]	; (8003254 <HAL_I2C_Mem_Write+0x1ec>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fdad 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0cc      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2C_Mem_Write+0x56>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e0c5      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d007      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2221      	movs	r2, #33	; 0x21
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_I2C_Mem_Write+0x1f0>)
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003126:	88f8      	ldrh	r0, [r7, #6]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4603      	mov	r3, r0
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fbe4 	bl	8003904 <I2C_RequestMemoryWrite>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d052      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e081      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fe2e 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b04      	cmp	r3, #4
 800315c:	d107      	bne.n	800316e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06b      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d11b      	bne.n	80031e8 <HAL_I2C_Mem_Write+0x180>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d017      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1aa      	bne.n	8003146 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fe1a 	bl	8003e2e <I2C_WaitOnBTFFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b04      	cmp	r3, #4
 8003206:	d107      	bne.n	8003218 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e016      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	00100002 	.word	0x00100002
 8003258:	ffff0000 	.word	0xffff0000

0800325c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7ff fabb 	bl	80027f0 <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b20      	cmp	r3, #32
 8003286:	f040 8208 	bne.w	800369a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2319      	movs	r3, #25
 8003290:	2201      	movs	r2, #1
 8003292:	497b      	ldr	r1, [pc, #492]	; (8003480 <HAL_I2C_Mem_Read+0x224>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fcb3 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
 80032a2:	e1fb      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Mem_Read+0x56>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e1f4      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d007      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	; 0x22
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a5b      	ldr	r2, [pc, #364]	; (8003484 <HAL_I2C_Mem_Read+0x228>)
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331a:	88f8      	ldrh	r0, [r7, #6]
 800331c:	893a      	ldrh	r2, [r7, #8]
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4603      	mov	r3, r0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fb80 	bl	8003a30 <I2C_RequestMemoryRead>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1b0      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d113      	bne.n	800336a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	623b      	str	r3, [r7, #32]
 8003356:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e184      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11b      	bne.n	80033aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e164      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d11b      	bne.n	80033ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	e144      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003400:	e138      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b03      	cmp	r3, #3
 8003408:	f200 80f1 	bhi.w	80035ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	2b01      	cmp	r3, #1
 8003412:	d123      	bne.n	800345c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fd49 	bl	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e139      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	; 0x2a
 800345a:	e10b      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003460:	2b02      	cmp	r3, #2
 8003462:	d14e      	bne.n	8003502 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2200      	movs	r2, #0
 800346c:	4906      	ldr	r1, [pc, #24]	; (8003488 <HAL_I2C_Mem_Read+0x22c>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fbc6 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e10e      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
 800347e:	bf00      	nop
 8003480:	00100002 	.word	0x00100002
 8003484:	ffff0000 	.word	0xffff0000
 8003488:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003500:	e0b8      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	2200      	movs	r2, #0
 800350a:	4966      	ldr	r1, [pc, #408]	; (80036a4 <HAL_I2C_Mem_Read+0x448>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fb77 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0bf      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	2200      	movs	r2, #0
 8003566:	494f      	ldr	r1, [pc, #316]	; (80036a4 <HAL_I2C_Mem_Read+0x448>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb49 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e091      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ec:	e042      	b.n	8003674 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fc5c 	bl	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e04c      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d118      	bne.n	8003674 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f aec2 	bne.w	8003402 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3728      	adds	r7, #40	; 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	00010004 	.word	0x00010004

080036a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	460b      	mov	r3, r1
 80036b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036b8:	f7ff f89a 	bl	80027f0 <HAL_GetTick>
 80036bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f040 8111 	bne.w	80038f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	4988      	ldr	r1, [pc, #544]	; (80038fc <HAL_I2C_IsDeviceReady+0x254>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa90 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
 80036e8:	e104      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_I2C_IsDeviceReady+0x50>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0fd      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d007      	beq.n	800371e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2224      	movs	r2, #36	; 0x24
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a70      	ldr	r2, [pc, #448]	; (8003900 <HAL_I2C_IsDeviceReady+0x258>)
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003750:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fa4e 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	d103      	bne.n	8003782 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0b6      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003794:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003796:	f7ff f82b 	bl	80027f0 <HAL_GetTick>
 800379a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	bf0c      	ite	eq
 80037c2:	2301      	moveq	r3, #1
 80037c4:	2300      	movne	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ca:	e025      	b.n	8003818 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7ff f810 	bl	80027f0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <HAL_I2C_IsDeviceReady+0x13a>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	22a0      	movs	r2, #160	; 0xa0
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2ba0      	cmp	r3, #160	; 0xa0
 8003822:	d005      	beq.n	8003830 <HAL_I2C_IsDeviceReady+0x188>
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_I2C_IsDeviceReady+0x188>
 800382a:	7dbb      	ldrb	r3, [r7, #22]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0cd      	beq.n	80037cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d129      	bne.n	800389a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003854:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2319      	movs	r3, #25
 8003872:	2201      	movs	r2, #1
 8003874:	4921      	ldr	r1, [pc, #132]	; (80038fc <HAL_I2C_IsDeviceReady+0x254>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f9c2 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e036      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e02c      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2319      	movs	r3, #25
 80038ba:	2201      	movs	r2, #1
 80038bc:	490f      	ldr	r1, [pc, #60]	; (80038fc <HAL_I2C_IsDeviceReady+0x254>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f99e 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e012      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	f4ff af32 	bcc.w	8003742 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	00100002 	.word	0x00100002
 8003900:	ffff0000 	.word	0xffff0000

08003904 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4603      	mov	r3, r0
 8003914:	817b      	strh	r3, [r7, #10]
 8003916:	460b      	mov	r3, r1
 8003918:	813b      	strh	r3, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2200      	movs	r2, #0
 8003936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f960 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003954:	d103      	bne.n	800395e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e05f      	b.n	8003a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	6a3a      	ldr	r2, [r7, #32]
 8003976:	492d      	ldr	r1, [pc, #180]	; (8003a2c <I2C_RequestMemoryWrite+0x128>)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f998 	bl	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e04c      	b.n	8003a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	6a39      	ldr	r1, [r7, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fa02 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d107      	bne.n	80039c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02b      	b.n	8003a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	611a      	str	r2, [r3, #16]
 80039da:	e021      	b.n	8003a20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039dc:	893b      	ldrh	r3, [r7, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f9dc 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e005      	b.n	8003a22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a16:	893b      	ldrh	r3, [r7, #8]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	00010002 	.word	0x00010002

08003a30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f8c2 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a90:	d103      	bne.n	8003a9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e0aa      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	4952      	ldr	r1, [pc, #328]	; (8003bfc <I2C_RequestMemoryRead+0x1cc>)
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f8fa 	bl	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e097      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	6a39      	ldr	r1, [r7, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f964 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d107      	bne.n	8003b02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e076      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0c:	893b      	ldrh	r3, [r7, #8]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]
 8003b16:	e021      	b.n	8003b5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f93e 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e050      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b52:	893b      	ldrh	r3, [r7, #8]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	6a39      	ldr	r1, [r7, #32]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f923 	bl	8003dac <I2C_WaitOnTXEFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e035      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f82b 	bl	8003c00 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00d      	beq.n	8003bcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbe:	d103      	bne.n	8003bc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e013      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	4906      	ldr	r1, [pc, #24]	; (8003bfc <I2C_RequestMemoryRead+0x1cc>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f863 	bl	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	00010002 	.word	0x00010002

08003c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c10:	e025      	b.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d021      	beq.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1a:	f7fe fde9 	bl	80027f0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d302      	bcc.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d116      	bne.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e023      	b.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10d      	bne.n	8003c84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	e00c      	b.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d0b6      	beq.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cbc:	e051      	b.n	8003d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ccc:	d123      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ce6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0204 	orr.w	r2, r3, #4
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e046      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d021      	beq.n	8003d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fd67 	bl	80027f0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e020      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10c      	bne.n	8003d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf14      	ite	ne
 8003d7e:	2301      	movne	r3, #1
 8003d80:	2300      	moveq	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e00b      	b.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d18d      	bne.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db8:	e02d      	b.n	8003e16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f8ce 	bl	8003f5c <I2C_IsAcknowledgeFailed>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e02d      	b.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d021      	beq.n	8003e16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fe fd0d 	bl	80027f0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e007      	b.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d1ca      	bne.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e3a:	e02d      	b.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f88d 	bl	8003f5c <I2C_IsAcknowledgeFailed>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e02d      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d021      	beq.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e54:	f7fe fccc 	bl	80027f0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e007      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d1ca      	bne.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ebc:	e042      	b.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d119      	bne.n	8003f00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0210 	mvn.w	r2, #16
 8003ed4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e029      	b.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f00:	f7fe fc76 	bl	80027f0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d1b5      	bne.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f72:	d11b      	bne.n	8003fac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e267      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d075      	beq.n	80040c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fda:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d00c      	beq.n	8004000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b85      	ldr	r3, [pc, #532]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d112      	bne.n	8004018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff2:	4b82      	ldr	r3, [pc, #520]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffe:	d10b      	bne.n	8004018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	4b7e      	ldr	r3, [pc, #504]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05b      	beq.n	80040c4 <HAL_RCC_OscConfig+0x108>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d157      	bne.n	80040c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e242      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004020:	d106      	bne.n	8004030 <HAL_RCC_OscConfig+0x74>
 8004022:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a75      	ldr	r2, [pc, #468]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e01d      	b.n	800406c <HAL_RCC_OscConfig+0xb0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x98>
 800403a:	4b70      	ldr	r3, [pc, #448]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6f      	ldr	r2, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b6d      	ldr	r3, [pc, #436]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6c      	ldr	r2, [pc, #432]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0xb0>
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a68      	ldr	r2, [pc, #416]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a65      	ldr	r2, [pc, #404]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fe fbbc 	bl	80027f0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe fbb8 	bl	80027f0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e207      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0xc0>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe fba8 	bl	80027f0 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe fba4 	bl	80027f0 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e1f3      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	4b51      	ldr	r3, [pc, #324]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0xe8>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d063      	beq.n	800419a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d2:	4b4a      	ldr	r3, [pc, #296]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x152>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1c7      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4937      	ldr	r1, [pc, #220]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b34      	ldr	r3, [pc, #208]	; (8004200 <HAL_RCC_OscConfig+0x244>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe fb5d 	bl	80027f0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413a:	f7fe fb59 	bl	80027f0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1a8      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4925      	ldr	r1, [pc, #148]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <HAL_RCC_OscConfig+0x244>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe fb3c 	bl	80027f0 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe fb38 	bl	80027f0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e187      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d036      	beq.n	8004214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <HAL_RCC_OscConfig+0x248>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fe fb1c 	bl	80027f0 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fe fb18 	bl	80027f0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e167      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_OscConfig+0x240>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x200>
 80041da:	e01b      	b.n	8004214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_OscConfig+0x248>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fe fb05 	bl	80027f0 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	e00e      	b.n	8004208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fe fb01 	bl	80027f0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d907      	bls.n	8004208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e150      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
 80041fc:	40023800 	.word	0x40023800
 8004200:	42470000 	.word	0x42470000
 8004204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b88      	ldr	r3, [pc, #544]	; (800442c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ea      	bne.n	80041ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8097 	beq.w	8004350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b81      	ldr	r3, [pc, #516]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b7d      	ldr	r3, [pc, #500]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a7c      	ldr	r2, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b7a      	ldr	r3, [pc, #488]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b77      	ldr	r3, [pc, #476]	; (8004430 <HAL_RCC_OscConfig+0x474>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b74      	ldr	r3, [pc, #464]	; (8004430 <HAL_RCC_OscConfig+0x474>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a73      	ldr	r2, [pc, #460]	; (8004430 <HAL_RCC_OscConfig+0x474>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fe fac1 	bl	80027f0 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fe fabd 	bl	80027f0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e10c      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <HAL_RCC_OscConfig+0x474>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2ea>
 8004298:	4b64      	ldr	r3, [pc, #400]	; (800442c <HAL_RCC_OscConfig+0x470>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a63      	ldr	r2, [pc, #396]	; (800442c <HAL_RCC_OscConfig+0x470>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x324>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x30c>
 80042ae:	4b5f      	ldr	r3, [pc, #380]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a5e      	ldr	r2, [pc, #376]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ba:	4b5c      	ldr	r3, [pc, #368]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	4a5b      	ldr	r2, [pc, #364]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x324>
 80042c8:	4b58      	ldr	r3, [pc, #352]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a57      	ldr	r2, [pc, #348]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	4b55      	ldr	r3, [pc, #340]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a54      	ldr	r2, [pc, #336]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fe fa82 	bl	80027f0 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fe fa7e 	bl	80027f0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0cb      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b49      	ldr	r3, [pc, #292]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x334>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fe fa6c 	bl	80027f0 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fe fa68 	bl	80027f0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0b5      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	4b3e      	ldr	r3, [pc, #248]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b39      	ldr	r3, [pc, #228]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	4a38      	ldr	r2, [pc, #224]	; (800442c <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80a1 	beq.w	800449c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435a:	4b34      	ldr	r3, [pc, #208]	; (800442c <HAL_RCC_OscConfig+0x470>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d05c      	beq.n	8004420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d141      	bne.n	80043f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_OscConfig+0x478>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fa3c 	bl	80027f0 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fe fa38 	bl	80027f0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e087      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b27      	ldr	r3, [pc, #156]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	491b      	ldr	r1, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x478>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe fa11 	bl	80027f0 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fe fa0d 	bl	80027f0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e05c      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_RCC_OscConfig+0x470>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x416>
 80043f0:	e054      	b.n	800449c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_RCC_OscConfig+0x478>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fe f9fa 	bl	80027f0 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004400:	f7fe f9f6 	bl	80027f0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e045      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCC_OscConfig+0x470>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x444>
 800441e:	e03d      	b.n	800449c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d107      	bne.n	8004438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e038      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000
 8004434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x4ec>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d028      	beq.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d121      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d11a      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800446e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	3b01      	subs	r3, #1
 8004482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d107      	bne.n	8004498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0cc      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b68      	ldr	r3, [pc, #416]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90c      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a58      	ldr	r2, [pc, #352]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d119      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d003      	beq.n	800456a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e06f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b3b      	ldr	r3, [pc, #236]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e067      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4934      	ldr	r1, [pc, #208]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7fe f928 	bl	80027f0 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fe f924 	bl	80027f0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e04f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2b      	ldr	r3, [pc, #172]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d20c      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f821 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490a      	ldr	r1, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f888 	bl	8002768 <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023c00 	.word	0x40023c00
 8004668:	40023800 	.word	0x40023800
 800466c:	08008fb8 	.word	0x08008fb8
 8004670:	20000008 	.word	0x20000008
 8004674:	2000002c 	.word	0x2000002c

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b094      	sub	sp, #80	; 0x50
 800467e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
 8004684:	2300      	movs	r3, #0
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	2300      	movs	r3, #0
 800468a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004690:	4b79      	ldr	r3, [pc, #484]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b08      	cmp	r3, #8
 800469a:	d00d      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x40>
 800469c:	2b08      	cmp	r3, #8
 800469e:	f200 80e1 	bhi.w	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x34>
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046aa:	e0db      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b73      	ldr	r3, [pc, #460]	; (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 80046ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046b0:	e0db      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_GetSysClockFreq+0x208>)
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b6:	e0d8      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b8:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c2:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	2200      	movs	r2, #0
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	f04f 0000 	mov.w	r0, #0
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	0159      	lsls	r1, r3, #5
 80046f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fc:	0150      	lsls	r0, r2, #5
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4621      	mov	r1, r4
 8004704:	1a51      	subs	r1, r2, r1
 8004706:	6139      	str	r1, [r7, #16]
 8004708:	4629      	mov	r1, r5
 800470a:	eb63 0301 	sbc.w	r3, r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	018b      	lsls	r3, r1, #6
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004726:	4651      	mov	r1, sl
 8004728:	018a      	lsls	r2, r1, #6
 800472a:	4651      	mov	r1, sl
 800472c:	ebb2 0801 	subs.w	r8, r2, r1
 8004730:	4659      	mov	r1, fp
 8004732:	eb63 0901 	sbc.w	r9, r3, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	4623      	mov	r3, r4
 8004750:	eb18 0303 	adds.w	r3, r8, r3
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	462b      	mov	r3, r5
 8004758:	eb49 0303 	adc.w	r3, r9, r3
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800476a:	4629      	mov	r1, r5
 800476c:	024b      	lsls	r3, r1, #9
 800476e:	4621      	mov	r1, r4
 8004770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004774:	4621      	mov	r1, r4
 8004776:	024a      	lsls	r2, r1, #9
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	2200      	movs	r2, #0
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004788:	f7fb fd1e 	bl	80001c8 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	e058      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	2200      	movs	r2, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	4611      	mov	r1, r2
 80047a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0159      	lsls	r1, r3, #5
 80047be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c2:	0150      	lsls	r0, r2, #5
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4641      	mov	r1, r8
 80047ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e8:	ebb2 040a 	subs.w	r4, r2, sl
 80047ec:	eb63 050b 	sbc.w	r5, r3, fp
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	464b      	mov	r3, r9
 800480c:	eb45 0303 	adc.w	r3, r5, r3
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004828:	4621      	mov	r1, r4
 800482a:	028a      	lsls	r2, r1, #10
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	61fa      	str	r2, [r7, #28]
 8004838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483c:	f7fb fcc4 	bl	80001c8 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004862:	e002      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800486c:	4618      	mov	r0, r3
 800486e:	3750      	adds	r7, #80	; 0x50
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000008 	.word	0x20000008

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08008fc8 	.word	0x08008fc8

080048c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07b      	b.n	80049ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d108      	bne.n	80048f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e6:	d009      	beq.n	80048fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
 80048ee:	e005      	b.n	80048fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f840 	bl	800199c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004932:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	ea42 0103 	orr.w	r1, r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0104 	and.w	r1, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	f003 0210 	and.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b088      	sub	sp, #32
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	603b      	str	r3, [r7, #0]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_SPI_Transmit+0x22>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e126      	b.n	8004c46 <HAL_SPI_Transmit+0x270>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a00:	f7fd fef6 	bl	80027f0 <HAL_GetTick>
 8004a04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
 8004a18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1a:	e10b      	b.n	8004c34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_Transmit+0x52>
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2c:	e102      	b.n	8004c34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2203      	movs	r2, #3
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	d10f      	bne.n	8004a96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d007      	beq.n	8004ab4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abc:	d14b      	bne.n	8004b56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Transmit+0xf6>
 8004ac6:	8afb      	ldrh	r3, [r7, #22]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d13e      	bne.n	8004b4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	881a      	ldrh	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	1c9a      	adds	r2, r3, #2
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004af0:	e02b      	b.n	8004b4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d112      	bne.n	8004b26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	881a      	ldrh	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b24:	e011      	b.n	8004b4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b26:	f7fd fe63 	bl	80027f0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d803      	bhi.n	8004b3e <HAL_SPI_Transmit+0x168>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_Transmit+0x16e>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b48:	e074      	b.n	8004c34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ce      	bne.n	8004af2 <HAL_SPI_Transmit+0x11c>
 8004b54:	e04c      	b.n	8004bf0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_Transmit+0x18e>
 8004b5e:	8afb      	ldrh	r3, [r7, #22]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d140      	bne.n	8004be6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b8a:	e02c      	b.n	8004be6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d113      	bne.n	8004bc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc0:	e011      	b.n	8004be6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc2:	f7fd fe15 	bl	80027f0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d803      	bhi.n	8004bda <HAL_SPI_Transmit+0x204>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_Transmit+0x20a>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be4:	e026      	b.n	8004c34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1cd      	bne.n	8004b8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 fbcb 	bl	8005390 <SPI_EndRxTxTransaction>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e000      	b.n	8004c34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af02      	add	r7, sp, #8
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d112      	bne.n	8004c92 <HAL_SPI_Receive+0x44>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10e      	bne.n	8004c92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2204      	movs	r2, #4
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f8f1 	bl	8004e70 <HAL_SPI_TransmitReceive>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	e0ea      	b.n	8004e68 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_SPI_Receive+0x52>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e0e3      	b.n	8004e68 <HAL_SPI_Receive+0x21a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ca8:	f7fd fda2 	bl	80027f0 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cbe:	e0ca      	b.n	8004e56 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Receive+0x7e>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd0:	e0c1      	b.n	8004e56 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	88fa      	ldrh	r2, [r7, #6]
 8004cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d18:	d10f      	bne.n	8004d3a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d007      	beq.n	8004d58 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d162      	bne.n	8004e26 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d60:	e02e      	b.n	8004dc0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d115      	bne.n	8004d9c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f103 020c 	add.w	r2, r3, #12
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d9a:	e011      	b.n	8004dc0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d9c:	f7fd fd28 	bl	80027f0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d803      	bhi.n	8004db4 <HAL_SPI_Receive+0x166>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d102      	bne.n	8004dba <HAL_SPI_Receive+0x16c>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dbe:	e04a      	b.n	8004e56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1cb      	bne.n	8004d62 <HAL_SPI_Receive+0x114>
 8004dca:	e031      	b.n	8004e30 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d113      	bne.n	8004e02 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	b292      	uxth	r2, r2
 8004de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e00:	e011      	b.n	8004e26 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e02:	f7fd fcf5 	bl	80027f0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d803      	bhi.n	8004e1a <HAL_SPI_Receive+0x1cc>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d102      	bne.n	8004e20 <HAL_SPI_Receive+0x1d2>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e24:	e017      	b.n	8004e56 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1cd      	bne.n	8004dcc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	6839      	ldr	r1, [r7, #0]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fa45 	bl	80052c4 <SPI_EndRxTransaction>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
 8004e52:	e000      	b.n	8004e56 <HAL_SPI_Receive+0x208>
  }

error :
 8004e54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	; 0x30
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_SPI_TransmitReceive+0x26>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e18a      	b.n	80051ac <HAL_SPI_TransmitReceive+0x33c>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e9e:	f7fd fca7 	bl	80027f0 <HAL_GetTick>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004eb4:	887b      	ldrh	r3, [r7, #2]
 8004eb6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d00f      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x70>
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec6:	d107      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d103      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x68>
 8004ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d003      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ede:	e15b      	b.n	8005198 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x82>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x82>
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ef8:	e14e      	b.n	8005198 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d003      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2205      	movs	r2, #5
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	887a      	ldrh	r2, [r7, #2]
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	887a      	ldrh	r2, [r7, #2]
 8004f36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b40      	cmp	r3, #64	; 0x40
 8004f50:	d007      	beq.n	8004f62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6a:	d178      	bne.n	800505e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_SPI_TransmitReceive+0x10a>
 8004f74:	8b7b      	ldrh	r3, [r7, #26]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d166      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9e:	e053      	b.n	8005048 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d11b      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x176>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d016      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x176>
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d113      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	881a      	ldrh	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	1c9a      	adds	r2, r3, #2
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d119      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x1b8>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d014      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	b292      	uxth	r2, r2
 800500a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005024:	2301      	movs	r3, #1
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005028:	f7fd fbe2 	bl	80027f0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005034:	429a      	cmp	r2, r3
 8005036:	d807      	bhi.n	8005048 <HAL_SPI_TransmitReceive+0x1d8>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d003      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005046:	e0a7      	b.n	8005198 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1a6      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x130>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1a1      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x130>
 800505c:	e07c      	b.n	8005158 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <HAL_SPI_TransmitReceive+0x1fc>
 8005066:	8b7b      	ldrh	r3, [r7, #26]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d16b      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005092:	e057      	b.n	8005144 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d11c      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x26c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d017      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x26c>
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d114      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d119      	bne.n	800511e <HAL_SPI_TransmitReceive+0x2ae>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d014      	beq.n	800511e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800511a:	2301      	movs	r3, #1
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800511e:	f7fd fb67 	bl	80027f0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512a:	429a      	cmp	r2, r3
 800512c:	d803      	bhi.n	8005136 <HAL_SPI_TransmitReceive+0x2c6>
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d102      	bne.n	800513c <HAL_SPI_TransmitReceive+0x2cc>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d103      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005142:	e029      	b.n	8005198 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1a2      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x224>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d19d      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f917 	bl	8005390 <SPI_EndRxTxTransaction>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005174:	e010      	b.n	8005198 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10b      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	e000      	b.n	8005198 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	; 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c4:	f7fd fb14 	bl	80027f0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d4:	f7fd fb0c 	bl	80027f0 <HAL_GetTick>
 80051d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	015b      	lsls	r3, r3, #5
 80051e0:	0d1b      	lsrs	r3, r3, #20
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ea:	e054      	b.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d050      	beq.n	8005296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f4:	f7fd fafc 	bl	80027f0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d902      	bls.n	800520a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d13d      	bne.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005222:	d111      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522c:	d004      	beq.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005236:	d107      	bne.n	8005248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005250:	d10f      	bne.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e017      	b.n	80052b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3b01      	subs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d19b      	bne.n	80051ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000008 	.word	0x20000008

080052c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d8:	d111      	bne.n	80052fe <SPI_EndRxTransaction+0x3a>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e2:	d004      	beq.n	80052ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ec:	d107      	bne.n	80052fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005306:	d12a      	bne.n	800535e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d012      	beq.n	8005338 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ff49 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02d      	beq.n	8005384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e026      	b.n	8005386 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	2101      	movs	r1, #1
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff36 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01a      	beq.n	8005384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e013      	b.n	8005386 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	2101      	movs	r1, #1
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff ff23 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e000      	b.n	8005386 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800539c:	4b1b      	ldr	r3, [pc, #108]	; (800540c <SPI_EndRxTxTransaction+0x7c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <SPI_EndRxTxTransaction+0x80>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	0d5b      	lsrs	r3, r3, #21
 80053a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ba:	d112      	bne.n	80053e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2180      	movs	r1, #128	; 0x80
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff fef4 	bl	80051b4 <SPI_WaitFlagStateUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d016      	beq.n	8005400 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e00f      	b.n	8005402 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d0f2      	beq.n	80053e2 <SPI_EndRxTxTransaction+0x52>
 80053fc:	e000      	b.n	8005400 <SPI_EndRxTxTransaction+0x70>
        break;
 80053fe:	bf00      	nop
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000008 	.word	0x20000008
 8005410:	165e9f81 	.word	0x165e9f81

08005414 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e034      	b.n	8005494 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7fb fa48 	bl	80008d4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3308      	adds	r3, #8
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 fca6 	bl	8005da0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	461a      	mov	r2, r3
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	f000 fcf0 	bl	8005e44 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6858      	ldr	r0, [r3, #4]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	f000 fd25 	bl	8005ec0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	f041 0101 	orr.w	r1, r1, #1
 800548e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e041      	b.n	8005532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fc fb6c 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f000 fa96 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e04e      	b.n	80055f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a23      	ldr	r2, [pc, #140]	; (8005600 <HAL_TIM_Base_Start_IT+0xc4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d022      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d01d      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <HAL_TIM_Base_Start_IT+0xc8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <HAL_TIM_Base_Start_IT+0xcc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_TIM_Base_Start_IT+0xd0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <HAL_TIM_Base_Start_IT+0xd4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a19      	ldr	r2, [pc, #100]	; (8005614 <HAL_TIM_Base_Start_IT+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x80>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIM_Base_Start_IT+0xdc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d111      	bne.n	80055e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d010      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	e007      	b.n	80055f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40010000 	.word	0x40010000
 8005604:	40000400 	.word	0x40000400
 8005608:	40000800 	.word	0x40000800
 800560c:	40000c00 	.word	0x40000c00
 8005610:	40010400 	.word	0x40010400
 8005614:	40014000 	.word	0x40014000
 8005618:	40001800 	.word	0x40001800

0800561c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d122      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d11b      	bne.n	8005678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0202 	mvn.w	r2, #2
 8005648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9b5 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 8005664:	e005      	b.n	8005672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f9a7 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f9b8 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b04      	cmp	r3, #4
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0204 	mvn.w	r2, #4
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f98b 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f97d 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f98e 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0208 	mvn.w	r2, #8
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2204      	movs	r2, #4
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f961 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f953 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f964 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0310 	and.w	r3, r3, #16
 800572a:	2b10      	cmp	r3, #16
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0210 	mvn.w	r2, #16
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2208      	movs	r2, #8
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f937 	bl	80059ce <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f929 	bl	80059ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f93a 	bl	80059e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0201 	mvn.w	r2, #1
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc f89e 	bl	80018dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fae0 	bl	8005d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8ff 	bl	80059f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b20      	cmp	r3, #32
 8005804:	d10e      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d107      	bne.n	8005824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0220 	mvn.w	r2, #32
 800581c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 faaa 	bl	8005d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIM_ConfigClockSource+0x1c>
 8005844:	2302      	movs	r3, #2
 8005846:	e0b4      	b.n	80059b2 <HAL_TIM_ConfigClockSource+0x186>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005880:	d03e      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0xd4>
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	f200 8087 	bhi.w	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	f000 8086 	beq.w	800599e <HAL_TIM_ConfigClockSource+0x172>
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d87f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b70      	cmp	r3, #112	; 0x70
 800589a:	d01a      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xa6>
 800589c:	2b70      	cmp	r3, #112	; 0x70
 800589e:	d87b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b60      	cmp	r3, #96	; 0x60
 80058a2:	d050      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x11a>
 80058a4:	2b60      	cmp	r3, #96	; 0x60
 80058a6:	d877      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b50      	cmp	r3, #80	; 0x50
 80058aa:	d03c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xfa>
 80058ac:	2b50      	cmp	r3, #80	; 0x50
 80058ae:	d873      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d058      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x13a>
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d86f      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b30      	cmp	r3, #48	; 0x30
 80058ba:	d064      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d86b      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d060      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d867      	bhi.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05c      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d05a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	e062      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6899      	ldr	r1, [r3, #8]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f000 f9ad 	bl	8005c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	609a      	str	r2, [r3, #8]
      break;
 80058fe:	e04f      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6899      	ldr	r1, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f000 f996 	bl	8005c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005922:	609a      	str	r2, [r3, #8]
      break;
 8005924:	e03c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	461a      	mov	r2, r3
 8005934:	f000 f90a 	bl	8005b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2150      	movs	r1, #80	; 0x50
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f963 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 8005944:	e02c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f000 f929 	bl	8005baa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2160      	movs	r1, #96	; 0x60
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f953 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 8005964:	e01c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6859      	ldr	r1, [r3, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	461a      	mov	r2, r3
 8005974:	f000 f8ea 	bl	8005b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2140      	movs	r1, #64	; 0x40
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f943 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f000 f93a 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 8005996:	e003      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800599e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2a:	d00f      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a3d      	ldr	r2, [pc, #244]	; (8005b24 <TIM_Base_SetConfig+0x118>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00b      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a3c      	ldr	r2, [pc, #240]	; (8005b28 <TIM_Base_SetConfig+0x11c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d007      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a3b      	ldr	r2, [pc, #236]	; (8005b2c <TIM_Base_SetConfig+0x120>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <TIM_Base_SetConfig+0x124>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d108      	bne.n	8005a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2f      	ldr	r2, [pc, #188]	; (8005b20 <TIM_Base_SetConfig+0x114>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d02b      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6c:	d027      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2c      	ldr	r2, [pc, #176]	; (8005b24 <TIM_Base_SetConfig+0x118>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d023      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2b      	ldr	r2, [pc, #172]	; (8005b28 <TIM_Base_SetConfig+0x11c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01f      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2a      	ldr	r2, [pc, #168]	; (8005b2c <TIM_Base_SetConfig+0x120>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01b      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <TIM_Base_SetConfig+0x124>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d017      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <TIM_Base_SetConfig+0x128>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <TIM_Base_SetConfig+0x12c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00f      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <TIM_Base_SetConfig+0x130>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a25      	ldr	r2, [pc, #148]	; (8005b40 <TIM_Base_SetConfig+0x134>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <TIM_Base_SetConfig+0x138>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <TIM_Base_SetConfig+0x13c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d108      	bne.n	8005ad0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <TIM_Base_SetConfig+0x114>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_Base_SetConfig+0xf8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <TIM_Base_SetConfig+0x124>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d103      	bne.n	8005b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	615a      	str	r2, [r3, #20]
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800
 8005b40:	40001800 	.word	0x40001800
 8005b44:	40001c00 	.word	0x40001c00
 8005b48:	40002000 	.word	0x40002000

08005b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0201 	bic.w	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 030a 	bic.w	r3, r3, #10
 8005b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b087      	sub	sp, #28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0210 	bic.w	r2, r3, #16
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	621a      	str	r2, [r3, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f043 0307 	orr.w	r3, r3, #7
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	021a      	lsls	r2, r3, #8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	609a      	str	r2, [r3, #8]
}
 8005c74:	bf00      	nop
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e05a      	b.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce4:	d01d      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1d      	ldr	r2, [pc, #116]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a1a      	ldr	r2, [pc, #104]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10c      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	40010400 	.word	0x40010400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40001800 	.word	0x40001800

08005d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <FSMC_NORSRAM_Init+0xa0>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005dca:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005dd0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005dd6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005ddc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005de2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005de8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005dee:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005df4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005dfa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005e00:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005e06:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005e0c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d103      	bne.n	8005e24 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	fff00080 	.word	0xfff00080

08005e44 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005e66:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e72:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005e7a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005e82:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e8c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	3b02      	subs	r3, #2
 8005e94:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005e96:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6979      	ldr	r1, [r7, #20]
 8005eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed8:	d122      	bne.n	8005f20 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005ef6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005efe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005f06:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005f0c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005f1e:	e005      	b.n	8005f2c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	cff00000 	.word	0xcff00000

08005f40 <memset>:
 8005f40:	4402      	add	r2, r0
 8005f42:	4603      	mov	r3, r0
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d100      	bne.n	8005f4a <memset+0xa>
 8005f48:	4770      	bx	lr
 8005f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4e:	e7f9      	b.n	8005f44 <memset+0x4>

08005f50 <__libc_init_array>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	4d0d      	ldr	r5, [pc, #52]	; (8005f88 <__libc_init_array+0x38>)
 8005f54:	4c0d      	ldr	r4, [pc, #52]	; (8005f8c <__libc_init_array+0x3c>)
 8005f56:	1b64      	subs	r4, r4, r5
 8005f58:	10a4      	asrs	r4, r4, #2
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	42a6      	cmp	r6, r4
 8005f5e:	d109      	bne.n	8005f74 <__libc_init_array+0x24>
 8005f60:	4d0b      	ldr	r5, [pc, #44]	; (8005f90 <__libc_init_array+0x40>)
 8005f62:	4c0c      	ldr	r4, [pc, #48]	; (8005f94 <__libc_init_array+0x44>)
 8005f64:	f000 f818 	bl	8005f98 <_init>
 8005f68:	1b64      	subs	r4, r4, r5
 8005f6a:	10a4      	asrs	r4, r4, #2
 8005f6c:	2600      	movs	r6, #0
 8005f6e:	42a6      	cmp	r6, r4
 8005f70:	d105      	bne.n	8005f7e <__libc_init_array+0x2e>
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f78:	4798      	blx	r3
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7ee      	b.n	8005f5c <__libc_init_array+0xc>
 8005f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f82:	4798      	blx	r3
 8005f84:	3601      	adds	r6, #1
 8005f86:	e7f2      	b.n	8005f6e <__libc_init_array+0x1e>
 8005f88:	08008fd8 	.word	0x08008fd8
 8005f8c:	08008fd8 	.word	0x08008fd8
 8005f90:	08008fd8 	.word	0x08008fd8
 8005f94:	08008fdc 	.word	0x08008fdc

08005f98 <_init>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	bf00      	nop
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr

08005fa4 <_fini>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr
